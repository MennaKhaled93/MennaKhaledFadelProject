
H32_AMIT_MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000068  00800060  000031f4  00003288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  008000c8  008000c8  000032f0  2**0
                  ALLOC
  3 .stab         000035dc  00000000  00000000  000032f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002283  00000000  00000000  000068cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00008b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00008caf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00008e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000ae83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000bf84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000cf08  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000d088  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000d34a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dbd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 35 0a 	jmp	0x146a	; 0x146a <__vector_1>
       8:	0c 94 62 0a 	jmp	0x14c4	; 0x14c4 <__vector_2>
       c:	0c 94 8f 0a 	jmp	0x151e	; 0x151e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__vector_10>
      2c:	0c 94 76 07 	jmp	0xeec	; 0xeec <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3c       	cpi	r26, 0xC8	; 200
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 ec       	ldi	r26, 0xC8	; 200
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3d       	cpi	r26, 0xDD	; 221
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 aa 18 	call	0x3154	; 0x3154 <main>
      8a:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c1 18 	jmp	0x3182	; 0x3182 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 dd 18 	jmp	0x31ba	; 0x31ba <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cd 18 	jmp	0x319a	; 0x319a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e9 18 	jmp	0x31d2	; 0x31d2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cd 18 	jmp	0x319a	; 0x319a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e9 18 	jmp	0x31d2	; 0x31d2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c1 18 	jmp	0x3182	; 0x3182 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 dd 18 	jmp	0x31ba	; 0x31ba <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c9 18 	jmp	0x3192	; 0x3192 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e5 18 	jmp	0x31ca	; 0x31ca <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 cd 18 	jmp	0x319a	; 0x319a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e9 18 	jmp	0x31d2	; 0x31d2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 cd 18 	jmp	0x319a	; 0x319a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e9 18 	jmp	0x31d2	; 0x31d2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 cd 18 	jmp	0x319a	; 0x319a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e9 18 	jmp	0x31d2	; 0x31d2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d1 18 	jmp	0x31a2	; 0x31a2 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ed 18 	jmp	0x31da	; 0x31da <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     ca6:	eb e2       	ldi	r30, 0x2B	; 43
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	82 e0       	ldi	r24, 0x02	; 2
     cac:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
     cae:	ea e2       	ldi	r30, 0x2A	; 42
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	88 e1       	ldi	r24, 0x18	; 24
     cb4:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
     cb6:	e0 e4       	ldi	r30, 0x40	; 64
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	86 e8       	ldi	r24, 0x86	; 134
     cbc:	80 83       	st	Z, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
     cbe:	e0 e4       	ldi	r30, 0x40	; 64
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
     cc4:	e9 e2       	ldi	r30, 0x29	; 41
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	8f ec       	ldi	r24, 0xCF	; 207
     cca:	80 83       	st	Z, r24
}
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	0f 92       	push	r0
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     cde:	eb e2       	ldi	r30, 0x2B	; 43
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	88 2f       	mov	r24, r24
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	80 72       	andi	r24, 0x20	; 32
     cea:	90 70       	andi	r25, 0x00	; 0
     cec:	00 97       	sbiw	r24, 0x00	; 0
     cee:	b9 f3       	breq	.-18     	; 0xcde <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = data;
     cf0:	ec e2       	ldi	r30, 0x2C	; 44
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
     cf8:	0f 90       	pop	r0
     cfa:	cf 91       	pop	r28
     cfc:	df 91       	pop	r29
     cfe:	08 95       	ret

00000d00 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
     d00:	df 93       	push	r29
     d02:	cf 93       	push	r28
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     d08:	eb e2       	ldi	r30, 0x2B	; 43
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	88 23       	and	r24, r24
     d10:	dc f7       	brge	.-10     	; 0xd08 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
    return UDR;
     d12:	ec e2       	ldi	r30, 0x2C	; 44
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
}
     d18:	cf 91       	pop	r28
     d1a:	df 91       	pop	r29
     d1c:	08 95       	ret

00000d1e <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
     d1e:	df 93       	push	r29
     d20:	cf 93       	push	r28
     d22:	00 d0       	rcall	.+0      	; 0xd24 <UART_sendString+0x6>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	9b 83       	std	Y+3, r25	; 0x03
     d2c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     d2e:	19 82       	std	Y+1, r1	; 0x01
     d30:	0e c0       	rjmp	.+28     	; 0xd4e <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	9b 81       	ldd	r25, Y+3	; 0x03
     d3c:	fc 01       	movw	r30, r24
     d3e:	e2 0f       	add	r30, r18
     d40:	f3 1f       	adc	r31, r19
     d42:	80 81       	ld	r24, Z
     d44:	0e 94 69 06 	call	0xcd2	; 0xcd2 <UART_sendByte>
		i++;
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	8f 5f       	subi	r24, 0xFF	; 255
     d4c:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	8a 81       	ldd	r24, Y+2	; 0x02
     d56:	9b 81       	ldd	r25, Y+3	; 0x03
     d58:	fc 01       	movw	r30, r24
     d5a:	e2 0f       	add	r30, r18
     d5c:	f3 1f       	adc	r31, r19
     d5e:	80 81       	ld	r24, Z
     d60:	88 23       	and	r24, r24
     d62:	39 f7       	brne	.-50     	; 0xd32 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
     d70:	0f 93       	push	r16
     d72:	1f 93       	push	r17
     d74:	df 93       	push	r29
     d76:	cf 93       	push	r28
     d78:	00 d0       	rcall	.+0      	; 0xd7a <UART_receiveString+0xa>
     d7a:	0f 92       	push	r0
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
     d80:	9b 83       	std	Y+3, r25	; 0x03
     d82:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     d84:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	9b 81       	ldd	r25, Y+3	; 0x03
     d90:	8c 01       	movw	r16, r24
     d92:	02 0f       	add	r16, r18
     d94:	13 1f       	adc	r17, r19
     d96:	0e 94 80 06 	call	0xd00	; 0xd00 <UART_recieveByte>
     d9a:	f8 01       	movw	r30, r16
     d9c:	80 83       	st	Z, r24
     d9e:	0f c0       	rjmp	.+30     	; 0xdbe <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	8f 5f       	subi	r24, 0xFF	; 255
     da4:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	8a 81       	ldd	r24, Y+2	; 0x02
     dae:	9b 81       	ldd	r25, Y+3	; 0x03
     db0:	8c 01       	movw	r16, r24
     db2:	02 0f       	add	r16, r18
     db4:	13 1f       	adc	r17, r19
     db6:	0e 94 80 06 	call	0xd00	; 0xd00 <UART_recieveByte>
     dba:	f8 01       	movw	r30, r16
     dbc:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	9b 81       	ldd	r25, Y+3	; 0x03
     dc8:	fc 01       	movw	r30, r24
     dca:	e2 0f       	add	r30, r18
     dcc:	f3 1f       	adc	r31, r19
     dce:	80 81       	ld	r24, Z
     dd0:	83 32       	cpi	r24, 0x23	; 35
     dd2:	31 f7       	brne	.-52     	; 0xda0 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	28 2f       	mov	r18, r24
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	8a 81       	ldd	r24, Y+2	; 0x02
     ddc:	9b 81       	ldd	r25, Y+3	; 0x03
     dde:	fc 01       	movw	r30, r24
     de0:	e2 0f       	add	r30, r18
     de2:	f3 1f       	adc	r31, r19
     de4:	10 82       	st	Z, r1
}
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	0f 90       	pop	r0
     dec:	cf 91       	pop	r28
     dee:	df 91       	pop	r29
     df0:	1f 91       	pop	r17
     df2:	0f 91       	pop	r16
     df4:	08 95       	ret

00000df6 <timer0_init>:
#include"../../Bit_Math.h"
#include"../../STD_Types.h"
void (*p2f_T0_OVF)(void);
void (*p2f_T0_OCF)(void);

void timer0_init(){
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = TIMER0_INIT_VALUE;
     dfe:	e2 e5       	ldi	r30, 0x52	; 82
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	10 82       	st	Z, r1

#if INT0_OV_INTERRUPT_MODE == ENABLED
	SET_BIT(TIMSK,TOIE0);
     e04:	a9 e5       	ldi	r26, 0x59	; 89
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e9 e5       	ldi	r30, 0x59	; 89
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	81 60       	ori	r24, 0x01	; 1
     e10:	8c 93       	st	X, r24
#endif

#if INT0_OC_INTERRUPT_MODE == ENABLED
	SET_BIT(TIMSK,OCIE0);
#else
	CLR_BIT(TIMSK,OCIE0);
     e12:	a9 e5       	ldi	r26, 0x59	; 89
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e9 e5       	ldi	r30, 0x59	; 89
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	8d 7f       	andi	r24, 0xFD	; 253
     e1e:	8c 93       	st	X, r24
#endif

	/* Select Timer0 Mode */
#if TIMER0_MODE_SELECT == TIMER0_NORMAL_MODE
	CLR_BIT(TCCR0,WGM00);
     e20:	a3 e5       	ldi	r26, 0x53	; 83
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e3 e5       	ldi	r30, 0x53	; 83
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	8f 7b       	andi	r24, 0xBF	; 191
     e2c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,WGM01);
     e2e:	a3 e5       	ldi	r26, 0x53	; 83
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e3 e5       	ldi	r30, 0x53	; 83
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	87 7f       	andi	r24, 0xF7	; 247
     e3a:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
#endif

	/* Select Compare output Mode */
#if TIMER0_COMPARE_OUTPUT_SELECT == COMPARE_OUTPUT_DISCONNECTED
	CLR_BIT(TCCR0,COM00);
     e3c:	a3 e5       	ldi	r26, 0x53	; 83
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e3 e5       	ldi	r30, 0x53	; 83
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	8f 7e       	andi	r24, 0xEF	; 239
     e48:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,COM01);
     e4a:	a3 e5       	ldi	r26, 0x53	; 83
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e3 e5       	ldi	r30, 0x53	; 83
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	8f 7d       	andi	r24, 0xDF	; 223
     e56:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM00);
	SET_BIT(TCCR0,COM01);
#endif


	SET_BIT(TCCR0,0);
     e58:	a3 e5       	ldi	r26, 0x53	; 83
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e3 e5       	ldi	r30, 0x53	; 83
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	81 60       	ori	r24, 0x01	; 1
     e64:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,1);
     e66:	a3 e5       	ldi	r26, 0x53	; 83
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e3 e5       	ldi	r30, 0x53	; 83
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	8d 7f       	andi	r24, 0xFD	; 253
     e72:	8c 93       	st	X, r24
	SET_BIT(TCCR0,2);
     e74:	a3 e5       	ldi	r26, 0x53	; 83
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e3 e5       	ldi	r30, 0x53	; 83
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	84 60       	ori	r24, 0x04	; 4
     e80:	8c 93       	st	X, r24
//		CLR_BIT(TCCR0,1);
//		SET_BIT(TCCR0,2);
//	}


}
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	08 95       	ret

00000e88 <setCallback_T0_TOV>:

void setCallback_T0_TOV(void(*p2f)()){
     e88:	df 93       	push	r29
     e8a:	cf 93       	push	r28
     e8c:	00 d0       	rcall	.+0      	; 0xe8e <setCallback_T0_TOV+0x6>
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
     e92:	9a 83       	std	Y+2, r25	; 0x02
     e94:	89 83       	std	Y+1, r24	; 0x01
	p2f_T0_OVF = p2f;
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	9a 81       	ldd	r25, Y+2	; 0x02
     e9a:	90 93 d0 00 	sts	0x00D0, r25
     e9e:	80 93 cf 00 	sts	0x00CF, r24
}
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	cf 91       	pop	r28
     ea8:	df 91       	pop	r29
     eaa:	08 95       	ret

00000eac <setCallback_T0_OCF>:

void setCallback_T0_OCF(void(*p2f)()){
     eac:	df 93       	push	r29
     eae:	cf 93       	push	r28
     eb0:	00 d0       	rcall	.+0      	; 0xeb2 <setCallback_T0_OCF+0x6>
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	9a 83       	std	Y+2, r25	; 0x02
     eb8:	89 83       	std	Y+1, r24	; 0x01
	p2f_T0_OCF = p2f;
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	9a 81       	ldd	r25, Y+2	; 0x02
     ebe:	90 93 d2 00 	sts	0x00D2, r25
     ec2:	80 93 d1 00 	sts	0x00D1, r24
}
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	cf 91       	pop	r28
     ecc:	df 91       	pop	r29
     ece:	08 95       	ret

00000ed0 <stub1>:
void (*ovfCallback)(void);
void (*cmCallback)(void);


void stub1(void)
{
     ed0:	df 93       	push	r29
     ed2:	cf 93       	push	r28
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62

}
     ed8:	cf 91       	pop	r28
     eda:	df 91       	pop	r29
     edc:	08 95       	ret

00000ede <stub2>:

void stub2(void)
{
     ede:	df 93       	push	r29
     ee0:	cf 93       	push	r28
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62

}
     ee6:	cf 91       	pop	r28
     ee8:	df 91       	pop	r29
     eea:	08 95       	ret

00000eec <__vector_11>:


ISR(TIMER0_OVF_vect){
     eec:	1f 92       	push	r1
     eee:	0f 92       	push	r0
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	0f 92       	push	r0
     ef4:	11 24       	eor	r1, r1
     ef6:	2f 93       	push	r18
     ef8:	3f 93       	push	r19
     efa:	4f 93       	push	r20
     efc:	5f 93       	push	r21
     efe:	6f 93       	push	r22
     f00:	7f 93       	push	r23
     f02:	8f 93       	push	r24
     f04:	9f 93       	push	r25
     f06:	af 93       	push	r26
     f08:	bf 93       	push	r27
     f0a:	ef 93       	push	r30
     f0c:	ff 93       	push	r31
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
	ovfCallback();
     f16:	e0 91 d5 00 	lds	r30, 0x00D5
     f1a:	f0 91 d6 00 	lds	r31, 0x00D6
     f1e:	09 95       	icall
}
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	ff 91       	pop	r31
     f26:	ef 91       	pop	r30
     f28:	bf 91       	pop	r27
     f2a:	af 91       	pop	r26
     f2c:	9f 91       	pop	r25
     f2e:	8f 91       	pop	r24
     f30:	7f 91       	pop	r23
     f32:	6f 91       	pop	r22
     f34:	5f 91       	pop	r21
     f36:	4f 91       	pop	r20
     f38:	3f 91       	pop	r19
     f3a:	2f 91       	pop	r18
     f3c:	0f 90       	pop	r0
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	0f 90       	pop	r0
     f42:	1f 90       	pop	r1
     f44:	18 95       	reti

00000f46 <__vector_10>:


ISR(TIMER0_COMP_vect){
     f46:	1f 92       	push	r1
     f48:	0f 92       	push	r0
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	0f 92       	push	r0
     f4e:	11 24       	eor	r1, r1
     f50:	2f 93       	push	r18
     f52:	3f 93       	push	r19
     f54:	4f 93       	push	r20
     f56:	5f 93       	push	r21
     f58:	6f 93       	push	r22
     f5a:	7f 93       	push	r23
     f5c:	8f 93       	push	r24
     f5e:	9f 93       	push	r25
     f60:	af 93       	push	r26
     f62:	bf 93       	push	r27
     f64:	ef 93       	push	r30
     f66:	ff 93       	push	r31
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
	cmCallback();
     f70:	e0 91 d3 00 	lds	r30, 0x00D3
     f74:	f0 91 d4 00 	lds	r31, 0x00D4
     f78:	09 95       	icall
}
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	ff 91       	pop	r31
     f80:	ef 91       	pop	r30
     f82:	bf 91       	pop	r27
     f84:	af 91       	pop	r26
     f86:	9f 91       	pop	r25
     f88:	8f 91       	pop	r24
     f8a:	7f 91       	pop	r23
     f8c:	6f 91       	pop	r22
     f8e:	5f 91       	pop	r21
     f90:	4f 91       	pop	r20
     f92:	3f 91       	pop	r19
     f94:	2f 91       	pop	r18
     f96:	0f 90       	pop	r0
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	0f 90       	pop	r0
     f9c:	1f 90       	pop	r1
     f9e:	18 95       	reti

00000fa0 <TIM0_init>:


void TIM0_init(void)
{
     fa0:	df 93       	push	r29
     fa2:	cf 93       	push	r28
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
	ovfCallback = stub1;
     fa8:	88 e6       	ldi	r24, 0x68	; 104
     faa:	97 e0       	ldi	r25, 0x07	; 7
     fac:	90 93 d6 00 	sts	0x00D6, r25
     fb0:	80 93 d5 00 	sts	0x00D5, r24
	cmCallback = stub2;
     fb4:	8f e6       	ldi	r24, 0x6F	; 111
     fb6:	97 e0       	ldi	r25, 0x07	; 7
     fb8:	90 93 d4 00 	sts	0x00D4, r25
     fbc:	80 93 d3 00 	sts	0x00D3, r24

	TCNT0 = TIM0_TCNT0_INIT;
     fc0:	e2 e5       	ldi	r30, 0x52	; 82
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	10 82       	st	Z, r1
	OCR0 = TIM0_OCR0_INIT;
     fc6:	ec e5       	ldi	r30, 0x5C	; 92
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	8c e7       	ldi	r24, 0x7C	; 124
     fcc:	80 83       	st	Z, r24


	if(TIM0_MODE_SELECT == TIM0_NORMAL_MODE)
	{
		CLR_BIT(TCCR0,3);
     fce:	a3 e5       	ldi	r26, 0x53	; 83
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e3 e5       	ldi	r30, 0x53	; 83
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	87 7f       	andi	r24, 0xF7	; 247
     fda:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,6);
     fdc:	a3 e5       	ldi	r26, 0x53	; 83
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e3 e5       	ldi	r30, 0x53	; 83
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	8f 7b       	andi	r24, 0xBF	; 191
     fe8:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,1);
		SET_BIT(TCCR0,2);
	}
	else if(TIM0_PRESCALER_SELECT == TIM0_1024_PRESCALER_SELECT)
	{
		SET_BIT(TCCR0,0);
     fea:	a3 e5       	ldi	r26, 0x53	; 83
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e3 e5       	ldi	r30, 0x53	; 83
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	81 60       	ori	r24, 0x01	; 1
     ff6:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,1);
     ff8:	a3 e5       	ldi	r26, 0x53	; 83
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e3 e5       	ldi	r30, 0x53	; 83
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	8d 7f       	andi	r24, 0xFD	; 253
    1004:	8c 93       	st	X, r24
		SET_BIT(TCCR0,2);
    1006:	a3 e5       	ldi	r26, 0x53	; 83
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e3 e5       	ldi	r30, 0x53	; 83
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	84 60       	ori	r24, 0x04	; 4
    1012:	8c 93       	st	X, r24



	if(TIM0_COMPARE_MATCH_MODE_SELECT == TIM0_COMPARE_MATCH_NORMAL_MODE)
	{
		CLR_BIT(TCCR0,4);
    1014:	a3 e5       	ldi	r26, 0x53	; 83
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e3 e5       	ldi	r30, 0x53	; 83
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	8f 7e       	andi	r24, 0xEF	; 239
    1020:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,5);
    1022:	a3 e5       	ldi	r26, 0x53	; 83
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e3 e5       	ldi	r30, 0x53	; 83
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	8f 7d       	andi	r24, 0xDF	; 223
    102e:	8c 93       	st	X, r24
		SET_BIT(TCCR0,4);
		SET_BIT(TCCR0,5);
	}

	if(TIM0_COMPARE_MATCH_INT_MODE == ENABLED){
		SET_BIT(TIMSK,0);
    1030:	a9 e5       	ldi	r26, 0x59	; 89
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e9 e5       	ldi	r30, 0x59	; 89
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	81 60       	ori	r24, 0x01	; 1
    103c:	8c 93       	st	X, r24
	}else{
		CLR_BIT(TIMSK,0);
	}
}
    103e:	cf 91       	pop	r28
    1040:	df 91       	pop	r29
    1042:	08 95       	ret

00001044 <TIM0_overFlowIntState>:

void TIM0_overFlowIntState(unsigned char state)
{
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	0f 92       	push	r0
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	89 83       	std	Y+1, r24	; 0x01
	if(state == TIM0_OVF_INT_ENABLE)
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	81 30       	cpi	r24, 0x01	; 1
    1054:	41 f4       	brne	.+16     	; 0x1066 <TIM0_overFlowIntState+0x22>
	{
		SET_BIT(TIMSK,0);
    1056:	a9 e5       	ldi	r26, 0x59	; 89
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e9 e5       	ldi	r30, 0x59	; 89
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	81 60       	ori	r24, 0x01	; 1
    1062:	8c 93       	st	X, r24
    1064:	0a c0       	rjmp	.+20     	; 0x107a <TIM0_overFlowIntState+0x36>
	}
	else if(state == TIM0_OVF_INT_DISABLE)
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	88 23       	and	r24, r24
    106a:	39 f4       	brne	.+14     	; 0x107a <TIM0_overFlowIntState+0x36>
	{
		CLR_BIT(TIMSK,0);
    106c:	a9 e5       	ldi	r26, 0x59	; 89
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e9 e5       	ldi	r30, 0x59	; 89
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	8e 7f       	andi	r24, 0xFE	; 254
    1078:	8c 93       	st	X, r24
	}
}
    107a:	0f 90       	pop	r0
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	08 95       	ret

00001082 <TIM0_compareMatchIntState>:

void TIM0_compareMatchIntState(unsigned char state)
{
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	0f 92       	push	r0
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	89 83       	std	Y+1, r24	; 0x01
	if(state == TIM0_CM_INT_ENABLE)
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	81 30       	cpi	r24, 0x01	; 1
    1092:	41 f4       	brne	.+16     	; 0x10a4 <TIM0_compareMatchIntState+0x22>
	{
		SET_BIT(TIMSK,1);
    1094:	a9 e5       	ldi	r26, 0x59	; 89
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e9 e5       	ldi	r30, 0x59	; 89
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	82 60       	ori	r24, 0x02	; 2
    10a0:	8c 93       	st	X, r24
    10a2:	0a c0       	rjmp	.+20     	; 0x10b8 <TIM0_compareMatchIntState+0x36>
	}
	else if(state == TIM0_CM_INT_DISABLE)
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	88 23       	and	r24, r24
    10a8:	39 f4       	brne	.+14     	; 0x10b8 <TIM0_compareMatchIntState+0x36>
	{
		CLR_BIT(TIMSK,1);
    10aa:	a9 e5       	ldi	r26, 0x59	; 89
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e9 e5       	ldi	r30, 0x59	; 89
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	8d 7f       	andi	r24, 0xFD	; 253
    10b6:	8c 93       	st	X, r24
	}
}
    10b8:	0f 90       	pop	r0
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <TIM0_setTCNT0>:

void TIM0_setTCNT0(unsigned char value)
{
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	0f 92       	push	r0
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = value;
    10cc:	e2 e5       	ldi	r30, 0x52	; 82
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	80 83       	st	Z, r24
}
    10d4:	0f 90       	pop	r0
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	08 95       	ret

000010dc <TIM0_setOCRO>:

void TIM0_setOCRO(unsigned char value)
{
    10dc:	df 93       	push	r29
    10de:	cf 93       	push	r28
    10e0:	0f 92       	push	r0
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = value;
    10e8:	ec e5       	ldi	r30, 0x5C	; 92
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	80 83       	st	Z, r24
}
    10f0:	0f 90       	pop	r0
    10f2:	cf 91       	pop	r28
    10f4:	df 91       	pop	r29
    10f6:	08 95       	ret

000010f8 <TIM0_forceOutputCompare>:

void TIM0_forceOutputCompare(unsigned char state)
{
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	0f 92       	push	r0
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
    1102:	89 83       	std	Y+1, r24	; 0x01
	if(state == TIM0_CMO_ENABLE)
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	81 30       	cpi	r24, 0x01	; 1
    1108:	41 f4       	brne	.+16     	; 0x111a <TIM0_forceOutputCompare+0x22>
	{
		SET_BIT(TCCR0,7);
    110a:	a3 e5       	ldi	r26, 0x53	; 83
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e3 e5       	ldi	r30, 0x53	; 83
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	80 68       	ori	r24, 0x80	; 128
    1116:	8c 93       	st	X, r24
    1118:	0a c0       	rjmp	.+20     	; 0x112e <TIM0_forceOutputCompare+0x36>
	}
	else if(state == TIM0_CMO_DISABLE)
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	88 23       	and	r24, r24
    111e:	39 f4       	brne	.+14     	; 0x112e <TIM0_forceOutputCompare+0x36>
	{
		CLR_BIT(TCCR0,7);
    1120:	a3 e5       	ldi	r26, 0x53	; 83
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e3 e5       	ldi	r30, 0x53	; 83
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	8f 77       	andi	r24, 0x7F	; 127
    112c:	8c 93       	st	X, r24
	}

}
    112e:	0f 90       	pop	r0
    1130:	cf 91       	pop	r28
    1132:	df 91       	pop	r29
    1134:	08 95       	ret

00001136 <TIM0_setOvfIntCallback>:

void TIM0_setOvfIntCallback(void (*callbackPtr)(void))
{
    1136:	df 93       	push	r29
    1138:	cf 93       	push	r28
    113a:	00 d0       	rcall	.+0      	; 0x113c <TIM0_setOvfIntCallback+0x6>
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
    1140:	9a 83       	std	Y+2, r25	; 0x02
    1142:	89 83       	std	Y+1, r24	; 0x01
	ovfCallback = callbackPtr;
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	9a 81       	ldd	r25, Y+2	; 0x02
    1148:	90 93 d6 00 	sts	0x00D6, r25
    114c:	80 93 d5 00 	sts	0x00D5, r24
}
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	08 95       	ret

0000115a <TIM0_setCmIntCallback>:

void TIM0_setCmIntCallback(void (*callbackPtr)(void))
{
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	00 d0       	rcall	.+0      	; 0x1160 <TIM0_setCmIntCallback+0x6>
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	9a 83       	std	Y+2, r25	; 0x02
    1166:	89 83       	std	Y+1, r24	; 0x01
	cmCallback = callbackPtr;
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	9a 81       	ldd	r25, Y+2	; 0x02
    116c:	90 93 d4 00 	sts	0x00D4, r25
    1170:	80 93 d3 00 	sts	0x00D3, r24
}
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	08 95       	ret

0000117e <SPI_initMaster>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void SPI_initMaster(void)
{
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
	 * MOSI(PB5) --> Output
	 * MISO(PB6) --> Input
	 * SCK(PB7) --> Output
	 ********************************************/

	SPCR = (1<<SPE) | (1<<MSTR); // enable SPI + enable Master + choose SPI clock = Fosc/4
    1186:	ed e2       	ldi	r30, 0x2D	; 45
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 e5       	ldi	r24, 0x50	; 80
    118c:	80 83       	st	Z, r24
}
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	08 95       	ret

00001194 <SPI_initSlave>:

void SPI_initSlave(void)
{
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
	 * MOSI(PB5) --> Input
	 * MISO(PB6) --> Output
	 * SCK(PB7) --> Input
	 ********************************************/

	SPCR = (1<<SPE); // just enable SPI + choose SPI clock = Fosc/4
    119c:	ed e2       	ldi	r30, 0x2D	; 45
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 e4       	ldi	r24, 0x40	; 64
    11a2:	80 83       	st	Z, r24
}
    11a4:	cf 91       	pop	r28
    11a6:	df 91       	pop	r29
    11a8:	08 95       	ret

000011aa <SPI_sendByte>:
void SPI_sendByte(const uint8 data)
{
    11aa:	df 93       	push	r29
    11ac:	cf 93       	push	r28
    11ae:	0f 92       	push	r0
    11b0:	cd b7       	in	r28, 0x3d	; 61
    11b2:	de b7       	in	r29, 0x3e	; 62
    11b4:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data; //send data by SPI
    11b6:	ef e2       	ldi	r30, 0x2F	; 47
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	80 83       	st	Z, r24

	while(BIT_IS_CLEAR(SPSR,SPIF)){} //wait until SPI interrupt flag=1 (data is sent correctly)
    11be:	ee e2       	ldi	r30, 0x2E	; 46
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	88 23       	and	r24, r24
    11c6:	dc f7       	brge	.-10     	; 0x11be <SPI_sendByte+0x14>
}
    11c8:	0f 90       	pop	r0
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <SPI_SendString>:


void SPI_SendString(const uint8 *Str)
{
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <SPI_SendString+0x6>
    11d6:	0f 92       	push	r0
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	9b 83       	std	Y+3, r25	; 0x03
    11de:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    11e0:	19 82       	std	Y+1, r1	; 0x01
    11e2:	0e c0       	rjmp	.+28     	; 0x1200 <SPI_SendString+0x30>
	while(Str[i] != '\0')
	{
		SPI_sendByte(Str[i]);
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	9b 81       	ldd	r25, Y+3	; 0x03
    11ee:	fc 01       	movw	r30, r24
    11f0:	e2 0f       	add	r30, r18
    11f2:	f3 1f       	adc	r31, r19
    11f4:	80 81       	ld	r24, Z
    11f6:	0e 94 d5 08 	call	0x11aa	; 0x11aa <SPI_sendByte>
		i++;
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	8f 5f       	subi	r24, 0xFF	; 255
    11fe:	89 83       	std	Y+1, r24	; 0x01


void SPI_SendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	9b 81       	ldd	r25, Y+3	; 0x03
    120a:	fc 01       	movw	r30, r24
    120c:	e2 0f       	add	r30, r18
    120e:	f3 1f       	adc	r31, r19
    1210:	80 81       	ld	r24, Z
    1212:	88 23       	and	r24, r24
    1214:	39 f7       	brne	.-50     	; 0x11e4 <SPI_SendString+0x14>
	{
		SPI_sendByte(Str[i]);
		i++;
	}
}
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	08 95       	ret

00001222 <SPI_recieveByte>:

uint8 SPI_recieveByte(void)
{
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
	 while(BIT_IS_CLEAR(SPSR,SPIF)){} //wait until SPI interrupt flag=1(data is receive correctly)
    122a:	ee e2       	ldi	r30, 0x2E	; 46
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	88 23       	and	r24, r24
    1232:	dc f7       	brge	.-10     	; 0x122a <SPI_recieveByte+0x8>
   return SPDR; //return the received byte from SPI data register
    1234:	ef e2       	ldi	r30, 0x2F	; 47
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
}
    123a:	cf 91       	pop	r28
    123c:	df 91       	pop	r29
    123e:	08 95       	ret

00001240 <SPI_ReceiveString>:

void SPI_ReceiveString(char *Str)
{
    1240:	0f 93       	push	r16
    1242:	1f 93       	push	r17
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	00 d0       	rcall	.+0      	; 0x124a <SPI_ReceiveString+0xa>
    124a:	0f 92       	push	r0
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	9b 83       	std	Y+3, r25	; 0x03
    1252:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char i = 0;
    1254:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = SPI_recieveByte();
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	9b 81       	ldd	r25, Y+3	; 0x03
    1260:	8c 01       	movw	r16, r24
    1262:	02 0f       	add	r16, r18
    1264:	13 1f       	adc	r17, r19
    1266:	0e 94 11 09 	call	0x1222	; 0x1222 <SPI_recieveByte>
    126a:	f8 01       	movw	r30, r16
    126c:	80 83       	st	Z, r24
    126e:	0f c0       	rjmp	.+30     	; 0x128e <SPI_ReceiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    1270:	89 81       	ldd	r24, Y+1	; 0x01
    1272:	8f 5f       	subi	r24, 0xFF	; 255
    1274:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = SPI_recieveByte();
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	9b 81       	ldd	r25, Y+3	; 0x03
    1280:	8c 01       	movw	r16, r24
    1282:	02 0f       	add	r16, r18
    1284:	13 1f       	adc	r17, r19
    1286:	0e 94 11 09 	call	0x1222	; 0x1222 <SPI_recieveByte>
    128a:	f8 01       	movw	r30, r16
    128c:	80 83       	st	Z, r24

void SPI_ReceiveString(char *Str)
{
	unsigned char i = 0;
	Str[i] = SPI_recieveByte();
	while(Str[i] != '#')
    128e:	89 81       	ldd	r24, Y+1	; 0x01
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	9b 81       	ldd	r25, Y+3	; 0x03
    1298:	fc 01       	movw	r30, r24
    129a:	e2 0f       	add	r30, r18
    129c:	f3 1f       	adc	r31, r19
    129e:	80 81       	ld	r24, Z
    12a0:	83 32       	cpi	r24, 0x23	; 35
    12a2:	31 f7       	brne	.-52     	; 0x1270 <SPI_ReceiveString+0x30>
	{
		i++;
		Str[i] = SPI_recieveByte();
	}
	Str[i] = '\0';
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	9b 81       	ldd	r25, Y+3	; 0x03
    12ae:	fc 01       	movw	r30, r24
    12b0:	e2 0f       	add	r30, r18
    12b2:	f3 1f       	adc	r31, r19
    12b4:	10 82       	st	Z, r1
}
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	cf 91       	pop	r28
    12be:	df 91       	pop	r29
    12c0:	1f 91       	pop	r17
    12c2:	0f 91       	pop	r16
    12c4:	08 95       	ret

000012c6 <Led_Handler>:
#include"../../STD_Types.h"
#include"../LED/led.h"


void Led_Handler(uint8 Led )
{
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <Led_Handler+0x6>
    12cc:	0f 92       	push	r0
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	89 83       	std	Y+1, r24	; 0x01
	switch(Led)
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	3b 83       	std	Y+3, r19	; 0x03
    12dc:	2a 83       	std	Y+2, r18	; 0x02
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	9b 81       	ldd	r25, Y+3	; 0x03
    12e2:	81 30       	cpi	r24, 0x01	; 1
    12e4:	91 05       	cpc	r25, r1
    12e6:	71 f0       	breq	.+28     	; 0x1304 <Led_Handler+0x3e>
    12e8:	2a 81       	ldd	r18, Y+2	; 0x02
    12ea:	3b 81       	ldd	r19, Y+3	; 0x03
    12ec:	22 30       	cpi	r18, 0x02	; 2
    12ee:	31 05       	cpc	r19, r1
    12f0:	71 f0       	breq	.+28     	; 0x130e <Led_Handler+0x48>
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	9b 81       	ldd	r25, Y+3	; 0x03
    12f6:	00 97       	sbiw	r24, 0x00	; 0
    12f8:	71 f4       	brne	.+28     	; 0x1316 <Led_Handler+0x50>
	{
		case 0:
			Dio_write(Led0,High);
    12fa:	82 e1       	ldi	r24, 0x12	; 18
    12fc:	61 e0       	ldi	r22, 0x01	; 1
    12fe:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
    1302:	09 c0       	rjmp	.+18     	; 0x1316 <Led_Handler+0x50>
		break;

		case 1:
			Dio_write(Led1,High);
    1304:	87 e1       	ldi	r24, 0x17	; 23
    1306:	61 e0       	ldi	r22, 0x01	; 1
    1308:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
    130c:	04 c0       	rjmp	.+8      	; 0x1316 <Led_Handler+0x50>
		break;

		case 2:
			Dio_write(Led2,High);
    130e:	8b e1       	ldi	r24, 0x1B	; 27
    1310:	61 e0       	ldi	r22, 0x01	; 1
    1312:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
		break;

		default:
		break;
	}
}
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	cf 91       	pop	r28
    131e:	df 91       	pop	r29
    1320:	08 95       	ret

00001322 <Led1_Toggle>:


void Led1_Toggle(void)
{
    1322:	df 93       	push	r29
    1324:	cf 93       	push	r28
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
	static uint8 F_State1=0;
	if (1==F_State1)
    132a:	80 91 c8 00 	lds	r24, 0x00C8
    132e:	81 30       	cpi	r24, 0x01	; 1
    1330:	39 f4       	brne	.+14     	; 0x1340 <Led1_Toggle+0x1e>
	{
		Dio_write(Led0,High);
    1332:	82 e1       	ldi	r24, 0x12	; 18
    1334:	61 e0       	ldi	r22, 0x01	; 1
    1336:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
		F_State1=0;
    133a:	10 92 c8 00 	sts	0x00C8, r1
    133e:	07 c0       	rjmp	.+14     	; 0x134e <Led1_Toggle+0x2c>
	}
	else
	{
		Dio_write(Led0,Low);
    1340:	82 e1       	ldi	r24, 0x12	; 18
    1342:	60 e0       	ldi	r22, 0x00	; 0
    1344:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
		F_State1=1;
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	80 93 c8 00 	sts	0x00C8, r24
	}
}
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	08 95       	ret

00001354 <Led2_Toggle>:

void Led2_Toggle(void)
{
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
	static uint8 F_State2=0;
	if (1==F_State2)
    135c:	80 91 c9 00 	lds	r24, 0x00C9
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	39 f4       	brne	.+14     	; 0x1372 <Led2_Toggle+0x1e>
	{
		Dio_write(Led1,High);
    1364:	87 e1       	ldi	r24, 0x17	; 23
    1366:	61 e0       	ldi	r22, 0x01	; 1
    1368:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
		F_State2=0;
    136c:	10 92 c9 00 	sts	0x00C9, r1
    1370:	07 c0       	rjmp	.+14     	; 0x1380 <Led2_Toggle+0x2c>
	}
	else
	{
		Dio_write(Led1,Low);
    1372:	87 e1       	ldi	r24, 0x17	; 23
    1374:	60 e0       	ldi	r22, 0x00	; 0
    1376:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
		F_State2=1;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	80 93 c9 00 	sts	0x00C9, r24
	}
}
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <Led3_Toggle>:



void Led3_Toggle(void)
{
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
	static uint8 F_State3=0;
	if (1==F_State3)
    138e:	80 91 ca 00 	lds	r24, 0x00CA
    1392:	81 30       	cpi	r24, 0x01	; 1
    1394:	39 f4       	brne	.+14     	; 0x13a4 <Led3_Toggle+0x1e>
	{
		Dio_write(Led2,High);
    1396:	8b e1       	ldi	r24, 0x1B	; 27
    1398:	61 e0       	ldi	r22, 0x01	; 1
    139a:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
		F_State3=0;
    139e:	10 92 ca 00 	sts	0x00CA, r1
    13a2:	07 c0       	rjmp	.+14     	; 0x13b2 <Led3_Toggle+0x2c>
	}
	else
	{
		Dio_write(Led2,Low);
    13a4:	8b e1       	ldi	r24, 0x1B	; 27
    13a6:	60 e0       	ldi	r22, 0x00	; 0
    13a8:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
		F_State3=1;
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	80 93 ca 00 	sts	0x00CA, r24
	}
}
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	08 95       	ret

000013b8 <init_interrupt>:

void (*p2f0)(void);
void (*p2f1)(void);
void (*p2f2)(void);

void init_interrupt() {
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
#if EXTI_INT0 == ENABLED
	GICR |=(1<<INT0); //Enable INT0
    13c0:	ab e5       	ldi	r26, 0x5B	; 91
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	eb e5       	ldi	r30, 0x5B	; 91
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	80 64       	ori	r24, 0x40	; 64
    13cc:	8c 93       	st	X, r24

#if EXTI_INT0_EDGE == Low_Level
	MCUCR &= ~(1 << ISC01);
	MCUCR &= ~(1 << ISC00);
#elif EXTI_INT0_EDGE == Both_Edges
	MCUCR &=~(1<<ISC01);
    13ce:	a5 e5       	ldi	r26, 0x55	; 85
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	e5 e5       	ldi	r30, 0x55	; 85
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	8d 7f       	andi	r24, 0xFD	; 253
    13da:	8c 93       	st	X, r24
	MCUCR |=(1<<ISC00);
    13dc:	a5 e5       	ldi	r26, 0x55	; 85
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e5 e5       	ldi	r30, 0x55	; 85
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	81 60       	ori	r24, 0x01	; 1
    13e8:	8c 93       	st	X, r24
		} else if (EXTI_INT1_EDGE == Raising_Edge) {
			MCUCSR |= (1 << ISC2);
		}
	}

	SREG |= (1 << 7);
    13ea:	af e5       	ldi	r26, 0x5F	; 95
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	ef e5       	ldi	r30, 0x5F	; 95
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	80 68       	ori	r24, 0x80	; 128
    13f6:	8c 93       	st	X, r24
}
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	08 95       	ret

000013fe <Set_CallBack_INT0>:

void Set_CallBack_INT0(void (*p2func)(void)){
    13fe:	df 93       	push	r29
    1400:	cf 93       	push	r28
    1402:	00 d0       	rcall	.+0      	; 0x1404 <Set_CallBack_INT0+0x6>
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
    1408:	9a 83       	std	Y+2, r25	; 0x02
    140a:	89 83       	std	Y+1, r24	; 0x01
	p2f0 = p2func;
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	9a 81       	ldd	r25, Y+2	; 0x02
    1410:	90 93 d8 00 	sts	0x00D8, r25
    1414:	80 93 d7 00 	sts	0x00D7, r24
}
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	08 95       	ret

00001422 <Set_CallBack_INT1>:

void Set_CallBack_INT1(void (*p2func)(void)){
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	00 d0       	rcall	.+0      	; 0x1428 <Set_CallBack_INT1+0x6>
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	9a 83       	std	Y+2, r25	; 0x02
    142e:	89 83       	std	Y+1, r24	; 0x01
	p2f1 = p2func;
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	9a 81       	ldd	r25, Y+2	; 0x02
    1434:	90 93 da 00 	sts	0x00DA, r25
    1438:	80 93 d9 00 	sts	0x00D9, r24
}
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <Set_CallBack_INT2>:

void Set_CallBack_INT2(void (*p2func)(void)){
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	00 d0       	rcall	.+0      	; 0x144c <Set_CallBack_INT2+0x6>
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	9a 83       	std	Y+2, r25	; 0x02
    1452:	89 83       	std	Y+1, r24	; 0x01
	p2f2 = p2func;
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	9a 81       	ldd	r25, Y+2	; 0x02
    1458:	90 93 dc 00 	sts	0x00DC, r25
    145c:	80 93 db 00 	sts	0x00DB, r24
}
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <__vector_1>:

ISR(INT0_vect){
    146a:	1f 92       	push	r1
    146c:	0f 92       	push	r0
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	0f 92       	push	r0
    1472:	11 24       	eor	r1, r1
    1474:	2f 93       	push	r18
    1476:	3f 93       	push	r19
    1478:	4f 93       	push	r20
    147a:	5f 93       	push	r21
    147c:	6f 93       	push	r22
    147e:	7f 93       	push	r23
    1480:	8f 93       	push	r24
    1482:	9f 93       	push	r25
    1484:	af 93       	push	r26
    1486:	bf 93       	push	r27
    1488:	ef 93       	push	r30
    148a:	ff 93       	push	r31
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
	p2f0();
    1494:	e0 91 d7 00 	lds	r30, 0x00D7
    1498:	f0 91 d8 00 	lds	r31, 0x00D8
    149c:	09 95       	icall
}
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	ff 91       	pop	r31
    14a4:	ef 91       	pop	r30
    14a6:	bf 91       	pop	r27
    14a8:	af 91       	pop	r26
    14aa:	9f 91       	pop	r25
    14ac:	8f 91       	pop	r24
    14ae:	7f 91       	pop	r23
    14b0:	6f 91       	pop	r22
    14b2:	5f 91       	pop	r21
    14b4:	4f 91       	pop	r20
    14b6:	3f 91       	pop	r19
    14b8:	2f 91       	pop	r18
    14ba:	0f 90       	pop	r0
    14bc:	0f be       	out	0x3f, r0	; 63
    14be:	0f 90       	pop	r0
    14c0:	1f 90       	pop	r1
    14c2:	18 95       	reti

000014c4 <__vector_2>:

ISR(INT1_vect){
    14c4:	1f 92       	push	r1
    14c6:	0f 92       	push	r0
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	0f 92       	push	r0
    14cc:	11 24       	eor	r1, r1
    14ce:	2f 93       	push	r18
    14d0:	3f 93       	push	r19
    14d2:	4f 93       	push	r20
    14d4:	5f 93       	push	r21
    14d6:	6f 93       	push	r22
    14d8:	7f 93       	push	r23
    14da:	8f 93       	push	r24
    14dc:	9f 93       	push	r25
    14de:	af 93       	push	r26
    14e0:	bf 93       	push	r27
    14e2:	ef 93       	push	r30
    14e4:	ff 93       	push	r31
    14e6:	df 93       	push	r29
    14e8:	cf 93       	push	r28
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62
	p2f1();
    14ee:	e0 91 d9 00 	lds	r30, 0x00D9
    14f2:	f0 91 da 00 	lds	r31, 0x00DA
    14f6:	09 95       	icall
}
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	ff 91       	pop	r31
    14fe:	ef 91       	pop	r30
    1500:	bf 91       	pop	r27
    1502:	af 91       	pop	r26
    1504:	9f 91       	pop	r25
    1506:	8f 91       	pop	r24
    1508:	7f 91       	pop	r23
    150a:	6f 91       	pop	r22
    150c:	5f 91       	pop	r21
    150e:	4f 91       	pop	r20
    1510:	3f 91       	pop	r19
    1512:	2f 91       	pop	r18
    1514:	0f 90       	pop	r0
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	0f 90       	pop	r0
    151a:	1f 90       	pop	r1
    151c:	18 95       	reti

0000151e <__vector_3>:

ISR(INT2_vect){
    151e:	1f 92       	push	r1
    1520:	0f 92       	push	r0
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	0f 92       	push	r0
    1526:	11 24       	eor	r1, r1
    1528:	2f 93       	push	r18
    152a:	3f 93       	push	r19
    152c:	4f 93       	push	r20
    152e:	5f 93       	push	r21
    1530:	6f 93       	push	r22
    1532:	7f 93       	push	r23
    1534:	8f 93       	push	r24
    1536:	9f 93       	push	r25
    1538:	af 93       	push	r26
    153a:	bf 93       	push	r27
    153c:	ef 93       	push	r30
    153e:	ff 93       	push	r31
    1540:	df 93       	push	r29
    1542:	cf 93       	push	r28
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
	p2f2();
    1548:	e0 91 db 00 	lds	r30, 0x00DB
    154c:	f0 91 dc 00 	lds	r31, 0x00DC
    1550:	09 95       	icall
}
    1552:	cf 91       	pop	r28
    1554:	df 91       	pop	r29
    1556:	ff 91       	pop	r31
    1558:	ef 91       	pop	r30
    155a:	bf 91       	pop	r27
    155c:	af 91       	pop	r26
    155e:	9f 91       	pop	r25
    1560:	8f 91       	pop	r24
    1562:	7f 91       	pop	r23
    1564:	6f 91       	pop	r22
    1566:	5f 91       	pop	r21
    1568:	4f 91       	pop	r20
    156a:	3f 91       	pop	r19
    156c:	2f 91       	pop	r18
    156e:	0f 90       	pop	r0
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	0f 90       	pop	r0
    1574:	1f 90       	pop	r1
    1576:	18 95       	reti

00001578 <Dio_read>:
 */
#include "../Dio/Dio.h"



DIO_Level Dio_read(Channel_Type channel) {
    1578:	df 93       	push	r29
    157a:	cf 93       	push	r28
    157c:	00 d0       	rcall	.+0      	; 0x157e <Dio_read+0x6>
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
    1582:	89 83       	std	Y+1, r24	; 0x01

}
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	cf 91       	pop	r28
    158a:	df 91       	pop	r29
    158c:	08 95       	ret

0000158e <Dio_write>:


void Dio_write(Channel_Type channel, DIO_Level level) {
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	00 d0       	rcall	.+0      	; 0x1594 <Dio_write+0x6>
    1594:	00 d0       	rcall	.+0      	; 0x1596 <Dio_write+0x8>
    1596:	00 d0       	rcall	.+0      	; 0x1598 <Dio_write+0xa>
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	8b 83       	std	Y+3, r24	; 0x03
    159e:	6c 83       	std	Y+4, r22	; 0x04
	DIO_Port port = channel / 8;
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	86 95       	lsr	r24
    15a4:	86 95       	lsr	r24
    15a6:	86 95       	lsr	r24
    15a8:	8a 83       	std	Y+2, r24	; 0x02
	DIO_Pin pin = channel % 8;
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	87 70       	andi	r24, 0x07	; 7
    15ae:	89 83       	std	Y+1, r24	; 0x01

	switch (port) {
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	3e 83       	std	Y+6, r19	; 0x06
    15b8:	2d 83       	std	Y+5, r18	; 0x05
    15ba:	8d 81       	ldd	r24, Y+5	; 0x05
    15bc:	9e 81       	ldd	r25, Y+6	; 0x06
    15be:	81 30       	cpi	r24, 0x01	; 1
    15c0:	91 05       	cpc	r25, r1
    15c2:	09 f4       	brne	.+2      	; 0x15c6 <Dio_write+0x38>
    15c4:	43 c0       	rjmp	.+134    	; 0x164c <Dio_write+0xbe>
    15c6:	2d 81       	ldd	r18, Y+5	; 0x05
    15c8:	3e 81       	ldd	r19, Y+6	; 0x06
    15ca:	22 30       	cpi	r18, 0x02	; 2
    15cc:	31 05       	cpc	r19, r1
    15ce:	2c f4       	brge	.+10     	; 0x15da <Dio_write+0x4c>
    15d0:	8d 81       	ldd	r24, Y+5	; 0x05
    15d2:	9e 81       	ldd	r25, Y+6	; 0x06
    15d4:	00 97       	sbiw	r24, 0x00	; 0
    15d6:	71 f0       	breq	.+28     	; 0x15f4 <Dio_write+0x66>
    15d8:	bc c0       	rjmp	.+376    	; 0x1752 <Dio_write+0x1c4>
    15da:	2d 81       	ldd	r18, Y+5	; 0x05
    15dc:	3e 81       	ldd	r19, Y+6	; 0x06
    15de:	22 30       	cpi	r18, 0x02	; 2
    15e0:	31 05       	cpc	r19, r1
    15e2:	09 f4       	brne	.+2      	; 0x15e6 <Dio_write+0x58>
    15e4:	5f c0       	rjmp	.+190    	; 0x16a4 <Dio_write+0x116>
    15e6:	8d 81       	ldd	r24, Y+5	; 0x05
    15e8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ea:	83 30       	cpi	r24, 0x03	; 3
    15ec:	91 05       	cpc	r25, r1
    15ee:	09 f4       	brne	.+2      	; 0x15f2 <Dio_write+0x64>
    15f0:	85 c0       	rjmp	.+266    	; 0x16fc <Dio_write+0x16e>
    15f2:	af c0       	rjmp	.+350    	; 0x1752 <Dio_write+0x1c4>
	case DIO_PortA:
		if (level == High) {
    15f4:	8c 81       	ldd	r24, Y+4	; 0x04
    15f6:	81 30       	cpi	r24, 0x01	; 1
    15f8:	a1 f4       	brne	.+40     	; 0x1622 <Dio_write+0x94>
			SET_BIT(PORTA, pin);
    15fa:	ab e3       	ldi	r26, 0x3B	; 59
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	eb e3       	ldi	r30, 0x3B	; 59
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	48 2f       	mov	r20, r24
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	02 2e       	mov	r0, r18
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <Dio_write+0x8a>
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	0a 94       	dec	r0
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <Dio_write+0x86>
    161c:	84 2b       	or	r24, r20
    161e:	8c 93       	st	X, r24
    1620:	98 c0       	rjmp	.+304    	; 0x1752 <Dio_write+0x1c4>
		} else {
			CLR_BIT(PORTA, pin);
    1622:	ab e3       	ldi	r26, 0x3B	; 59
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	eb e3       	ldi	r30, 0x3B	; 59
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	48 2f       	mov	r20, r24
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	02 2e       	mov	r0, r18
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <Dio_write+0xb2>
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	0a 94       	dec	r0
    1642:	e2 f7       	brpl	.-8      	; 0x163c <Dio_write+0xae>
    1644:	80 95       	com	r24
    1646:	84 23       	and	r24, r20
    1648:	8c 93       	st	X, r24
    164a:	83 c0       	rjmp	.+262    	; 0x1752 <Dio_write+0x1c4>
		}
		break;
	case DIO_PortB:
		if (level == High) {
    164c:	8c 81       	ldd	r24, Y+4	; 0x04
    164e:	81 30       	cpi	r24, 0x01	; 1
    1650:	a1 f4       	brne	.+40     	; 0x167a <Dio_write+0xec>
			SET_BIT(PORTB, pin);
    1652:	a8 e3       	ldi	r26, 0x38	; 56
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e8 e3       	ldi	r30, 0x38	; 56
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	48 2f       	mov	r20, r24
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	02 2e       	mov	r0, r18
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <Dio_write+0xe2>
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	0a 94       	dec	r0
    1672:	e2 f7       	brpl	.-8      	; 0x166c <Dio_write+0xde>
    1674:	84 2b       	or	r24, r20
    1676:	8c 93       	st	X, r24
    1678:	6c c0       	rjmp	.+216    	; 0x1752 <Dio_write+0x1c4>
		} else {
			CLR_BIT(PORTB, pin);
    167a:	a8 e3       	ldi	r26, 0x38	; 56
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e8 e3       	ldi	r30, 0x38	; 56
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	48 2f       	mov	r20, r24
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	02 2e       	mov	r0, r18
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <Dio_write+0x10a>
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	0a 94       	dec	r0
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <Dio_write+0x106>
    169c:	80 95       	com	r24
    169e:	84 23       	and	r24, r20
    16a0:	8c 93       	st	X, r24
    16a2:	57 c0       	rjmp	.+174    	; 0x1752 <Dio_write+0x1c4>
		}
		break;
	case DIO_PortC:
		if (level == High) {
    16a4:	8c 81       	ldd	r24, Y+4	; 0x04
    16a6:	81 30       	cpi	r24, 0x01	; 1
    16a8:	a1 f4       	brne	.+40     	; 0x16d2 <Dio_write+0x144>
			SET_BIT(PORTC, pin);
    16aa:	a5 e3       	ldi	r26, 0x35	; 53
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e5 e3       	ldi	r30, 0x35	; 53
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	48 2f       	mov	r20, r24
    16b6:	89 81       	ldd	r24, Y+1	; 0x01
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	02 2e       	mov	r0, r18
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <Dio_write+0x13a>
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	0a 94       	dec	r0
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <Dio_write+0x136>
    16cc:	84 2b       	or	r24, r20
    16ce:	8c 93       	st	X, r24
    16d0:	40 c0       	rjmp	.+128    	; 0x1752 <Dio_write+0x1c4>
		} else {
			CLR_BIT(PORTC, pin);
    16d2:	a5 e3       	ldi	r26, 0x35	; 53
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e5 e3       	ldi	r30, 0x35	; 53
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	48 2f       	mov	r20, r24
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	02 2e       	mov	r0, r18
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <Dio_write+0x162>
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	0a 94       	dec	r0
    16f2:	e2 f7       	brpl	.-8      	; 0x16ec <Dio_write+0x15e>
    16f4:	80 95       	com	r24
    16f6:	84 23       	and	r24, r20
    16f8:	8c 93       	st	X, r24
    16fa:	2b c0       	rjmp	.+86     	; 0x1752 <Dio_write+0x1c4>
		}
		break;
	case DIO_PortD:
		if (level == High) {
    16fc:	8c 81       	ldd	r24, Y+4	; 0x04
    16fe:	81 30       	cpi	r24, 0x01	; 1
    1700:	a1 f4       	brne	.+40     	; 0x172a <Dio_write+0x19c>
			SET_BIT(PORTD, pin);
    1702:	a2 e3       	ldi	r26, 0x32	; 50
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e2 e3       	ldi	r30, 0x32	; 50
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	48 2f       	mov	r20, r24
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	02 2e       	mov	r0, r18
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <Dio_write+0x192>
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	0a 94       	dec	r0
    1722:	e2 f7       	brpl	.-8      	; 0x171c <Dio_write+0x18e>
    1724:	84 2b       	or	r24, r20
    1726:	8c 93       	st	X, r24
    1728:	14 c0       	rjmp	.+40     	; 0x1752 <Dio_write+0x1c4>
		} else {
			CLR_BIT(PORTD, pin);
    172a:	a2 e3       	ldi	r26, 0x32	; 50
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e2 e3       	ldi	r30, 0x32	; 50
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	48 2f       	mov	r20, r24
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	02 2e       	mov	r0, r18
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <Dio_write+0x1ba>
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	0a 94       	dec	r0
    174a:	e2 f7       	brpl	.-8      	; 0x1744 <Dio_write+0x1b6>
    174c:	80 95       	com	r24
    174e:	84 23       	and	r24, r20
    1750:	8c 93       	st	X, r24
		break;
	default:
		break;
	}

}
    1752:	26 96       	adiw	r28, 0x06	; 6
    1754:	0f b6       	in	r0, 0x3f	; 63
    1756:	f8 94       	cli
    1758:	de bf       	out	0x3e, r29	; 62
    175a:	0f be       	out	0x3f, r0	; 63
    175c:	cd bf       	out	0x3d, r28	; 61
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	08 95       	ret

00001764 <Dio_Port_write>:

void Dio_Port_write(DIO_Port port, uint8 data) {
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	00 d0       	rcall	.+0      	; 0x176a <Dio_Port_write+0x6>
    176a:	00 d0       	rcall	.+0      	; 0x176c <Dio_Port_write+0x8>
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
    1770:	89 83       	std	Y+1, r24	; 0x01
    1772:	6a 83       	std	Y+2, r22	; 0x02

	switch (port) {
    1774:	89 81       	ldd	r24, Y+1	; 0x01
    1776:	28 2f       	mov	r18, r24
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	3c 83       	std	Y+4, r19	; 0x04
    177c:	2b 83       	std	Y+3, r18	; 0x03
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	9c 81       	ldd	r25, Y+4	; 0x04
    1782:	81 30       	cpi	r24, 0x01	; 1
    1784:	91 05       	cpc	r25, r1
    1786:	d1 f0       	breq	.+52     	; 0x17bc <Dio_Port_write+0x58>
    1788:	2b 81       	ldd	r18, Y+3	; 0x03
    178a:	3c 81       	ldd	r19, Y+4	; 0x04
    178c:	22 30       	cpi	r18, 0x02	; 2
    178e:	31 05       	cpc	r19, r1
    1790:	2c f4       	brge	.+10     	; 0x179c <Dio_Port_write+0x38>
    1792:	8b 81       	ldd	r24, Y+3	; 0x03
    1794:	9c 81       	ldd	r25, Y+4	; 0x04
    1796:	00 97       	sbiw	r24, 0x00	; 0
    1798:	61 f0       	breq	.+24     	; 0x17b2 <Dio_Port_write+0x4e>
    179a:	1e c0       	rjmp	.+60     	; 0x17d8 <Dio_Port_write+0x74>
    179c:	2b 81       	ldd	r18, Y+3	; 0x03
    179e:	3c 81       	ldd	r19, Y+4	; 0x04
    17a0:	22 30       	cpi	r18, 0x02	; 2
    17a2:	31 05       	cpc	r19, r1
    17a4:	81 f0       	breq	.+32     	; 0x17c6 <Dio_Port_write+0x62>
    17a6:	8b 81       	ldd	r24, Y+3	; 0x03
    17a8:	9c 81       	ldd	r25, Y+4	; 0x04
    17aa:	83 30       	cpi	r24, 0x03	; 3
    17ac:	91 05       	cpc	r25, r1
    17ae:	81 f0       	breq	.+32     	; 0x17d0 <Dio_Port_write+0x6c>
    17b0:	13 c0       	rjmp	.+38     	; 0x17d8 <Dio_Port_write+0x74>
	case DIO_PortA:
		PORTA = data;
    17b2:	eb e3       	ldi	r30, 0x3B	; 59
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	80 83       	st	Z, r24
    17ba:	0e c0       	rjmp	.+28     	; 0x17d8 <Dio_Port_write+0x74>
		break;
	case DIO_PortB:
		PORTB = data;
    17bc:	e8 e3       	ldi	r30, 0x38	; 56
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	80 83       	st	Z, r24
    17c4:	09 c0       	rjmp	.+18     	; 0x17d8 <Dio_Port_write+0x74>
		break;
	case DIO_PortC:
		PORTC = data;
    17c6:	e5 e3       	ldi	r30, 0x35	; 53
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	80 83       	st	Z, r24
    17ce:	04 c0       	rjmp	.+8      	; 0x17d8 <Dio_Port_write+0x74>
		break;
	case DIO_PortD:
		PORTD = data;
    17d0:	e2 e3       	ldi	r30, 0x32	; 50
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
}
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	0f 90       	pop	r0
    17de:	0f 90       	pop	r0
    17e0:	cf 91       	pop	r28
    17e2:	df 91       	pop	r29
    17e4:	08 95       	ret

000017e6 <Dio_init>:
		{DIO_PortD, DIO_Pin3, Output, Low},
		{DIO_PortD, DIO_Pin4, Output, Low},
		{DIO_PortD, DIO_Pin5, Output, Low}
};

void Dio_init(void){
    17e6:	df 93       	push	r29
    17e8:	cf 93       	push	r28
    17ea:	00 d0       	rcall	.+0      	; 0x17ec <Dio_init+0x6>
    17ec:	00 d0       	rcall	.+0      	; 0x17ee <Dio_init+0x8>
    17ee:	cd b7       	in	r28, 0x3d	; 61
    17f0:	de b7       	in	r29, 0x3e	; 62
	int count = sizeof(Pin_Cfgs)/ sizeof(Pin_Cfgs[0]);
    17f2:	88 e1       	ldi	r24, 0x18	; 24
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	9c 83       	std	Y+4, r25	; 0x04
    17f8:	8b 83       	std	Y+3, r24	; 0x03
	int i = 0;
    17fa:	1a 82       	std	Y+2, r1	; 0x02
    17fc:	19 82       	std	Y+1, r1	; 0x01
	for(i = 0; i < count ; i++){
    17fe:	1a 82       	std	Y+2, r1	; 0x02
    1800:	19 82       	std	Y+1, r1	; 0x01
    1802:	57 c1       	rjmp	.+686    	; 0x1ab2 <Dio_init+0x2cc>
		if(Pin_Cfgs[i].PinPort == DIO_PortA){ //DDRA
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	9a 81       	ldd	r25, Y+2	; 0x02
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	fc 01       	movw	r30, r24
    1812:	e8 59       	subi	r30, 0x98	; 152
    1814:	ff 4f       	sbci	r31, 0xFF	; 255
    1816:	80 81       	ld	r24, Z
    1818:	88 23       	and	r24, r24
    181a:	09 f0       	breq	.+2      	; 0x181e <Dio_init+0x38>
    181c:	48 c0       	rjmp	.+144    	; 0x18ae <Dio_init+0xc8>
			if(Pin_Cfgs[i].PinDir == Output){
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	9a 81       	ldd	r25, Y+2	; 0x02
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	01 96       	adiw	r24, 0x01	; 1
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	fc 01       	movw	r30, r24
    182e:	e8 59       	subi	r30, 0x98	; 152
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	80 81       	ld	r24, Z
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	e9 f4       	brne	.+58     	; 0x1872 <Dio_init+0x8c>
				SET_BIT(DDRA,Pin_Cfgs[i].Pin);
    1838:	aa e3       	ldi	r26, 0x3A	; 58
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	ea e3       	ldi	r30, 0x3A	; 58
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	48 2f       	mov	r20, r24
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	9a 81       	ldd	r25, Y+2	; 0x02
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	88 0f       	add	r24, r24
    184e:	99 1f       	adc	r25, r25
    1850:	fc 01       	movw	r30, r24
    1852:	e7 59       	subi	r30, 0x97	; 151
    1854:	ff 4f       	sbci	r31, 0xFF	; 255
    1856:	80 81       	ld	r24, Z
    1858:	28 2f       	mov	r18, r24
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	02 2e       	mov	r0, r18
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <Dio_init+0x82>
    1864:	88 0f       	add	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	0a 94       	dec	r0
    186a:	e2 f7       	brpl	.-8      	; 0x1864 <Dio_init+0x7e>
    186c:	84 2b       	or	r24, r20
    186e:	8c 93       	st	X, r24
    1870:	1b c1       	rjmp	.+566    	; 0x1aa8 <Dio_init+0x2c2>
			}
			else{
				CLR_BIT(DDRA,Pin_Cfgs[i].Pin);
    1872:	aa e3       	ldi	r26, 0x3A	; 58
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	ea e3       	ldi	r30, 0x3A	; 58
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	48 2f       	mov	r20, r24
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	9a 81       	ldd	r25, Y+2	; 0x02
    1882:	88 0f       	add	r24, r24
    1884:	99 1f       	adc	r25, r25
    1886:	88 0f       	add	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	fc 01       	movw	r30, r24
    188c:	e7 59       	subi	r30, 0x97	; 151
    188e:	ff 4f       	sbci	r31, 0xFF	; 255
    1890:	80 81       	ld	r24, Z
    1892:	28 2f       	mov	r18, r24
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	02 2e       	mov	r0, r18
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <Dio_init+0xbc>
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	0a 94       	dec	r0
    18a4:	e2 f7       	brpl	.-8      	; 0x189e <Dio_init+0xb8>
    18a6:	80 95       	com	r24
    18a8:	84 23       	and	r24, r20
    18aa:	8c 93       	st	X, r24
    18ac:	fd c0       	rjmp	.+506    	; 0x1aa8 <Dio_init+0x2c2>
			}
		}
		else if(Pin_Cfgs[i].PinPort == DIO_PortB){ //DDRB
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	9a 81       	ldd	r25, Y+2	; 0x02
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	88 0f       	add	r24, r24
    18b8:	99 1f       	adc	r25, r25
    18ba:	fc 01       	movw	r30, r24
    18bc:	e8 59       	subi	r30, 0x98	; 152
    18be:	ff 4f       	sbci	r31, 0xFF	; 255
    18c0:	80 81       	ld	r24, Z
    18c2:	81 30       	cpi	r24, 0x01	; 1
    18c4:	09 f0       	breq	.+2      	; 0x18c8 <Dio_init+0xe2>
    18c6:	48 c0       	rjmp	.+144    	; 0x1958 <Dio_init+0x172>
			if(Pin_Cfgs[i].PinDir == Output){
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
    18ca:	9a 81       	ldd	r25, Y+2	; 0x02
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	01 96       	adiw	r24, 0x01	; 1
    18d2:	88 0f       	add	r24, r24
    18d4:	99 1f       	adc	r25, r25
    18d6:	fc 01       	movw	r30, r24
    18d8:	e8 59       	subi	r30, 0x98	; 152
    18da:	ff 4f       	sbci	r31, 0xFF	; 255
    18dc:	80 81       	ld	r24, Z
    18de:	81 30       	cpi	r24, 0x01	; 1
    18e0:	e9 f4       	brne	.+58     	; 0x191c <Dio_init+0x136>
				SET_BIT(DDRB,Pin_Cfgs[i].Pin);
    18e2:	a7 e3       	ldi	r26, 0x37	; 55
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e7 e3       	ldi	r30, 0x37	; 55
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	48 2f       	mov	r20, r24
    18ee:	89 81       	ldd	r24, Y+1	; 0x01
    18f0:	9a 81       	ldd	r25, Y+2	; 0x02
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	88 0f       	add	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	fc 01       	movw	r30, r24
    18fc:	e7 59       	subi	r30, 0x97	; 151
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	80 81       	ld	r24, Z
    1902:	28 2f       	mov	r18, r24
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	02 2e       	mov	r0, r18
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <Dio_init+0x12c>
    190e:	88 0f       	add	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	0a 94       	dec	r0
    1914:	e2 f7       	brpl	.-8      	; 0x190e <Dio_init+0x128>
    1916:	84 2b       	or	r24, r20
    1918:	8c 93       	st	X, r24
    191a:	c6 c0       	rjmp	.+396    	; 0x1aa8 <Dio_init+0x2c2>
			}
			else{
				CLR_BIT(DDRB,Pin_Cfgs[i].Pin);
    191c:	a7 e3       	ldi	r26, 0x37	; 55
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	e7 e3       	ldi	r30, 0x37	; 55
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	48 2f       	mov	r20, r24
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	9a 81       	ldd	r25, Y+2	; 0x02
    192c:	88 0f       	add	r24, r24
    192e:	99 1f       	adc	r25, r25
    1930:	88 0f       	add	r24, r24
    1932:	99 1f       	adc	r25, r25
    1934:	fc 01       	movw	r30, r24
    1936:	e7 59       	subi	r30, 0x97	; 151
    1938:	ff 4f       	sbci	r31, 0xFF	; 255
    193a:	80 81       	ld	r24, Z
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	02 2e       	mov	r0, r18
    1946:	02 c0       	rjmp	.+4      	; 0x194c <Dio_init+0x166>
    1948:	88 0f       	add	r24, r24
    194a:	99 1f       	adc	r25, r25
    194c:	0a 94       	dec	r0
    194e:	e2 f7       	brpl	.-8      	; 0x1948 <Dio_init+0x162>
    1950:	80 95       	com	r24
    1952:	84 23       	and	r24, r20
    1954:	8c 93       	st	X, r24
    1956:	a8 c0       	rjmp	.+336    	; 0x1aa8 <Dio_init+0x2c2>
			}
		}
		else if(Pin_Cfgs[i].PinPort == DIO_PortC){ //DDRC
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	9a 81       	ldd	r25, Y+2	; 0x02
    195c:	88 0f       	add	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	88 0f       	add	r24, r24
    1962:	99 1f       	adc	r25, r25
    1964:	fc 01       	movw	r30, r24
    1966:	e8 59       	subi	r30, 0x98	; 152
    1968:	ff 4f       	sbci	r31, 0xFF	; 255
    196a:	80 81       	ld	r24, Z
    196c:	82 30       	cpi	r24, 0x02	; 2
    196e:	09 f0       	breq	.+2      	; 0x1972 <Dio_init+0x18c>
    1970:	48 c0       	rjmp	.+144    	; 0x1a02 <Dio_init+0x21c>
			if(Pin_Cfgs[i].PinDir == Output){
    1972:	89 81       	ldd	r24, Y+1	; 0x01
    1974:	9a 81       	ldd	r25, Y+2	; 0x02
    1976:	88 0f       	add	r24, r24
    1978:	99 1f       	adc	r25, r25
    197a:	01 96       	adiw	r24, 0x01	; 1
    197c:	88 0f       	add	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	fc 01       	movw	r30, r24
    1982:	e8 59       	subi	r30, 0x98	; 152
    1984:	ff 4f       	sbci	r31, 0xFF	; 255
    1986:	80 81       	ld	r24, Z
    1988:	81 30       	cpi	r24, 0x01	; 1
    198a:	e9 f4       	brne	.+58     	; 0x19c6 <Dio_init+0x1e0>
				SET_BIT(DDRC,Pin_Cfgs[i].Pin);
    198c:	a4 e3       	ldi	r26, 0x34	; 52
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e4 e3       	ldi	r30, 0x34	; 52
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	48 2f       	mov	r20, r24
    1998:	89 81       	ldd	r24, Y+1	; 0x01
    199a:	9a 81       	ldd	r25, Y+2	; 0x02
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	88 0f       	add	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	fc 01       	movw	r30, r24
    19a6:	e7 59       	subi	r30, 0x97	; 151
    19a8:	ff 4f       	sbci	r31, 0xFF	; 255
    19aa:	80 81       	ld	r24, Z
    19ac:	28 2f       	mov	r18, r24
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	02 2e       	mov	r0, r18
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <Dio_init+0x1d6>
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	0a 94       	dec	r0
    19be:	e2 f7       	brpl	.-8      	; 0x19b8 <Dio_init+0x1d2>
    19c0:	84 2b       	or	r24, r20
    19c2:	8c 93       	st	X, r24
    19c4:	71 c0       	rjmp	.+226    	; 0x1aa8 <Dio_init+0x2c2>
			}
			else{
				CLR_BIT(DDRC,Pin_Cfgs[i].Pin);
    19c6:	a4 e3       	ldi	r26, 0x34	; 52
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e4 e3       	ldi	r30, 0x34	; 52
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	48 2f       	mov	r20, r24
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	9a 81       	ldd	r25, Y+2	; 0x02
    19d6:	88 0f       	add	r24, r24
    19d8:	99 1f       	adc	r25, r25
    19da:	88 0f       	add	r24, r24
    19dc:	99 1f       	adc	r25, r25
    19de:	fc 01       	movw	r30, r24
    19e0:	e7 59       	subi	r30, 0x97	; 151
    19e2:	ff 4f       	sbci	r31, 0xFF	; 255
    19e4:	80 81       	ld	r24, Z
    19e6:	28 2f       	mov	r18, r24
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	02 2e       	mov	r0, r18
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <Dio_init+0x210>
    19f2:	88 0f       	add	r24, r24
    19f4:	99 1f       	adc	r25, r25
    19f6:	0a 94       	dec	r0
    19f8:	e2 f7       	brpl	.-8      	; 0x19f2 <Dio_init+0x20c>
    19fa:	80 95       	com	r24
    19fc:	84 23       	and	r24, r20
    19fe:	8c 93       	st	X, r24
    1a00:	53 c0       	rjmp	.+166    	; 0x1aa8 <Dio_init+0x2c2>
			}
		}
		else if(Pin_Cfgs[i].PinPort == DIO_PortD){ //DDRD
    1a02:	89 81       	ldd	r24, Y+1	; 0x01
    1a04:	9a 81       	ldd	r25, Y+2	; 0x02
    1a06:	88 0f       	add	r24, r24
    1a08:	99 1f       	adc	r25, r25
    1a0a:	88 0f       	add	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	fc 01       	movw	r30, r24
    1a10:	e8 59       	subi	r30, 0x98	; 152
    1a12:	ff 4f       	sbci	r31, 0xFF	; 255
    1a14:	80 81       	ld	r24, Z
    1a16:	83 30       	cpi	r24, 0x03	; 3
    1a18:	09 f0       	breq	.+2      	; 0x1a1c <Dio_init+0x236>
    1a1a:	46 c0       	rjmp	.+140    	; 0x1aa8 <Dio_init+0x2c2>
			if(Pin_Cfgs[i].PinDir == Output){
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01
    1a1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a20:	88 0f       	add	r24, r24
    1a22:	99 1f       	adc	r25, r25
    1a24:	01 96       	adiw	r24, 0x01	; 1
    1a26:	88 0f       	add	r24, r24
    1a28:	99 1f       	adc	r25, r25
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	e8 59       	subi	r30, 0x98	; 152
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	80 81       	ld	r24, Z
    1a32:	81 30       	cpi	r24, 0x01	; 1
    1a34:	e9 f4       	brne	.+58     	; 0x1a70 <Dio_init+0x28a>
				SET_BIT(DDRD,Pin_Cfgs[i].Pin);
    1a36:	a1 e3       	ldi	r26, 0x31	; 49
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	e1 e3       	ldi	r30, 0x31	; 49
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	48 2f       	mov	r20, r24
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	9a 81       	ldd	r25, Y+2	; 0x02
    1a46:	88 0f       	add	r24, r24
    1a48:	99 1f       	adc	r25, r25
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	fc 01       	movw	r30, r24
    1a50:	e7 59       	subi	r30, 0x97	; 151
    1a52:	ff 4f       	sbci	r31, 0xFF	; 255
    1a54:	80 81       	ld	r24, Z
    1a56:	28 2f       	mov	r18, r24
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	02 2e       	mov	r0, r18
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <Dio_init+0x280>
    1a62:	88 0f       	add	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	0a 94       	dec	r0
    1a68:	e2 f7       	brpl	.-8      	; 0x1a62 <Dio_init+0x27c>
    1a6a:	84 2b       	or	r24, r20
    1a6c:	8c 93       	st	X, r24
    1a6e:	1c c0       	rjmp	.+56     	; 0x1aa8 <Dio_init+0x2c2>
			}
			else{
				CLR_BIT(DDRD,Pin_Cfgs[i].Pin);
    1a70:	a1 e3       	ldi	r26, 0x31	; 49
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	e1 e3       	ldi	r30, 0x31	; 49
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	48 2f       	mov	r20, r24
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a80:	88 0f       	add	r24, r24
    1a82:	99 1f       	adc	r25, r25
    1a84:	88 0f       	add	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	fc 01       	movw	r30, r24
    1a8a:	e7 59       	subi	r30, 0x97	; 151
    1a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8e:	80 81       	ld	r24, Z
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <Dio_init+0x2b8>
    1a9a:	88 0f       	add	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	2a 95       	dec	r18
    1aa0:	e2 f7       	brpl	.-8      	; 0x1a9a <Dio_init+0x2b4>
    1aa2:	80 95       	com	r24
    1aa4:	84 23       	and	r24, r20
    1aa6:	8c 93       	st	X, r24
};

void Dio_init(void){
	int count = sizeof(Pin_Cfgs)/ sizeof(Pin_Cfgs[0]);
	int i = 0;
	for(i = 0; i < count ; i++){
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    1aac:	01 96       	adiw	r24, 0x01	; 1
    1aae:	9a 83       	std	Y+2, r25	; 0x02
    1ab0:	89 83       	std	Y+1, r24	; 0x01
    1ab2:	29 81       	ldd	r18, Y+1	; 0x01
    1ab4:	3a 81       	ldd	r19, Y+2	; 0x02
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aba:	28 17       	cp	r18, r24
    1abc:	39 07       	cpc	r19, r25
    1abe:	0c f4       	brge	.+2      	; 0x1ac2 <Dio_init+0x2dc>
    1ac0:	a1 ce       	rjmp	.-702    	; 0x1804 <Dio_init+0x1e>
			else{
				CLR_BIT(DDRD,Pin_Cfgs[i].Pin);
			}
		}
	}
}
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	cf 91       	pop	r28
    1acc:	df 91       	pop	r29
    1ace:	08 95       	ret

00001ad0 <adc_init>:
 *      Author: Mohamed Abdalla
 */
#include"../ADC/adc.h"
#include"../ADC/adc_cfg.h"

void adc_init(void){
    1ad0:	df 93       	push	r29
    1ad2:	cf 93       	push	r28
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
	// Enable ADC
#if ADC_ENABLE == ENABLE
	SET_BIT(ADCSRA,ADEN);
    1ad8:	a6 e2       	ldi	r26, 0x26	; 38
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e6 e2       	ldi	r30, 0x26	; 38
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	80 68       	ori	r24, 0x80	; 128
    1ae4:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,REFS1);
#elif ADC_SOURCE == ADC_SOURCE_AVCC
	SET_BIT(ADMUX,REFS0);
	CLR_BIT(ADMUX,REFS1);
#elif ADC_SOURCE == ADC_SOURCE_VREF
	SET_BIT(ADMUX,REFS0);
    1ae6:	a7 e2       	ldi	r26, 0x27	; 39
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	e7 e2       	ldi	r30, 0x27	; 39
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	80 64       	ori	r24, 0x40	; 64
    1af2:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS1);
    1af4:	a7 e2       	ldi	r26, 0x27	; 39
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	e7 e2       	ldi	r30, 0x27	; 39
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	80 68       	ori	r24, 0x80	; 128
    1b00:	8c 93       	st	X, r24
	TODO:
	*/
#elif ADC_PRESCALER_MODE == ADC_PRESCALER_128

	// Set Prescaler division factor fclk/128
	SET_BIT(ADCSRA,ADPS0);
    1b02:	a6 e2       	ldi	r26, 0x26	; 38
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	e6 e2       	ldi	r30, 0x26	; 38
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	81 60       	ori	r24, 0x01	; 1
    1b0e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
    1b10:	a6 e2       	ldi	r26, 0x26	; 38
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	e6 e2       	ldi	r30, 0x26	; 38
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	82 60       	ori	r24, 0x02	; 2
    1b1c:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS2);
    1b1e:	a6 e2       	ldi	r26, 0x26	; 38
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	e6 e2       	ldi	r30, 0x26	; 38
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	84 60       	ori	r24, 0x04	; 4
    1b2a:	8c 93       	st	X, r24
#endif
}
    1b2c:	cf 91       	pop	r28
    1b2e:	df 91       	pop	r29
    1b30:	08 95       	ret

00001b32 <adc_read>:

uint16 adc_read(uint8 channel){
    1b32:	df 93       	push	r29
    1b34:	cf 93       	push	r28
    1b36:	0f 92       	push	r0
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
    1b3c:	89 83       	std	Y+1, r24	; 0x01
	ADMUX = (ADMUX & 0b11100000) | channel;
    1b3e:	a7 e2       	ldi	r26, 0x27	; 39
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e7 e2       	ldi	r30, 0x27	; 39
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	98 2f       	mov	r25, r24
    1b4a:	90 7e       	andi	r25, 0xE0	; 224
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
    1b4e:	89 2b       	or	r24, r25
    1b50:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADSC);	//Start conversion
    1b52:	a6 e2       	ldi	r26, 0x26	; 38
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	e6 e2       	ldi	r30, 0x26	; 38
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	80 64       	ori	r24, 0x40	; 64
    1b5e:	8c 93       	st	X, r24
	while(GET_BIT(ADCSRA,ADIF)== 0); // Wait for conversion to finish
    1b60:	e6 e2       	ldi	r30, 0x26	; 38
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	82 95       	swap	r24
    1b68:	8f 70       	andi	r24, 0x0F	; 15
    1b6a:	88 2f       	mov	r24, r24
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	81 70       	andi	r24, 0x01	; 1
    1b70:	90 70       	andi	r25, 0x00	; 0
    1b72:	00 97       	sbiw	r24, 0x00	; 0
    1b74:	a9 f3       	breq	.-22     	; 0x1b60 <adc_read+0x2e>
	SET_BIT(ADCSRA,ADIF);
    1b76:	a6 e2       	ldi	r26, 0x26	; 38
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e6 e2       	ldi	r30, 0x26	; 38
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	80 61       	ori	r24, 0x10	; 16
    1b82:	8c 93       	st	X, r24
	return ADC;
    1b84:	e4 e2       	ldi	r30, 0x24	; 36
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	91 81       	ldd	r25, Z+1	; 0x01
}
    1b8c:	0f 90       	pop	r0
    1b8e:	cf 91       	pop	r28
    1b90:	df 91       	pop	r29
    1b92:	08 95       	ret

00001b94 <lcd_command>:
#include "../../MCAL/Dio/Dio.h"
#include "../../MCAL/Dio/Dio_Types.h"
#include "../../MCAL/Dio/Dio_config.h"


void lcd_command(uint8 cmd){
    1b94:	0f 93       	push	r16
    1b96:	1f 93       	push	r17
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
    1ba0:	c1 56       	subi	r28, 0x61	; 97
    1ba2:	d0 40       	sbci	r29, 0x00	; 0
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	de bf       	out	0x3e, r29	; 62
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	cd bf       	out	0x3d, r28	; 61
    1bae:	fe 01       	movw	r30, r28
    1bb0:	ef 59       	subi	r30, 0x9F	; 159
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	80 83       	st	Z, r24

	Dio_write(RS,Low);
    1bb6:	89 e0       	ldi	r24, 0x09	; 9
    1bb8:	60 e0       	ldi	r22, 0x00	; 0
    1bba:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
	Dio_write(RW,Low);
    1bbe:	8a e0       	ldi	r24, 0x0A	; 10
    1bc0:	60 e0       	ldi	r22, 0x00	; 0
    1bc2:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
	//DIO_Write(lcd_en,low);

	GET_BIT(cmd,7)?Dio_write(D7,High):Dio_write(D7,Low);
    1bc6:	fe 01       	movw	r30, r28
    1bc8:	ef 59       	subi	r30, 0x9F	; 159
    1bca:	ff 4f       	sbci	r31, 0xFF	; 255
    1bcc:	80 81       	ld	r24, Z
    1bce:	88 23       	and	r24, r24
    1bd0:	2c f4       	brge	.+10     	; 0x1bdc <lcd_command+0x48>
    1bd2:	87 e0       	ldi	r24, 0x07	; 7
    1bd4:	61 e0       	ldi	r22, 0x01	; 1
    1bd6:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
    1bda:	04 c0       	rjmp	.+8      	; 0x1be4 <lcd_command+0x50>
    1bdc:	87 e0       	ldi	r24, 0x07	; 7
    1bde:	60 e0       	ldi	r22, 0x00	; 0
    1be0:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
	GET_BIT(cmd,6)?Dio_write(D6,High):Dio_write(D6,Low);
    1be4:	fe 01       	movw	r30, r28
    1be6:	ef 59       	subi	r30, 0x9F	; 159
    1be8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bea:	80 81       	ld	r24, Z
    1bec:	82 95       	swap	r24
    1bee:	86 95       	lsr	r24
    1bf0:	86 95       	lsr	r24
    1bf2:	83 70       	andi	r24, 0x03	; 3
    1bf4:	88 2f       	mov	r24, r24
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	81 70       	andi	r24, 0x01	; 1
    1bfa:	90 70       	andi	r25, 0x00	; 0
    1bfc:	88 23       	and	r24, r24
    1bfe:	29 f0       	breq	.+10     	; 0x1c0a <lcd_command+0x76>
    1c00:	86 e0       	ldi	r24, 0x06	; 6
    1c02:	61 e0       	ldi	r22, 0x01	; 1
    1c04:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
    1c08:	04 c0       	rjmp	.+8      	; 0x1c12 <lcd_command+0x7e>
    1c0a:	86 e0       	ldi	r24, 0x06	; 6
    1c0c:	60 e0       	ldi	r22, 0x00	; 0
    1c0e:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
	GET_BIT(cmd,5)?Dio_write(D5,High):Dio_write(D5,Low);
    1c12:	fe 01       	movw	r30, r28
    1c14:	ef 59       	subi	r30, 0x9F	; 159
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	80 81       	ld	r24, Z
    1c1a:	82 95       	swap	r24
    1c1c:	86 95       	lsr	r24
    1c1e:	87 70       	andi	r24, 0x07	; 7
    1c20:	88 2f       	mov	r24, r24
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	81 70       	andi	r24, 0x01	; 1
    1c26:	90 70       	andi	r25, 0x00	; 0
    1c28:	88 23       	and	r24, r24
    1c2a:	29 f0       	breq	.+10     	; 0x1c36 <lcd_command+0xa2>
    1c2c:	85 e0       	ldi	r24, 0x05	; 5
    1c2e:	61 e0       	ldi	r22, 0x01	; 1
    1c30:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
    1c34:	04 c0       	rjmp	.+8      	; 0x1c3e <lcd_command+0xaa>
    1c36:	85 e0       	ldi	r24, 0x05	; 5
    1c38:	60 e0       	ldi	r22, 0x00	; 0
    1c3a:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
	GET_BIT(cmd,4)?Dio_write(D4,High):Dio_write(D4,Low);
    1c3e:	fe 01       	movw	r30, r28
    1c40:	ef 59       	subi	r30, 0x9F	; 159
    1c42:	ff 4f       	sbci	r31, 0xFF	; 255
    1c44:	80 81       	ld	r24, Z
    1c46:	82 95       	swap	r24
    1c48:	8f 70       	andi	r24, 0x0F	; 15
    1c4a:	88 2f       	mov	r24, r24
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	81 70       	andi	r24, 0x01	; 1
    1c50:	90 70       	andi	r25, 0x00	; 0
    1c52:	88 23       	and	r24, r24
    1c54:	29 f0       	breq	.+10     	; 0x1c60 <lcd_command+0xcc>
    1c56:	84 e0       	ldi	r24, 0x04	; 4
    1c58:	61 e0       	ldi	r22, 0x01	; 1
    1c5a:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
    1c5e:	04 c0       	rjmp	.+8      	; 0x1c68 <lcd_command+0xd4>
    1c60:	84 e0       	ldi	r24, 0x04	; 4
    1c62:	60 e0       	ldi	r22, 0x00	; 0
    1c64:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
	Dio_write(E,High);
    1c68:	8b e0       	ldi	r24, 0x0B	; 11
    1c6a:	61 e0       	ldi	r22, 0x01	; 1
    1c6c:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
    1c70:	fe 01       	movw	r30, r28
    1c72:	e3 5a       	subi	r30, 0xA3	; 163
    1c74:	ff 4f       	sbci	r31, 0xFF	; 255
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	a0 e2       	ldi	r26, 0x20	; 32
    1c7c:	b1 e4       	ldi	r27, 0x41	; 65
    1c7e:	80 83       	st	Z, r24
    1c80:	91 83       	std	Z+1, r25	; 0x01
    1c82:	a2 83       	std	Z+2, r26	; 0x02
    1c84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c86:	8e 01       	movw	r16, r28
    1c88:	07 5a       	subi	r16, 0xA7	; 167
    1c8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c8c:	fe 01       	movw	r30, r28
    1c8e:	e3 5a       	subi	r30, 0xA3	; 163
    1c90:	ff 4f       	sbci	r31, 0xFF	; 255
    1c92:	60 81       	ld	r22, Z
    1c94:	71 81       	ldd	r23, Z+1	; 0x01
    1c96:	82 81       	ldd	r24, Z+2	; 0x02
    1c98:	93 81       	ldd	r25, Z+3	; 0x03
    1c9a:	2b ea       	ldi	r18, 0xAB	; 171
    1c9c:	3a ea       	ldi	r19, 0xAA	; 170
    1c9e:	4a ea       	ldi	r20, 0xAA	; 170
    1ca0:	50 e4       	ldi	r21, 0x40	; 64
    1ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	f8 01       	movw	r30, r16
    1cac:	80 83       	st	Z, r24
    1cae:	91 83       	std	Z+1, r25	; 0x01
    1cb0:	a2 83       	std	Z+2, r26	; 0x02
    1cb2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cb4:	fe 01       	movw	r30, r28
    1cb6:	e7 5a       	subi	r30, 0xA7	; 167
    1cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cba:	60 81       	ld	r22, Z
    1cbc:	71 81       	ldd	r23, Z+1	; 0x01
    1cbe:	82 81       	ldd	r24, Z+2	; 0x02
    1cc0:	93 81       	ldd	r25, Z+3	; 0x03
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	40 e8       	ldi	r20, 0x80	; 128
    1cc8:	5f e3       	ldi	r21, 0x3F	; 63
    1cca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cce:	88 23       	and	r24, r24
    1cd0:	34 f4       	brge	.+12     	; 0x1cde <lcd_command+0x14a>
		__ticks = 1;
    1cd2:	fe 01       	movw	r30, r28
    1cd4:	e8 5a       	subi	r30, 0xA8	; 168
    1cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	80 83       	st	Z, r24
    1cdc:	e0 c0       	rjmp	.+448    	; 0x1e9e <lcd_command+0x30a>
	else if (__tmp > 255)
    1cde:	fe 01       	movw	r30, r28
    1ce0:	e7 5a       	subi	r30, 0xA7	; 167
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	60 81       	ld	r22, Z
    1ce6:	71 81       	ldd	r23, Z+1	; 0x01
    1ce8:	82 81       	ldd	r24, Z+2	; 0x02
    1cea:	93 81       	ldd	r25, Z+3	; 0x03
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	4f e7       	ldi	r20, 0x7F	; 127
    1cf2:	53 e4       	ldi	r21, 0x43	; 67
    1cf4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cf8:	18 16       	cp	r1, r24
    1cfa:	0c f0       	brlt	.+2      	; 0x1cfe <lcd_command+0x16a>
    1cfc:	c0 c0       	rjmp	.+384    	; 0x1e7e <lcd_command+0x2ea>
	{
		_delay_ms(__us / 1000.0);
    1cfe:	fe 01       	movw	r30, r28
    1d00:	e3 5a       	subi	r30, 0xA3	; 163
    1d02:	ff 4f       	sbci	r31, 0xFF	; 255
    1d04:	60 81       	ld	r22, Z
    1d06:	71 81       	ldd	r23, Z+1	; 0x01
    1d08:	82 81       	ldd	r24, Z+2	; 0x02
    1d0a:	93 81       	ldd	r25, Z+3	; 0x03
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	4a e7       	ldi	r20, 0x7A	; 122
    1d12:	54 e4       	ldi	r21, 0x44	; 68
    1d14:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	fe 01       	movw	r30, r28
    1d1e:	ec 5a       	subi	r30, 0xAC	; 172
    1d20:	ff 4f       	sbci	r31, 0xFF	; 255
    1d22:	80 83       	st	Z, r24
    1d24:	91 83       	std	Z+1, r25	; 0x01
    1d26:	a2 83       	std	Z+2, r26	; 0x02
    1d28:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d2a:	8e 01       	movw	r16, r28
    1d2c:	00 5b       	subi	r16, 0xB0	; 176
    1d2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d30:	fe 01       	movw	r30, r28
    1d32:	ec 5a       	subi	r30, 0xAC	; 172
    1d34:	ff 4f       	sbci	r31, 0xFF	; 255
    1d36:	60 81       	ld	r22, Z
    1d38:	71 81       	ldd	r23, Z+1	; 0x01
    1d3a:	82 81       	ldd	r24, Z+2	; 0x02
    1d3c:	93 81       	ldd	r25, Z+3	; 0x03
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	4a e7       	ldi	r20, 0x7A	; 122
    1d44:	55 e4       	ldi	r21, 0x45	; 69
    1d46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	f8 01       	movw	r30, r16
    1d50:	80 83       	st	Z, r24
    1d52:	91 83       	std	Z+1, r25	; 0x01
    1d54:	a2 83       	std	Z+2, r26	; 0x02
    1d56:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d58:	fe 01       	movw	r30, r28
    1d5a:	e0 5b       	subi	r30, 0xB0	; 176
    1d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5e:	60 81       	ld	r22, Z
    1d60:	71 81       	ldd	r23, Z+1	; 0x01
    1d62:	82 81       	ldd	r24, Z+2	; 0x02
    1d64:	93 81       	ldd	r25, Z+3	; 0x03
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	40 e8       	ldi	r20, 0x80	; 128
    1d6c:	5f e3       	ldi	r21, 0x3F	; 63
    1d6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d72:	88 23       	and	r24, r24
    1d74:	44 f4       	brge	.+16     	; 0x1d86 <lcd_command+0x1f2>
		__ticks = 1;
    1d76:	fe 01       	movw	r30, r28
    1d78:	e2 5b       	subi	r30, 0xB2	; 178
    1d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	91 83       	std	Z+1, r25	; 0x01
    1d82:	80 83       	st	Z, r24
    1d84:	64 c0       	rjmp	.+200    	; 0x1e4e <lcd_command+0x2ba>
	else if (__tmp > 65535)
    1d86:	fe 01       	movw	r30, r28
    1d88:	e0 5b       	subi	r30, 0xB0	; 176
    1d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8c:	60 81       	ld	r22, Z
    1d8e:	71 81       	ldd	r23, Z+1	; 0x01
    1d90:	82 81       	ldd	r24, Z+2	; 0x02
    1d92:	93 81       	ldd	r25, Z+3	; 0x03
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	3f ef       	ldi	r19, 0xFF	; 255
    1d98:	4f e7       	ldi	r20, 0x7F	; 127
    1d9a:	57 e4       	ldi	r21, 0x47	; 71
    1d9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1da0:	18 16       	cp	r1, r24
    1da2:	0c f0       	brlt	.+2      	; 0x1da6 <lcd_command+0x212>
    1da4:	43 c0       	rjmp	.+134    	; 0x1e2c <lcd_command+0x298>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da6:	fe 01       	movw	r30, r28
    1da8:	ec 5a       	subi	r30, 0xAC	; 172
    1daa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dac:	60 81       	ld	r22, Z
    1dae:	71 81       	ldd	r23, Z+1	; 0x01
    1db0:	82 81       	ldd	r24, Z+2	; 0x02
    1db2:	93 81       	ldd	r25, Z+3	; 0x03
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 e2       	ldi	r20, 0x20	; 32
    1dba:	51 e4       	ldi	r21, 0x41	; 65
    1dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	8e 01       	movw	r16, r28
    1dc6:	02 5b       	subi	r16, 0xB2	; 178
    1dc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dca:	bc 01       	movw	r22, r24
    1dcc:	cd 01       	movw	r24, r26
    1dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	f8 01       	movw	r30, r16
    1dd8:	91 83       	std	Z+1, r25	; 0x01
    1dda:	80 83       	st	Z, r24
    1ddc:	1f c0       	rjmp	.+62     	; 0x1e1c <lcd_command+0x288>
    1dde:	fe 01       	movw	r30, r28
    1de0:	e4 5b       	subi	r30, 0xB4	; 180
    1de2:	ff 4f       	sbci	r31, 0xFF	; 255
    1de4:	80 e9       	ldi	r24, 0x90	; 144
    1de6:	91 e0       	ldi	r25, 0x01	; 1
    1de8:	91 83       	std	Z+1, r25	; 0x01
    1dea:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dec:	fe 01       	movw	r30, r28
    1dee:	e4 5b       	subi	r30, 0xB4	; 180
    1df0:	ff 4f       	sbci	r31, 0xFF	; 255
    1df2:	80 81       	ld	r24, Z
    1df4:	91 81       	ldd	r25, Z+1	; 0x01
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	f1 f7       	brne	.-4      	; 0x1df6 <lcd_command+0x262>
    1dfa:	fe 01       	movw	r30, r28
    1dfc:	e4 5b       	subi	r30, 0xB4	; 180
    1dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1e00:	91 83       	std	Z+1, r25	; 0x01
    1e02:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e04:	de 01       	movw	r26, r28
    1e06:	a2 5b       	subi	r26, 0xB2	; 178
    1e08:	bf 4f       	sbci	r27, 0xFF	; 255
    1e0a:	fe 01       	movw	r30, r28
    1e0c:	e2 5b       	subi	r30, 0xB2	; 178
    1e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e10:	80 81       	ld	r24, Z
    1e12:	91 81       	ldd	r25, Z+1	; 0x01
    1e14:	01 97       	sbiw	r24, 0x01	; 1
    1e16:	11 96       	adiw	r26, 0x01	; 1
    1e18:	9c 93       	st	X, r25
    1e1a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1c:	fe 01       	movw	r30, r28
    1e1e:	e2 5b       	subi	r30, 0xB2	; 178
    1e20:	ff 4f       	sbci	r31, 0xFF	; 255
    1e22:	80 81       	ld	r24, Z
    1e24:	91 81       	ldd	r25, Z+1	; 0x01
    1e26:	00 97       	sbiw	r24, 0x00	; 0
    1e28:	d1 f6       	brne	.-76     	; 0x1dde <lcd_command+0x24a>
    1e2a:	4b c0       	rjmp	.+150    	; 0x1ec2 <lcd_command+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2c:	8e 01       	movw	r16, r28
    1e2e:	02 5b       	subi	r16, 0xB2	; 178
    1e30:	1f 4f       	sbci	r17, 0xFF	; 255
    1e32:	fe 01       	movw	r30, r28
    1e34:	e0 5b       	subi	r30, 0xB0	; 176
    1e36:	ff 4f       	sbci	r31, 0xFF	; 255
    1e38:	60 81       	ld	r22, Z
    1e3a:	71 81       	ldd	r23, Z+1	; 0x01
    1e3c:	82 81       	ldd	r24, Z+2	; 0x02
    1e3e:	93 81       	ldd	r25, Z+3	; 0x03
    1e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	f8 01       	movw	r30, r16
    1e4a:	91 83       	std	Z+1, r25	; 0x01
    1e4c:	80 83       	st	Z, r24
    1e4e:	de 01       	movw	r26, r28
    1e50:	a6 5b       	subi	r26, 0xB6	; 182
    1e52:	bf 4f       	sbci	r27, 0xFF	; 255
    1e54:	fe 01       	movw	r30, r28
    1e56:	e2 5b       	subi	r30, 0xB2	; 178
    1e58:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5a:	80 81       	ld	r24, Z
    1e5c:	91 81       	ldd	r25, Z+1	; 0x01
    1e5e:	11 96       	adiw	r26, 0x01	; 1
    1e60:	9c 93       	st	X, r25
    1e62:	8e 93       	st	-X, r24
    1e64:	fe 01       	movw	r30, r28
    1e66:	e6 5b       	subi	r30, 0xB6	; 182
    1e68:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6a:	80 81       	ld	r24, Z
    1e6c:	91 81       	ldd	r25, Z+1	; 0x01
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	f1 f7       	brne	.-4      	; 0x1e6e <lcd_command+0x2da>
    1e72:	fe 01       	movw	r30, r28
    1e74:	e6 5b       	subi	r30, 0xB6	; 182
    1e76:	ff 4f       	sbci	r31, 0xFF	; 255
    1e78:	91 83       	std	Z+1, r25	; 0x01
    1e7a:	80 83       	st	Z, r24
    1e7c:	22 c0       	rjmp	.+68     	; 0x1ec2 <lcd_command+0x32e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e7e:	8e 01       	movw	r16, r28
    1e80:	08 5a       	subi	r16, 0xA8	; 168
    1e82:	1f 4f       	sbci	r17, 0xFF	; 255
    1e84:	fe 01       	movw	r30, r28
    1e86:	e7 5a       	subi	r30, 0xA7	; 167
    1e88:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8a:	60 81       	ld	r22, Z
    1e8c:	71 81       	ldd	r23, Z+1	; 0x01
    1e8e:	82 81       	ldd	r24, Z+2	; 0x02
    1e90:	93 81       	ldd	r25, Z+3	; 0x03
    1e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	f8 01       	movw	r30, r16
    1e9c:	80 83       	st	Z, r24
    1e9e:	de 01       	movw	r26, r28
    1ea0:	a7 5b       	subi	r26, 0xB7	; 183
    1ea2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	e8 5a       	subi	r30, 0xA8	; 168
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	80 81       	ld	r24, Z
    1eac:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1eae:	fe 01       	movw	r30, r28
    1eb0:	e7 5b       	subi	r30, 0xB7	; 183
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	80 81       	ld	r24, Z
    1eb6:	8a 95       	dec	r24
    1eb8:	f1 f7       	brne	.-4      	; 0x1eb6 <lcd_command+0x322>
    1eba:	fe 01       	movw	r30, r28
    1ebc:	e7 5b       	subi	r30, 0xB7	; 183
    1ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec0:	80 83       	st	Z, r24
	_delay_us(10);
	Dio_write(E,Low);
    1ec2:	8b e0       	ldi	r24, 0x0B	; 11
    1ec4:	60 e0       	ldi	r22, 0x00	; 0
    1ec6:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
    1eca:	fe 01       	movw	r30, r28
    1ecc:	eb 5b       	subi	r30, 0xBB	; 187
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	a8 e4       	ldi	r26, 0x48	; 72
    1ed6:	b3 e4       	ldi	r27, 0x43	; 67
    1ed8:	80 83       	st	Z, r24
    1eda:	91 83       	std	Z+1, r25	; 0x01
    1edc:	a2 83       	std	Z+2, r26	; 0x02
    1ede:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ee0:	8e 01       	movw	r16, r28
    1ee2:	0f 5b       	subi	r16, 0xBF	; 191
    1ee4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee6:	fe 01       	movw	r30, r28
    1ee8:	eb 5b       	subi	r30, 0xBB	; 187
    1eea:	ff 4f       	sbci	r31, 0xFF	; 255
    1eec:	60 81       	ld	r22, Z
    1eee:	71 81       	ldd	r23, Z+1	; 0x01
    1ef0:	82 81       	ldd	r24, Z+2	; 0x02
    1ef2:	93 81       	ldd	r25, Z+3	; 0x03
    1ef4:	2b ea       	ldi	r18, 0xAB	; 171
    1ef6:	3a ea       	ldi	r19, 0xAA	; 170
    1ef8:	4a ea       	ldi	r20, 0xAA	; 170
    1efa:	50 e4       	ldi	r21, 0x40	; 64
    1efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	f8 01       	movw	r30, r16
    1f06:	80 83       	st	Z, r24
    1f08:	91 83       	std	Z+1, r25	; 0x01
    1f0a:	a2 83       	std	Z+2, r26	; 0x02
    1f0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f0e:	fe 01       	movw	r30, r28
    1f10:	ef 5b       	subi	r30, 0xBF	; 191
    1f12:	ff 4f       	sbci	r31, 0xFF	; 255
    1f14:	60 81       	ld	r22, Z
    1f16:	71 81       	ldd	r23, Z+1	; 0x01
    1f18:	82 81       	ldd	r24, Z+2	; 0x02
    1f1a:	93 81       	ldd	r25, Z+3	; 0x03
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	40 e8       	ldi	r20, 0x80	; 128
    1f22:	5f e3       	ldi	r21, 0x3F	; 63
    1f24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f28:	88 23       	and	r24, r24
    1f2a:	34 f4       	brge	.+12     	; 0x1f38 <lcd_command+0x3a4>
		__ticks = 1;
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	fe 01       	movw	r30, r28
    1f30:	e0 5c       	subi	r30, 0xC0	; 192
    1f32:	ff 4f       	sbci	r31, 0xFF	; 255
    1f34:	80 83       	st	Z, r24
    1f36:	9d c0       	rjmp	.+314    	; 0x2072 <lcd_command+0x4de>
	else if (__tmp > 255)
    1f38:	fe 01       	movw	r30, r28
    1f3a:	ef 5b       	subi	r30, 0xBF	; 191
    1f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3e:	60 81       	ld	r22, Z
    1f40:	71 81       	ldd	r23, Z+1	; 0x01
    1f42:	82 81       	ldd	r24, Z+2	; 0x02
    1f44:	93 81       	ldd	r25, Z+3	; 0x03
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	4f e7       	ldi	r20, 0x7F	; 127
    1f4c:	53 e4       	ldi	r21, 0x43	; 67
    1f4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f52:	18 16       	cp	r1, r24
    1f54:	0c f0       	brlt	.+2      	; 0x1f58 <lcd_command+0x3c4>
    1f56:	7e c0       	rjmp	.+252    	; 0x2054 <lcd_command+0x4c0>
	{
		_delay_ms(__us / 1000.0);
    1f58:	fe 01       	movw	r30, r28
    1f5a:	eb 5b       	subi	r30, 0xBB	; 187
    1f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5e:	60 81       	ld	r22, Z
    1f60:	71 81       	ldd	r23, Z+1	; 0x01
    1f62:	82 81       	ldd	r24, Z+2	; 0x02
    1f64:	93 81       	ldd	r25, Z+3	; 0x03
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	4a e7       	ldi	r20, 0x7A	; 122
    1f6c:	54 e4       	ldi	r21, 0x44	; 68
    1f6e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	8c af       	std	Y+60, r24	; 0x3c
    1f78:	9d af       	std	Y+61, r25	; 0x3d
    1f7a:	ae af       	std	Y+62, r26	; 0x3e
    1f7c:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f7e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f80:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f82:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f84:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	4a e7       	ldi	r20, 0x7A	; 122
    1f8c:	55 e4       	ldi	r21, 0x45	; 69
    1f8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	88 af       	std	Y+56, r24	; 0x38
    1f98:	99 af       	std	Y+57, r25	; 0x39
    1f9a:	aa af       	std	Y+58, r26	; 0x3a
    1f9c:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1f9e:	68 ad       	ldd	r22, Y+56	; 0x38
    1fa0:	79 ad       	ldd	r23, Y+57	; 0x39
    1fa2:	8a ad       	ldd	r24, Y+58	; 0x3a
    1fa4:	9b ad       	ldd	r25, Y+59	; 0x3b
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	40 e8       	ldi	r20, 0x80	; 128
    1fac:	5f e3       	ldi	r21, 0x3F	; 63
    1fae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fb2:	88 23       	and	r24, r24
    1fb4:	2c f4       	brge	.+10     	; 0x1fc0 <lcd_command+0x42c>
		__ticks = 1;
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	9f ab       	std	Y+55, r25	; 0x37
    1fbc:	8e ab       	std	Y+54, r24	; 0x36
    1fbe:	3f c0       	rjmp	.+126    	; 0x203e <lcd_command+0x4aa>
	else if (__tmp > 65535)
    1fc0:	68 ad       	ldd	r22, Y+56	; 0x38
    1fc2:	79 ad       	ldd	r23, Y+57	; 0x39
    1fc4:	8a ad       	ldd	r24, Y+58	; 0x3a
    1fc6:	9b ad       	ldd	r25, Y+59	; 0x3b
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	3f ef       	ldi	r19, 0xFF	; 255
    1fcc:	4f e7       	ldi	r20, 0x7F	; 127
    1fce:	57 e4       	ldi	r21, 0x47	; 71
    1fd0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fd4:	18 16       	cp	r1, r24
    1fd6:	4c f5       	brge	.+82     	; 0x202a <lcd_command+0x496>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd8:	6c ad       	ldd	r22, Y+60	; 0x3c
    1fda:	7d ad       	ldd	r23, Y+61	; 0x3d
    1fdc:	8e ad       	ldd	r24, Y+62	; 0x3e
    1fde:	9f ad       	ldd	r25, Y+63	; 0x3f
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	40 e2       	ldi	r20, 0x20	; 32
    1fe6:	51 e4       	ldi	r21, 0x41	; 65
    1fe8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	bc 01       	movw	r22, r24
    1ff2:	cd 01       	movw	r24, r26
    1ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	9f ab       	std	Y+55, r25	; 0x37
    1ffe:	8e ab       	std	Y+54, r24	; 0x36
    2000:	0f c0       	rjmp	.+30     	; 0x2020 <lcd_command+0x48c>
    2002:	80 e9       	ldi	r24, 0x90	; 144
    2004:	91 e0       	ldi	r25, 0x01	; 1
    2006:	9d ab       	std	Y+53, r25	; 0x35
    2008:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    200a:	8c a9       	ldd	r24, Y+52	; 0x34
    200c:	9d a9       	ldd	r25, Y+53	; 0x35
    200e:	01 97       	sbiw	r24, 0x01	; 1
    2010:	f1 f7       	brne	.-4      	; 0x200e <lcd_command+0x47a>
    2012:	9d ab       	std	Y+53, r25	; 0x35
    2014:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2016:	8e a9       	ldd	r24, Y+54	; 0x36
    2018:	9f a9       	ldd	r25, Y+55	; 0x37
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	9f ab       	std	Y+55, r25	; 0x37
    201e:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2020:	8e a9       	ldd	r24, Y+54	; 0x36
    2022:	9f a9       	ldd	r25, Y+55	; 0x37
    2024:	00 97       	sbiw	r24, 0x00	; 0
    2026:	69 f7       	brne	.-38     	; 0x2002 <lcd_command+0x46e>
    2028:	2d c0       	rjmp	.+90     	; 0x2084 <lcd_command+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    202a:	68 ad       	ldd	r22, Y+56	; 0x38
    202c:	79 ad       	ldd	r23, Y+57	; 0x39
    202e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2030:	9b ad       	ldd	r25, Y+59	; 0x3b
    2032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	9f ab       	std	Y+55, r25	; 0x37
    203c:	8e ab       	std	Y+54, r24	; 0x36
    203e:	8e a9       	ldd	r24, Y+54	; 0x36
    2040:	9f a9       	ldd	r25, Y+55	; 0x37
    2042:	9b ab       	std	Y+51, r25	; 0x33
    2044:	8a ab       	std	Y+50, r24	; 0x32
    2046:	8a a9       	ldd	r24, Y+50	; 0x32
    2048:	9b a9       	ldd	r25, Y+51	; 0x33
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	f1 f7       	brne	.-4      	; 0x204a <lcd_command+0x4b6>
    204e:	9b ab       	std	Y+51, r25	; 0x33
    2050:	8a ab       	std	Y+50, r24	; 0x32
    2052:	18 c0       	rjmp	.+48     	; 0x2084 <lcd_command+0x4f0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2054:	fe 01       	movw	r30, r28
    2056:	ef 5b       	subi	r30, 0xBF	; 191
    2058:	ff 4f       	sbci	r31, 0xFF	; 255
    205a:	60 81       	ld	r22, Z
    205c:	71 81       	ldd	r23, Z+1	; 0x01
    205e:	82 81       	ldd	r24, Z+2	; 0x02
    2060:	93 81       	ldd	r25, Z+3	; 0x03
    2062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	fe 01       	movw	r30, r28
    206c:	e0 5c       	subi	r30, 0xC0	; 192
    206e:	ff 4f       	sbci	r31, 0xFF	; 255
    2070:	80 83       	st	Z, r24
    2072:	fe 01       	movw	r30, r28
    2074:	e0 5c       	subi	r30, 0xC0	; 192
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	80 81       	ld	r24, Z
    207a:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    207c:	89 a9       	ldd	r24, Y+49	; 0x31
    207e:	8a 95       	dec	r24
    2080:	f1 f7       	brne	.-4      	; 0x207e <lcd_command+0x4ea>
    2082:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);

	GET_BIT(cmd,3)?Dio_write(D7,High):Dio_write(D7,Low);
    2084:	fe 01       	movw	r30, r28
    2086:	ef 59       	subi	r30, 0x9F	; 159
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	80 81       	ld	r24, Z
    208c:	86 95       	lsr	r24
    208e:	86 95       	lsr	r24
    2090:	86 95       	lsr	r24
    2092:	88 2f       	mov	r24, r24
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	81 70       	andi	r24, 0x01	; 1
    2098:	90 70       	andi	r25, 0x00	; 0
    209a:	88 23       	and	r24, r24
    209c:	29 f0       	breq	.+10     	; 0x20a8 <lcd_command+0x514>
    209e:	87 e0       	ldi	r24, 0x07	; 7
    20a0:	61 e0       	ldi	r22, 0x01	; 1
    20a2:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
    20a6:	04 c0       	rjmp	.+8      	; 0x20b0 <lcd_command+0x51c>
    20a8:	87 e0       	ldi	r24, 0x07	; 7
    20aa:	60 e0       	ldi	r22, 0x00	; 0
    20ac:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
	GET_BIT(cmd,2)?Dio_write(D6,High):Dio_write(D6,Low);
    20b0:	fe 01       	movw	r30, r28
    20b2:	ef 59       	subi	r30, 0x9F	; 159
    20b4:	ff 4f       	sbci	r31, 0xFF	; 255
    20b6:	80 81       	ld	r24, Z
    20b8:	86 95       	lsr	r24
    20ba:	86 95       	lsr	r24
    20bc:	88 2f       	mov	r24, r24
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	81 70       	andi	r24, 0x01	; 1
    20c2:	90 70       	andi	r25, 0x00	; 0
    20c4:	88 23       	and	r24, r24
    20c6:	29 f0       	breq	.+10     	; 0x20d2 <lcd_command+0x53e>
    20c8:	86 e0       	ldi	r24, 0x06	; 6
    20ca:	61 e0       	ldi	r22, 0x01	; 1
    20cc:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
    20d0:	04 c0       	rjmp	.+8      	; 0x20da <lcd_command+0x546>
    20d2:	86 e0       	ldi	r24, 0x06	; 6
    20d4:	60 e0       	ldi	r22, 0x00	; 0
    20d6:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
	GET_BIT(cmd,1)?Dio_write(D5,High):Dio_write(D5,Low);
    20da:	fe 01       	movw	r30, r28
    20dc:	ef 59       	subi	r30, 0x9F	; 159
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
    20e0:	80 81       	ld	r24, Z
    20e2:	86 95       	lsr	r24
    20e4:	88 2f       	mov	r24, r24
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	81 70       	andi	r24, 0x01	; 1
    20ea:	90 70       	andi	r25, 0x00	; 0
    20ec:	88 23       	and	r24, r24
    20ee:	29 f0       	breq	.+10     	; 0x20fa <lcd_command+0x566>
    20f0:	85 e0       	ldi	r24, 0x05	; 5
    20f2:	61 e0       	ldi	r22, 0x01	; 1
    20f4:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
    20f8:	04 c0       	rjmp	.+8      	; 0x2102 <lcd_command+0x56e>
    20fa:	85 e0       	ldi	r24, 0x05	; 5
    20fc:	60 e0       	ldi	r22, 0x00	; 0
    20fe:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
	GET_BIT(cmd,0)?Dio_write(D4,High):Dio_write(D4,Low);
    2102:	fe 01       	movw	r30, r28
    2104:	ef 59       	subi	r30, 0x9F	; 159
    2106:	ff 4f       	sbci	r31, 0xFF	; 255
    2108:	80 81       	ld	r24, Z
    210a:	88 2f       	mov	r24, r24
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	81 70       	andi	r24, 0x01	; 1
    2110:	90 70       	andi	r25, 0x00	; 0
    2112:	88 23       	and	r24, r24
    2114:	29 f0       	breq	.+10     	; 0x2120 <lcd_command+0x58c>
    2116:	84 e0       	ldi	r24, 0x04	; 4
    2118:	61 e0       	ldi	r22, 0x01	; 1
    211a:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
    211e:	04 c0       	rjmp	.+8      	; 0x2128 <lcd_command+0x594>
    2120:	84 e0       	ldi	r24, 0x04	; 4
    2122:	60 e0       	ldi	r22, 0x00	; 0
    2124:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
	Dio_write(E,High);
    2128:	8b e0       	ldi	r24, 0x0B	; 11
    212a:	61 e0       	ldi	r22, 0x01	; 1
    212c:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
    2130:	80 e0       	ldi	r24, 0x00	; 0
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	a0 e2       	ldi	r26, 0x20	; 32
    2136:	b1 e4       	ldi	r27, 0x41	; 65
    2138:	8d a7       	std	Y+45, r24	; 0x2d
    213a:	9e a7       	std	Y+46, r25	; 0x2e
    213c:	af a7       	std	Y+47, r26	; 0x2f
    213e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2140:	6d a5       	ldd	r22, Y+45	; 0x2d
    2142:	7e a5       	ldd	r23, Y+46	; 0x2e
    2144:	8f a5       	ldd	r24, Y+47	; 0x2f
    2146:	98 a9       	ldd	r25, Y+48	; 0x30
    2148:	2b ea       	ldi	r18, 0xAB	; 171
    214a:	3a ea       	ldi	r19, 0xAA	; 170
    214c:	4a ea       	ldi	r20, 0xAA	; 170
    214e:	50 e4       	ldi	r21, 0x40	; 64
    2150:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	89 a7       	std	Y+41, r24	; 0x29
    215a:	9a a7       	std	Y+42, r25	; 0x2a
    215c:	ab a7       	std	Y+43, r26	; 0x2b
    215e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2160:	69 a5       	ldd	r22, Y+41	; 0x29
    2162:	7a a5       	ldd	r23, Y+42	; 0x2a
    2164:	8b a5       	ldd	r24, Y+43	; 0x2b
    2166:	9c a5       	ldd	r25, Y+44	; 0x2c
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	40 e8       	ldi	r20, 0x80	; 128
    216e:	5f e3       	ldi	r21, 0x3F	; 63
    2170:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2174:	88 23       	and	r24, r24
    2176:	1c f4       	brge	.+6      	; 0x217e <lcd_command+0x5ea>
		__ticks = 1;
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	88 a7       	std	Y+40, r24	; 0x28
    217c:	91 c0       	rjmp	.+290    	; 0x22a0 <lcd_command+0x70c>
	else if (__tmp > 255)
    217e:	69 a5       	ldd	r22, Y+41	; 0x29
    2180:	7a a5       	ldd	r23, Y+42	; 0x2a
    2182:	8b a5       	ldd	r24, Y+43	; 0x2b
    2184:	9c a5       	ldd	r25, Y+44	; 0x2c
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	4f e7       	ldi	r20, 0x7F	; 127
    218c:	53 e4       	ldi	r21, 0x43	; 67
    218e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2192:	18 16       	cp	r1, r24
    2194:	0c f0       	brlt	.+2      	; 0x2198 <lcd_command+0x604>
    2196:	7b c0       	rjmp	.+246    	; 0x228e <lcd_command+0x6fa>
	{
		_delay_ms(__us / 1000.0);
    2198:	6d a5       	ldd	r22, Y+45	; 0x2d
    219a:	7e a5       	ldd	r23, Y+46	; 0x2e
    219c:	8f a5       	ldd	r24, Y+47	; 0x2f
    219e:	98 a9       	ldd	r25, Y+48	; 0x30
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	4a e7       	ldi	r20, 0x7A	; 122
    21a6:	54 e4       	ldi	r21, 0x44	; 68
    21a8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	8c a3       	std	Y+36, r24	; 0x24
    21b2:	9d a3       	std	Y+37, r25	; 0x25
    21b4:	ae a3       	std	Y+38, r26	; 0x26
    21b6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b8:	6c a1       	ldd	r22, Y+36	; 0x24
    21ba:	7d a1       	ldd	r23, Y+37	; 0x25
    21bc:	8e a1       	ldd	r24, Y+38	; 0x26
    21be:	9f a1       	ldd	r25, Y+39	; 0x27
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	4a e7       	ldi	r20, 0x7A	; 122
    21c6:	55 e4       	ldi	r21, 0x45	; 69
    21c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	88 a3       	std	Y+32, r24	; 0x20
    21d2:	99 a3       	std	Y+33, r25	; 0x21
    21d4:	aa a3       	std	Y+34, r26	; 0x22
    21d6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    21d8:	68 a1       	ldd	r22, Y+32	; 0x20
    21da:	79 a1       	ldd	r23, Y+33	; 0x21
    21dc:	8a a1       	ldd	r24, Y+34	; 0x22
    21de:	9b a1       	ldd	r25, Y+35	; 0x23
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	40 e8       	ldi	r20, 0x80	; 128
    21e6:	5f e3       	ldi	r21, 0x3F	; 63
    21e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21ec:	88 23       	and	r24, r24
    21ee:	2c f4       	brge	.+10     	; 0x21fa <lcd_command+0x666>
		__ticks = 1;
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	9f 8f       	std	Y+31, r25	; 0x1f
    21f6:	8e 8f       	std	Y+30, r24	; 0x1e
    21f8:	3f c0       	rjmp	.+126    	; 0x2278 <lcd_command+0x6e4>
	else if (__tmp > 65535)
    21fa:	68 a1       	ldd	r22, Y+32	; 0x20
    21fc:	79 a1       	ldd	r23, Y+33	; 0x21
    21fe:	8a a1       	ldd	r24, Y+34	; 0x22
    2200:	9b a1       	ldd	r25, Y+35	; 0x23
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	3f ef       	ldi	r19, 0xFF	; 255
    2206:	4f e7       	ldi	r20, 0x7F	; 127
    2208:	57 e4       	ldi	r21, 0x47	; 71
    220a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    220e:	18 16       	cp	r1, r24
    2210:	4c f5       	brge	.+82     	; 0x2264 <lcd_command+0x6d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2212:	6c a1       	ldd	r22, Y+36	; 0x24
    2214:	7d a1       	ldd	r23, Y+37	; 0x25
    2216:	8e a1       	ldd	r24, Y+38	; 0x26
    2218:	9f a1       	ldd	r25, Y+39	; 0x27
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	40 e2       	ldi	r20, 0x20	; 32
    2220:	51 e4       	ldi	r21, 0x41	; 65
    2222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	bc 01       	movw	r22, r24
    222c:	cd 01       	movw	r24, r26
    222e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	9f 8f       	std	Y+31, r25	; 0x1f
    2238:	8e 8f       	std	Y+30, r24	; 0x1e
    223a:	0f c0       	rjmp	.+30     	; 0x225a <lcd_command+0x6c6>
    223c:	80 e9       	ldi	r24, 0x90	; 144
    223e:	91 e0       	ldi	r25, 0x01	; 1
    2240:	9d 8f       	std	Y+29, r25	; 0x1d
    2242:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2244:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2246:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2248:	01 97       	sbiw	r24, 0x01	; 1
    224a:	f1 f7       	brne	.-4      	; 0x2248 <lcd_command+0x6b4>
    224c:	9d 8f       	std	Y+29, r25	; 0x1d
    224e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2250:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2252:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2254:	01 97       	sbiw	r24, 0x01	; 1
    2256:	9f 8f       	std	Y+31, r25	; 0x1f
    2258:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    225a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    225c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    225e:	00 97       	sbiw	r24, 0x00	; 0
    2260:	69 f7       	brne	.-38     	; 0x223c <lcd_command+0x6a8>
    2262:	24 c0       	rjmp	.+72     	; 0x22ac <lcd_command+0x718>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2264:	68 a1       	ldd	r22, Y+32	; 0x20
    2266:	79 a1       	ldd	r23, Y+33	; 0x21
    2268:	8a a1       	ldd	r24, Y+34	; 0x22
    226a:	9b a1       	ldd	r25, Y+35	; 0x23
    226c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2270:	dc 01       	movw	r26, r24
    2272:	cb 01       	movw	r24, r22
    2274:	9f 8f       	std	Y+31, r25	; 0x1f
    2276:	8e 8f       	std	Y+30, r24	; 0x1e
    2278:	8e 8d       	ldd	r24, Y+30	; 0x1e
    227a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    227c:	9b 8f       	std	Y+27, r25	; 0x1b
    227e:	8a 8f       	std	Y+26, r24	; 0x1a
    2280:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2282:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2284:	01 97       	sbiw	r24, 0x01	; 1
    2286:	f1 f7       	brne	.-4      	; 0x2284 <lcd_command+0x6f0>
    2288:	9b 8f       	std	Y+27, r25	; 0x1b
    228a:	8a 8f       	std	Y+26, r24	; 0x1a
    228c:	0f c0       	rjmp	.+30     	; 0x22ac <lcd_command+0x718>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    228e:	69 a5       	ldd	r22, Y+41	; 0x29
    2290:	7a a5       	ldd	r23, Y+42	; 0x2a
    2292:	8b a5       	ldd	r24, Y+43	; 0x2b
    2294:	9c a5       	ldd	r25, Y+44	; 0x2c
    2296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	88 a7       	std	Y+40, r24	; 0x28
    22a0:	88 a5       	ldd	r24, Y+40	; 0x28
    22a2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22a4:	89 8d       	ldd	r24, Y+25	; 0x19
    22a6:	8a 95       	dec	r24
    22a8:	f1 f7       	brne	.-4      	; 0x22a6 <lcd_command+0x712>
    22aa:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	Dio_write(E,Low);
    22ac:	8b e0       	ldi	r24, 0x0B	; 11
    22ae:	60 e0       	ldi	r22, 0x00	; 0
    22b0:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
    22b4:	80 e0       	ldi	r24, 0x00	; 0
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	a8 e4       	ldi	r26, 0x48	; 72
    22ba:	b3 e4       	ldi	r27, 0x43	; 67
    22bc:	8d 8b       	std	Y+21, r24	; 0x15
    22be:	9e 8b       	std	Y+22, r25	; 0x16
    22c0:	af 8b       	std	Y+23, r26	; 0x17
    22c2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22c4:	6d 89       	ldd	r22, Y+21	; 0x15
    22c6:	7e 89       	ldd	r23, Y+22	; 0x16
    22c8:	8f 89       	ldd	r24, Y+23	; 0x17
    22ca:	98 8d       	ldd	r25, Y+24	; 0x18
    22cc:	2b ea       	ldi	r18, 0xAB	; 171
    22ce:	3a ea       	ldi	r19, 0xAA	; 170
    22d0:	4a ea       	ldi	r20, 0xAA	; 170
    22d2:	50 e4       	ldi	r21, 0x40	; 64
    22d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	89 8b       	std	Y+17, r24	; 0x11
    22de:	9a 8b       	std	Y+18, r25	; 0x12
    22e0:	ab 8b       	std	Y+19, r26	; 0x13
    22e2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    22e4:	69 89       	ldd	r22, Y+17	; 0x11
    22e6:	7a 89       	ldd	r23, Y+18	; 0x12
    22e8:	8b 89       	ldd	r24, Y+19	; 0x13
    22ea:	9c 89       	ldd	r25, Y+20	; 0x14
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	40 e8       	ldi	r20, 0x80	; 128
    22f2:	5f e3       	ldi	r21, 0x3F	; 63
    22f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22f8:	88 23       	and	r24, r24
    22fa:	1c f4       	brge	.+6      	; 0x2302 <lcd_command+0x76e>
		__ticks = 1;
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	88 8b       	std	Y+16, r24	; 0x10
    2300:	91 c0       	rjmp	.+290    	; 0x2424 <lcd_command+0x890>
	else if (__tmp > 255)
    2302:	69 89       	ldd	r22, Y+17	; 0x11
    2304:	7a 89       	ldd	r23, Y+18	; 0x12
    2306:	8b 89       	ldd	r24, Y+19	; 0x13
    2308:	9c 89       	ldd	r25, Y+20	; 0x14
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	4f e7       	ldi	r20, 0x7F	; 127
    2310:	53 e4       	ldi	r21, 0x43	; 67
    2312:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2316:	18 16       	cp	r1, r24
    2318:	0c f0       	brlt	.+2      	; 0x231c <lcd_command+0x788>
    231a:	7b c0       	rjmp	.+246    	; 0x2412 <lcd_command+0x87e>
	{
		_delay_ms(__us / 1000.0);
    231c:	6d 89       	ldd	r22, Y+21	; 0x15
    231e:	7e 89       	ldd	r23, Y+22	; 0x16
    2320:	8f 89       	ldd	r24, Y+23	; 0x17
    2322:	98 8d       	ldd	r25, Y+24	; 0x18
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	4a e7       	ldi	r20, 0x7A	; 122
    232a:	54 e4       	ldi	r21, 0x44	; 68
    232c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	8c 87       	std	Y+12, r24	; 0x0c
    2336:	9d 87       	std	Y+13, r25	; 0x0d
    2338:	ae 87       	std	Y+14, r26	; 0x0e
    233a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    233c:	6c 85       	ldd	r22, Y+12	; 0x0c
    233e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2340:	8e 85       	ldd	r24, Y+14	; 0x0e
    2342:	9f 85       	ldd	r25, Y+15	; 0x0f
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	4a e7       	ldi	r20, 0x7A	; 122
    234a:	55 e4       	ldi	r21, 0x45	; 69
    234c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	88 87       	std	Y+8, r24	; 0x08
    2356:	99 87       	std	Y+9, r25	; 0x09
    2358:	aa 87       	std	Y+10, r26	; 0x0a
    235a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    235c:	68 85       	ldd	r22, Y+8	; 0x08
    235e:	79 85       	ldd	r23, Y+9	; 0x09
    2360:	8a 85       	ldd	r24, Y+10	; 0x0a
    2362:	9b 85       	ldd	r25, Y+11	; 0x0b
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	40 e8       	ldi	r20, 0x80	; 128
    236a:	5f e3       	ldi	r21, 0x3F	; 63
    236c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2370:	88 23       	and	r24, r24
    2372:	2c f4       	brge	.+10     	; 0x237e <lcd_command+0x7ea>
		__ticks = 1;
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	9f 83       	std	Y+7, r25	; 0x07
    237a:	8e 83       	std	Y+6, r24	; 0x06
    237c:	3f c0       	rjmp	.+126    	; 0x23fc <lcd_command+0x868>
	else if (__tmp > 65535)
    237e:	68 85       	ldd	r22, Y+8	; 0x08
    2380:	79 85       	ldd	r23, Y+9	; 0x09
    2382:	8a 85       	ldd	r24, Y+10	; 0x0a
    2384:	9b 85       	ldd	r25, Y+11	; 0x0b
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	3f ef       	ldi	r19, 0xFF	; 255
    238a:	4f e7       	ldi	r20, 0x7F	; 127
    238c:	57 e4       	ldi	r21, 0x47	; 71
    238e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2392:	18 16       	cp	r1, r24
    2394:	4c f5       	brge	.+82     	; 0x23e8 <lcd_command+0x854>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2396:	6c 85       	ldd	r22, Y+12	; 0x0c
    2398:	7d 85       	ldd	r23, Y+13	; 0x0d
    239a:	8e 85       	ldd	r24, Y+14	; 0x0e
    239c:	9f 85       	ldd	r25, Y+15	; 0x0f
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	40 e2       	ldi	r20, 0x20	; 32
    23a4:	51 e4       	ldi	r21, 0x41	; 65
    23a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	bc 01       	movw	r22, r24
    23b0:	cd 01       	movw	r24, r26
    23b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	9f 83       	std	Y+7, r25	; 0x07
    23bc:	8e 83       	std	Y+6, r24	; 0x06
    23be:	0f c0       	rjmp	.+30     	; 0x23de <lcd_command+0x84a>
    23c0:	80 e9       	ldi	r24, 0x90	; 144
    23c2:	91 e0       	ldi	r25, 0x01	; 1
    23c4:	9d 83       	std	Y+5, r25	; 0x05
    23c6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23c8:	8c 81       	ldd	r24, Y+4	; 0x04
    23ca:	9d 81       	ldd	r25, Y+5	; 0x05
    23cc:	01 97       	sbiw	r24, 0x01	; 1
    23ce:	f1 f7       	brne	.-4      	; 0x23cc <lcd_command+0x838>
    23d0:	9d 83       	std	Y+5, r25	; 0x05
    23d2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d4:	8e 81       	ldd	r24, Y+6	; 0x06
    23d6:	9f 81       	ldd	r25, Y+7	; 0x07
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	9f 83       	std	Y+7, r25	; 0x07
    23dc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23de:	8e 81       	ldd	r24, Y+6	; 0x06
    23e0:	9f 81       	ldd	r25, Y+7	; 0x07
    23e2:	00 97       	sbiw	r24, 0x00	; 0
    23e4:	69 f7       	brne	.-38     	; 0x23c0 <lcd_command+0x82c>
    23e6:	24 c0       	rjmp	.+72     	; 0x2430 <lcd_command+0x89c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e8:	68 85       	ldd	r22, Y+8	; 0x08
    23ea:	79 85       	ldd	r23, Y+9	; 0x09
    23ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    23ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    23f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	9f 83       	std	Y+7, r25	; 0x07
    23fa:	8e 83       	std	Y+6, r24	; 0x06
    23fc:	8e 81       	ldd	r24, Y+6	; 0x06
    23fe:	9f 81       	ldd	r25, Y+7	; 0x07
    2400:	9b 83       	std	Y+3, r25	; 0x03
    2402:	8a 83       	std	Y+2, r24	; 0x02
    2404:	8a 81       	ldd	r24, Y+2	; 0x02
    2406:	9b 81       	ldd	r25, Y+3	; 0x03
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	f1 f7       	brne	.-4      	; 0x2408 <lcd_command+0x874>
    240c:	9b 83       	std	Y+3, r25	; 0x03
    240e:	8a 83       	std	Y+2, r24	; 0x02
    2410:	0f c0       	rjmp	.+30     	; 0x2430 <lcd_command+0x89c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2412:	69 89       	ldd	r22, Y+17	; 0x11
    2414:	7a 89       	ldd	r23, Y+18	; 0x12
    2416:	8b 89       	ldd	r24, Y+19	; 0x13
    2418:	9c 89       	ldd	r25, Y+20	; 0x14
    241a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	88 8b       	std	Y+16, r24	; 0x10
    2424:	88 89       	ldd	r24, Y+16	; 0x10
    2426:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2428:	89 81       	ldd	r24, Y+1	; 0x01
    242a:	8a 95       	dec	r24
    242c:	f1 f7       	brne	.-4      	; 0x242a <lcd_command+0x896>
    242e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(200);
}
    2430:	cf 59       	subi	r28, 0x9F	; 159
    2432:	df 4f       	sbci	r29, 0xFF	; 255
    2434:	0f b6       	in	r0, 0x3f	; 63
    2436:	f8 94       	cli
    2438:	de bf       	out	0x3e, r29	; 62
    243a:	0f be       	out	0x3f, r0	; 63
    243c:	cd bf       	out	0x3d, r28	; 61
    243e:	cf 91       	pop	r28
    2440:	df 91       	pop	r29
    2442:	1f 91       	pop	r17
    2444:	0f 91       	pop	r16
    2446:	08 95       	ret

00002448 <lcd_init>:

void lcd_init(){
    2448:	df 93       	push	r29
    244a:	cf 93       	push	r28
    244c:	cd b7       	in	r28, 0x3d	; 61
    244e:	de b7       	in	r29, 0x3e	; 62
    2450:	6c 97       	sbiw	r28, 0x1c	; 28
    2452:	0f b6       	in	r0, 0x3f	; 63
    2454:	f8 94       	cli
    2456:	de bf       	out	0x3e, r29	; 62
    2458:	0f be       	out	0x3f, r0	; 63
    245a:	cd bf       	out	0x3d, r28	; 61
	//DDRA = 0xff;			// set port direction as output
	Dio_write(RW,Low);
    245c:	8a e0       	ldi	r24, 0x0A	; 10
    245e:	60 e0       	ldi	r22, 0x00	; 0
    2460:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
    2464:	80 e0       	ldi	r24, 0x00	; 0
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	a0 ea       	ldi	r26, 0xA0	; 160
    246a:	b1 e4       	ldi	r27, 0x41	; 65
    246c:	89 8f       	std	Y+25, r24	; 0x19
    246e:	9a 8f       	std	Y+26, r25	; 0x1a
    2470:	ab 8f       	std	Y+27, r26	; 0x1b
    2472:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2474:	69 8d       	ldd	r22, Y+25	; 0x19
    2476:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2478:	8b 8d       	ldd	r24, Y+27	; 0x1b
    247a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	4a e7       	ldi	r20, 0x7A	; 122
    2482:	55 e4       	ldi	r21, 0x45	; 69
    2484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	8d 8b       	std	Y+21, r24	; 0x15
    248e:	9e 8b       	std	Y+22, r25	; 0x16
    2490:	af 8b       	std	Y+23, r26	; 0x17
    2492:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2494:	6d 89       	ldd	r22, Y+21	; 0x15
    2496:	7e 89       	ldd	r23, Y+22	; 0x16
    2498:	8f 89       	ldd	r24, Y+23	; 0x17
    249a:	98 8d       	ldd	r25, Y+24	; 0x18
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	40 e8       	ldi	r20, 0x80	; 128
    24a2:	5f e3       	ldi	r21, 0x3F	; 63
    24a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24a8:	88 23       	and	r24, r24
    24aa:	2c f4       	brge	.+10     	; 0x24b6 <lcd_init+0x6e>
		__ticks = 1;
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	9c 8b       	std	Y+20, r25	; 0x14
    24b2:	8b 8b       	std	Y+19, r24	; 0x13
    24b4:	3f c0       	rjmp	.+126    	; 0x2534 <lcd_init+0xec>
	else if (__tmp > 65535)
    24b6:	6d 89       	ldd	r22, Y+21	; 0x15
    24b8:	7e 89       	ldd	r23, Y+22	; 0x16
    24ba:	8f 89       	ldd	r24, Y+23	; 0x17
    24bc:	98 8d       	ldd	r25, Y+24	; 0x18
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	3f ef       	ldi	r19, 0xFF	; 255
    24c2:	4f e7       	ldi	r20, 0x7F	; 127
    24c4:	57 e4       	ldi	r21, 0x47	; 71
    24c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24ca:	18 16       	cp	r1, r24
    24cc:	4c f5       	brge	.+82     	; 0x2520 <lcd_init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ce:	69 8d       	ldd	r22, Y+25	; 0x19
    24d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	40 e2       	ldi	r20, 0x20	; 32
    24dc:	51 e4       	ldi	r21, 0x41	; 65
    24de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	bc 01       	movw	r22, r24
    24e8:	cd 01       	movw	r24, r26
    24ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	9c 8b       	std	Y+20, r25	; 0x14
    24f4:	8b 8b       	std	Y+19, r24	; 0x13
    24f6:	0f c0       	rjmp	.+30     	; 0x2516 <lcd_init+0xce>
    24f8:	80 e9       	ldi	r24, 0x90	; 144
    24fa:	91 e0       	ldi	r25, 0x01	; 1
    24fc:	9a 8b       	std	Y+18, r25	; 0x12
    24fe:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2500:	89 89       	ldd	r24, Y+17	; 0x11
    2502:	9a 89       	ldd	r25, Y+18	; 0x12
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	f1 f7       	brne	.-4      	; 0x2504 <lcd_init+0xbc>
    2508:	9a 8b       	std	Y+18, r25	; 0x12
    250a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    250c:	8b 89       	ldd	r24, Y+19	; 0x13
    250e:	9c 89       	ldd	r25, Y+20	; 0x14
    2510:	01 97       	sbiw	r24, 0x01	; 1
    2512:	9c 8b       	std	Y+20, r25	; 0x14
    2514:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2516:	8b 89       	ldd	r24, Y+19	; 0x13
    2518:	9c 89       	ldd	r25, Y+20	; 0x14
    251a:	00 97       	sbiw	r24, 0x00	; 0
    251c:	69 f7       	brne	.-38     	; 0x24f8 <lcd_init+0xb0>
    251e:	14 c0       	rjmp	.+40     	; 0x2548 <lcd_init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2520:	6d 89       	ldd	r22, Y+21	; 0x15
    2522:	7e 89       	ldd	r23, Y+22	; 0x16
    2524:	8f 89       	ldd	r24, Y+23	; 0x17
    2526:	98 8d       	ldd	r25, Y+24	; 0x18
    2528:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	9c 8b       	std	Y+20, r25	; 0x14
    2532:	8b 8b       	std	Y+19, r24	; 0x13
    2534:	8b 89       	ldd	r24, Y+19	; 0x13
    2536:	9c 89       	ldd	r25, Y+20	; 0x14
    2538:	98 8b       	std	Y+16, r25	; 0x10
    253a:	8f 87       	std	Y+15, r24	; 0x0f
    253c:	8f 85       	ldd	r24, Y+15	; 0x0f
    253e:	98 89       	ldd	r25, Y+16	; 0x10
    2540:	01 97       	sbiw	r24, 0x01	; 1
    2542:	f1 f7       	brne	.-4      	; 0x2540 <lcd_init+0xf8>
    2544:	98 8b       	std	Y+16, r25	; 0x10
    2546:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);
	lcd_command(0x33);
    2548:	83 e3       	ldi	r24, 0x33	; 51
    254a:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <lcd_command>
	lcd_command(0x32);
    254e:	82 e3       	ldi	r24, 0x32	; 50
    2550:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <lcd_command>
	lcd_command(0x28);
    2554:	88 e2       	ldi	r24, 0x28	; 40
    2556:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <lcd_command>
	lcd_command(0x0f);
    255a:	8f e0       	ldi	r24, 0x0F	; 15
    255c:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <lcd_command>
	lcd_command(0x06);
    2560:	86 e0       	ldi	r24, 0x06	; 6
    2562:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <lcd_command>
	lcd_command(0x01);
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <lcd_command>
    256c:	80 e0       	ldi	r24, 0x00	; 0
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	a0 ea       	ldi	r26, 0xA0	; 160
    2572:	b1 e4       	ldi	r27, 0x41	; 65
    2574:	8b 87       	std	Y+11, r24	; 0x0b
    2576:	9c 87       	std	Y+12, r25	; 0x0c
    2578:	ad 87       	std	Y+13, r26	; 0x0d
    257a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    257c:	6b 85       	ldd	r22, Y+11	; 0x0b
    257e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2580:	8d 85       	ldd	r24, Y+13	; 0x0d
    2582:	9e 85       	ldd	r25, Y+14	; 0x0e
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	4a e7       	ldi	r20, 0x7A	; 122
    258a:	55 e4       	ldi	r21, 0x45	; 69
    258c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	8f 83       	std	Y+7, r24	; 0x07
    2596:	98 87       	std	Y+8, r25	; 0x08
    2598:	a9 87       	std	Y+9, r26	; 0x09
    259a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    259c:	6f 81       	ldd	r22, Y+7	; 0x07
    259e:	78 85       	ldd	r23, Y+8	; 0x08
    25a0:	89 85       	ldd	r24, Y+9	; 0x09
    25a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	40 e8       	ldi	r20, 0x80	; 128
    25aa:	5f e3       	ldi	r21, 0x3F	; 63
    25ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25b0:	88 23       	and	r24, r24
    25b2:	2c f4       	brge	.+10     	; 0x25be <lcd_init+0x176>
		__ticks = 1;
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	9e 83       	std	Y+6, r25	; 0x06
    25ba:	8d 83       	std	Y+5, r24	; 0x05
    25bc:	3f c0       	rjmp	.+126    	; 0x263c <lcd_init+0x1f4>
	else if (__tmp > 65535)
    25be:	6f 81       	ldd	r22, Y+7	; 0x07
    25c0:	78 85       	ldd	r23, Y+8	; 0x08
    25c2:	89 85       	ldd	r24, Y+9	; 0x09
    25c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	3f ef       	ldi	r19, 0xFF	; 255
    25ca:	4f e7       	ldi	r20, 0x7F	; 127
    25cc:	57 e4       	ldi	r21, 0x47	; 71
    25ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25d2:	18 16       	cp	r1, r24
    25d4:	4c f5       	brge	.+82     	; 0x2628 <lcd_init+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25da:	8d 85       	ldd	r24, Y+13	; 0x0d
    25dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	40 e2       	ldi	r20, 0x20	; 32
    25e4:	51 e4       	ldi	r21, 0x41	; 65
    25e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	bc 01       	movw	r22, r24
    25f0:	cd 01       	movw	r24, r26
    25f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	9e 83       	std	Y+6, r25	; 0x06
    25fc:	8d 83       	std	Y+5, r24	; 0x05
    25fe:	0f c0       	rjmp	.+30     	; 0x261e <lcd_init+0x1d6>
    2600:	80 e9       	ldi	r24, 0x90	; 144
    2602:	91 e0       	ldi	r25, 0x01	; 1
    2604:	9c 83       	std	Y+4, r25	; 0x04
    2606:	8b 83       	std	Y+3, r24	; 0x03
    2608:	8b 81       	ldd	r24, Y+3	; 0x03
    260a:	9c 81       	ldd	r25, Y+4	; 0x04
    260c:	01 97       	sbiw	r24, 0x01	; 1
    260e:	f1 f7       	brne	.-4      	; 0x260c <lcd_init+0x1c4>
    2610:	9c 83       	std	Y+4, r25	; 0x04
    2612:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2614:	8d 81       	ldd	r24, Y+5	; 0x05
    2616:	9e 81       	ldd	r25, Y+6	; 0x06
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	9e 83       	std	Y+6, r25	; 0x06
    261c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    261e:	8d 81       	ldd	r24, Y+5	; 0x05
    2620:	9e 81       	ldd	r25, Y+6	; 0x06
    2622:	00 97       	sbiw	r24, 0x00	; 0
    2624:	69 f7       	brne	.-38     	; 0x2600 <lcd_init+0x1b8>
    2626:	14 c0       	rjmp	.+40     	; 0x2650 <lcd_init+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2628:	6f 81       	ldd	r22, Y+7	; 0x07
    262a:	78 85       	ldd	r23, Y+8	; 0x08
    262c:	89 85       	ldd	r24, Y+9	; 0x09
    262e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	9e 83       	std	Y+6, r25	; 0x06
    263a:	8d 83       	std	Y+5, r24	; 0x05
    263c:	8d 81       	ldd	r24, Y+5	; 0x05
    263e:	9e 81       	ldd	r25, Y+6	; 0x06
    2640:	9a 83       	std	Y+2, r25	; 0x02
    2642:	89 83       	std	Y+1, r24	; 0x01
    2644:	89 81       	ldd	r24, Y+1	; 0x01
    2646:	9a 81       	ldd	r25, Y+2	; 0x02
    2648:	01 97       	sbiw	r24, 0x01	; 1
    264a:	f1 f7       	brne	.-4      	; 0x2648 <lcd_init+0x200>
    264c:	9a 83       	std	Y+2, r25	; 0x02
    264e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    2650:	6c 96       	adiw	r28, 0x1c	; 28
    2652:	0f b6       	in	r0, 0x3f	; 63
    2654:	f8 94       	cli
    2656:	de bf       	out	0x3e, r29	; 62
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	cd bf       	out	0x3d, r28	; 61
    265c:	cf 91       	pop	r28
    265e:	df 91       	pop	r29
    2660:	08 95       	ret

00002662 <lcd_char>:

void lcd_char(uint8 data){
    2662:	0f 93       	push	r16
    2664:	1f 93       	push	r17
    2666:	df 93       	push	r29
    2668:	cf 93       	push	r28
    266a:	cd b7       	in	r28, 0x3d	; 61
    266c:	de b7       	in	r29, 0x3e	; 62
    266e:	c1 56       	subi	r28, 0x61	; 97
    2670:	d0 40       	sbci	r29, 0x00	; 0
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	de bf       	out	0x3e, r29	; 62
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	cd bf       	out	0x3d, r28	; 61
    267c:	fe 01       	movw	r30, r28
    267e:	ef 59       	subi	r30, 0x9F	; 159
    2680:	ff 4f       	sbci	r31, 0xFF	; 255
    2682:	80 83       	st	Z, r24

	Dio_write(RS,High);
    2684:	89 e0       	ldi	r24, 0x09	; 9
    2686:	61 e0       	ldi	r22, 0x01	; 1
    2688:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
	Dio_write(RW,Low);
    268c:	8a e0       	ldi	r24, 0x0A	; 10
    268e:	60 e0       	ldi	r22, 0x00	; 0
    2690:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
	//DIO_Write(lcd_en,low);

	GET_BIT(data,7)?Dio_write(D7,High):Dio_write(D7,Low);
    2694:	fe 01       	movw	r30, r28
    2696:	ef 59       	subi	r30, 0x9F	; 159
    2698:	ff 4f       	sbci	r31, 0xFF	; 255
    269a:	80 81       	ld	r24, Z
    269c:	88 23       	and	r24, r24
    269e:	2c f4       	brge	.+10     	; 0x26aa <lcd_char+0x48>
    26a0:	87 e0       	ldi	r24, 0x07	; 7
    26a2:	61 e0       	ldi	r22, 0x01	; 1
    26a4:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
    26a8:	04 c0       	rjmp	.+8      	; 0x26b2 <lcd_char+0x50>
    26aa:	87 e0       	ldi	r24, 0x07	; 7
    26ac:	60 e0       	ldi	r22, 0x00	; 0
    26ae:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
	GET_BIT(data,6)?Dio_write(D6,High):Dio_write(D6,Low);
    26b2:	fe 01       	movw	r30, r28
    26b4:	ef 59       	subi	r30, 0x9F	; 159
    26b6:	ff 4f       	sbci	r31, 0xFF	; 255
    26b8:	80 81       	ld	r24, Z
    26ba:	82 95       	swap	r24
    26bc:	86 95       	lsr	r24
    26be:	86 95       	lsr	r24
    26c0:	83 70       	andi	r24, 0x03	; 3
    26c2:	88 2f       	mov	r24, r24
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	81 70       	andi	r24, 0x01	; 1
    26c8:	90 70       	andi	r25, 0x00	; 0
    26ca:	88 23       	and	r24, r24
    26cc:	29 f0       	breq	.+10     	; 0x26d8 <lcd_char+0x76>
    26ce:	86 e0       	ldi	r24, 0x06	; 6
    26d0:	61 e0       	ldi	r22, 0x01	; 1
    26d2:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
    26d6:	04 c0       	rjmp	.+8      	; 0x26e0 <lcd_char+0x7e>
    26d8:	86 e0       	ldi	r24, 0x06	; 6
    26da:	60 e0       	ldi	r22, 0x00	; 0
    26dc:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
	GET_BIT(data,5)?Dio_write(D5,High):Dio_write(D5,Low);
    26e0:	fe 01       	movw	r30, r28
    26e2:	ef 59       	subi	r30, 0x9F	; 159
    26e4:	ff 4f       	sbci	r31, 0xFF	; 255
    26e6:	80 81       	ld	r24, Z
    26e8:	82 95       	swap	r24
    26ea:	86 95       	lsr	r24
    26ec:	87 70       	andi	r24, 0x07	; 7
    26ee:	88 2f       	mov	r24, r24
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	81 70       	andi	r24, 0x01	; 1
    26f4:	90 70       	andi	r25, 0x00	; 0
    26f6:	88 23       	and	r24, r24
    26f8:	29 f0       	breq	.+10     	; 0x2704 <lcd_char+0xa2>
    26fa:	85 e0       	ldi	r24, 0x05	; 5
    26fc:	61 e0       	ldi	r22, 0x01	; 1
    26fe:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
    2702:	04 c0       	rjmp	.+8      	; 0x270c <lcd_char+0xaa>
    2704:	85 e0       	ldi	r24, 0x05	; 5
    2706:	60 e0       	ldi	r22, 0x00	; 0
    2708:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
	GET_BIT(data,4)?Dio_write(D4,High):Dio_write(D4,Low);
    270c:	fe 01       	movw	r30, r28
    270e:	ef 59       	subi	r30, 0x9F	; 159
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	80 81       	ld	r24, Z
    2714:	82 95       	swap	r24
    2716:	8f 70       	andi	r24, 0x0F	; 15
    2718:	88 2f       	mov	r24, r24
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	81 70       	andi	r24, 0x01	; 1
    271e:	90 70       	andi	r25, 0x00	; 0
    2720:	88 23       	and	r24, r24
    2722:	29 f0       	breq	.+10     	; 0x272e <lcd_char+0xcc>
    2724:	84 e0       	ldi	r24, 0x04	; 4
    2726:	61 e0       	ldi	r22, 0x01	; 1
    2728:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
    272c:	04 c0       	rjmp	.+8      	; 0x2736 <lcd_char+0xd4>
    272e:	84 e0       	ldi	r24, 0x04	; 4
    2730:	60 e0       	ldi	r22, 0x00	; 0
    2732:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>

	Dio_write(E,High);
    2736:	8b e0       	ldi	r24, 0x0B	; 11
    2738:	61 e0       	ldi	r22, 0x01	; 1
    273a:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
    273e:	fe 01       	movw	r30, r28
    2740:	e3 5a       	subi	r30, 0xA3	; 163
    2742:	ff 4f       	sbci	r31, 0xFF	; 255
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	a0 e2       	ldi	r26, 0x20	; 32
    274a:	b1 e4       	ldi	r27, 0x41	; 65
    274c:	80 83       	st	Z, r24
    274e:	91 83       	std	Z+1, r25	; 0x01
    2750:	a2 83       	std	Z+2, r26	; 0x02
    2752:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2754:	8e 01       	movw	r16, r28
    2756:	07 5a       	subi	r16, 0xA7	; 167
    2758:	1f 4f       	sbci	r17, 0xFF	; 255
    275a:	fe 01       	movw	r30, r28
    275c:	e3 5a       	subi	r30, 0xA3	; 163
    275e:	ff 4f       	sbci	r31, 0xFF	; 255
    2760:	60 81       	ld	r22, Z
    2762:	71 81       	ldd	r23, Z+1	; 0x01
    2764:	82 81       	ldd	r24, Z+2	; 0x02
    2766:	93 81       	ldd	r25, Z+3	; 0x03
    2768:	2b ea       	ldi	r18, 0xAB	; 171
    276a:	3a ea       	ldi	r19, 0xAA	; 170
    276c:	4a ea       	ldi	r20, 0xAA	; 170
    276e:	50 e4       	ldi	r21, 0x40	; 64
    2770:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	f8 01       	movw	r30, r16
    277a:	80 83       	st	Z, r24
    277c:	91 83       	std	Z+1, r25	; 0x01
    277e:	a2 83       	std	Z+2, r26	; 0x02
    2780:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2782:	fe 01       	movw	r30, r28
    2784:	e7 5a       	subi	r30, 0xA7	; 167
    2786:	ff 4f       	sbci	r31, 0xFF	; 255
    2788:	60 81       	ld	r22, Z
    278a:	71 81       	ldd	r23, Z+1	; 0x01
    278c:	82 81       	ldd	r24, Z+2	; 0x02
    278e:	93 81       	ldd	r25, Z+3	; 0x03
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	40 e8       	ldi	r20, 0x80	; 128
    2796:	5f e3       	ldi	r21, 0x3F	; 63
    2798:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    279c:	88 23       	and	r24, r24
    279e:	34 f4       	brge	.+12     	; 0x27ac <lcd_char+0x14a>
		__ticks = 1;
    27a0:	fe 01       	movw	r30, r28
    27a2:	e8 5a       	subi	r30, 0xA8	; 168
    27a4:	ff 4f       	sbci	r31, 0xFF	; 255
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	80 83       	st	Z, r24
    27aa:	e0 c0       	rjmp	.+448    	; 0x296c <lcd_char+0x30a>
	else if (__tmp > 255)
    27ac:	fe 01       	movw	r30, r28
    27ae:	e7 5a       	subi	r30, 0xA7	; 167
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	60 81       	ld	r22, Z
    27b4:	71 81       	ldd	r23, Z+1	; 0x01
    27b6:	82 81       	ldd	r24, Z+2	; 0x02
    27b8:	93 81       	ldd	r25, Z+3	; 0x03
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	4f e7       	ldi	r20, 0x7F	; 127
    27c0:	53 e4       	ldi	r21, 0x43	; 67
    27c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27c6:	18 16       	cp	r1, r24
    27c8:	0c f0       	brlt	.+2      	; 0x27cc <lcd_char+0x16a>
    27ca:	c0 c0       	rjmp	.+384    	; 0x294c <lcd_char+0x2ea>
	{
		_delay_ms(__us / 1000.0);
    27cc:	fe 01       	movw	r30, r28
    27ce:	e3 5a       	subi	r30, 0xA3	; 163
    27d0:	ff 4f       	sbci	r31, 0xFF	; 255
    27d2:	60 81       	ld	r22, Z
    27d4:	71 81       	ldd	r23, Z+1	; 0x01
    27d6:	82 81       	ldd	r24, Z+2	; 0x02
    27d8:	93 81       	ldd	r25, Z+3	; 0x03
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	4a e7       	ldi	r20, 0x7A	; 122
    27e0:	54 e4       	ldi	r21, 0x44	; 68
    27e2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	fe 01       	movw	r30, r28
    27ec:	ec 5a       	subi	r30, 0xAC	; 172
    27ee:	ff 4f       	sbci	r31, 0xFF	; 255
    27f0:	80 83       	st	Z, r24
    27f2:	91 83       	std	Z+1, r25	; 0x01
    27f4:	a2 83       	std	Z+2, r26	; 0x02
    27f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f8:	8e 01       	movw	r16, r28
    27fa:	00 5b       	subi	r16, 0xB0	; 176
    27fc:	1f 4f       	sbci	r17, 0xFF	; 255
    27fe:	fe 01       	movw	r30, r28
    2800:	ec 5a       	subi	r30, 0xAC	; 172
    2802:	ff 4f       	sbci	r31, 0xFF	; 255
    2804:	60 81       	ld	r22, Z
    2806:	71 81       	ldd	r23, Z+1	; 0x01
    2808:	82 81       	ldd	r24, Z+2	; 0x02
    280a:	93 81       	ldd	r25, Z+3	; 0x03
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	4a e7       	ldi	r20, 0x7A	; 122
    2812:	55 e4       	ldi	r21, 0x45	; 69
    2814:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	f8 01       	movw	r30, r16
    281e:	80 83       	st	Z, r24
    2820:	91 83       	std	Z+1, r25	; 0x01
    2822:	a2 83       	std	Z+2, r26	; 0x02
    2824:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2826:	fe 01       	movw	r30, r28
    2828:	e0 5b       	subi	r30, 0xB0	; 176
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	60 81       	ld	r22, Z
    282e:	71 81       	ldd	r23, Z+1	; 0x01
    2830:	82 81       	ldd	r24, Z+2	; 0x02
    2832:	93 81       	ldd	r25, Z+3	; 0x03
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	40 e8       	ldi	r20, 0x80	; 128
    283a:	5f e3       	ldi	r21, 0x3F	; 63
    283c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2840:	88 23       	and	r24, r24
    2842:	44 f4       	brge	.+16     	; 0x2854 <lcd_char+0x1f2>
		__ticks = 1;
    2844:	fe 01       	movw	r30, r28
    2846:	e2 5b       	subi	r30, 0xB2	; 178
    2848:	ff 4f       	sbci	r31, 0xFF	; 255
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	91 83       	std	Z+1, r25	; 0x01
    2850:	80 83       	st	Z, r24
    2852:	64 c0       	rjmp	.+200    	; 0x291c <lcd_char+0x2ba>
	else if (__tmp > 65535)
    2854:	fe 01       	movw	r30, r28
    2856:	e0 5b       	subi	r30, 0xB0	; 176
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	60 81       	ld	r22, Z
    285c:	71 81       	ldd	r23, Z+1	; 0x01
    285e:	82 81       	ldd	r24, Z+2	; 0x02
    2860:	93 81       	ldd	r25, Z+3	; 0x03
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	3f ef       	ldi	r19, 0xFF	; 255
    2866:	4f e7       	ldi	r20, 0x7F	; 127
    2868:	57 e4       	ldi	r21, 0x47	; 71
    286a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    286e:	18 16       	cp	r1, r24
    2870:	0c f0       	brlt	.+2      	; 0x2874 <lcd_char+0x212>
    2872:	43 c0       	rjmp	.+134    	; 0x28fa <lcd_char+0x298>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2874:	fe 01       	movw	r30, r28
    2876:	ec 5a       	subi	r30, 0xAC	; 172
    2878:	ff 4f       	sbci	r31, 0xFF	; 255
    287a:	60 81       	ld	r22, Z
    287c:	71 81       	ldd	r23, Z+1	; 0x01
    287e:	82 81       	ldd	r24, Z+2	; 0x02
    2880:	93 81       	ldd	r25, Z+3	; 0x03
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	40 e2       	ldi	r20, 0x20	; 32
    2888:	51 e4       	ldi	r21, 0x41	; 65
    288a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	8e 01       	movw	r16, r28
    2894:	02 5b       	subi	r16, 0xB2	; 178
    2896:	1f 4f       	sbci	r17, 0xFF	; 255
    2898:	bc 01       	movw	r22, r24
    289a:	cd 01       	movw	r24, r26
    289c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	f8 01       	movw	r30, r16
    28a6:	91 83       	std	Z+1, r25	; 0x01
    28a8:	80 83       	st	Z, r24
    28aa:	1f c0       	rjmp	.+62     	; 0x28ea <lcd_char+0x288>
    28ac:	fe 01       	movw	r30, r28
    28ae:	e4 5b       	subi	r30, 0xB4	; 180
    28b0:	ff 4f       	sbci	r31, 0xFF	; 255
    28b2:	80 e9       	ldi	r24, 0x90	; 144
    28b4:	91 e0       	ldi	r25, 0x01	; 1
    28b6:	91 83       	std	Z+1, r25	; 0x01
    28b8:	80 83       	st	Z, r24
    28ba:	fe 01       	movw	r30, r28
    28bc:	e4 5b       	subi	r30, 0xB4	; 180
    28be:	ff 4f       	sbci	r31, 0xFF	; 255
    28c0:	80 81       	ld	r24, Z
    28c2:	91 81       	ldd	r25, Z+1	; 0x01
    28c4:	01 97       	sbiw	r24, 0x01	; 1
    28c6:	f1 f7       	brne	.-4      	; 0x28c4 <lcd_char+0x262>
    28c8:	fe 01       	movw	r30, r28
    28ca:	e4 5b       	subi	r30, 0xB4	; 180
    28cc:	ff 4f       	sbci	r31, 0xFF	; 255
    28ce:	91 83       	std	Z+1, r25	; 0x01
    28d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d2:	de 01       	movw	r26, r28
    28d4:	a2 5b       	subi	r26, 0xB2	; 178
    28d6:	bf 4f       	sbci	r27, 0xFF	; 255
    28d8:	fe 01       	movw	r30, r28
    28da:	e2 5b       	subi	r30, 0xB2	; 178
    28dc:	ff 4f       	sbci	r31, 0xFF	; 255
    28de:	80 81       	ld	r24, Z
    28e0:	91 81       	ldd	r25, Z+1	; 0x01
    28e2:	01 97       	sbiw	r24, 0x01	; 1
    28e4:	11 96       	adiw	r26, 0x01	; 1
    28e6:	9c 93       	st	X, r25
    28e8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ea:	fe 01       	movw	r30, r28
    28ec:	e2 5b       	subi	r30, 0xB2	; 178
    28ee:	ff 4f       	sbci	r31, 0xFF	; 255
    28f0:	80 81       	ld	r24, Z
    28f2:	91 81       	ldd	r25, Z+1	; 0x01
    28f4:	00 97       	sbiw	r24, 0x00	; 0
    28f6:	d1 f6       	brne	.-76     	; 0x28ac <lcd_char+0x24a>
    28f8:	4b c0       	rjmp	.+150    	; 0x2990 <lcd_char+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28fa:	8e 01       	movw	r16, r28
    28fc:	02 5b       	subi	r16, 0xB2	; 178
    28fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2900:	fe 01       	movw	r30, r28
    2902:	e0 5b       	subi	r30, 0xB0	; 176
    2904:	ff 4f       	sbci	r31, 0xFF	; 255
    2906:	60 81       	ld	r22, Z
    2908:	71 81       	ldd	r23, Z+1	; 0x01
    290a:	82 81       	ldd	r24, Z+2	; 0x02
    290c:	93 81       	ldd	r25, Z+3	; 0x03
    290e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2912:	dc 01       	movw	r26, r24
    2914:	cb 01       	movw	r24, r22
    2916:	f8 01       	movw	r30, r16
    2918:	91 83       	std	Z+1, r25	; 0x01
    291a:	80 83       	st	Z, r24
    291c:	de 01       	movw	r26, r28
    291e:	a6 5b       	subi	r26, 0xB6	; 182
    2920:	bf 4f       	sbci	r27, 0xFF	; 255
    2922:	fe 01       	movw	r30, r28
    2924:	e2 5b       	subi	r30, 0xB2	; 178
    2926:	ff 4f       	sbci	r31, 0xFF	; 255
    2928:	80 81       	ld	r24, Z
    292a:	91 81       	ldd	r25, Z+1	; 0x01
    292c:	11 96       	adiw	r26, 0x01	; 1
    292e:	9c 93       	st	X, r25
    2930:	8e 93       	st	-X, r24
    2932:	fe 01       	movw	r30, r28
    2934:	e6 5b       	subi	r30, 0xB6	; 182
    2936:	ff 4f       	sbci	r31, 0xFF	; 255
    2938:	80 81       	ld	r24, Z
    293a:	91 81       	ldd	r25, Z+1	; 0x01
    293c:	01 97       	sbiw	r24, 0x01	; 1
    293e:	f1 f7       	brne	.-4      	; 0x293c <lcd_char+0x2da>
    2940:	fe 01       	movw	r30, r28
    2942:	e6 5b       	subi	r30, 0xB6	; 182
    2944:	ff 4f       	sbci	r31, 0xFF	; 255
    2946:	91 83       	std	Z+1, r25	; 0x01
    2948:	80 83       	st	Z, r24
    294a:	22 c0       	rjmp	.+68     	; 0x2990 <lcd_char+0x32e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    294c:	8e 01       	movw	r16, r28
    294e:	08 5a       	subi	r16, 0xA8	; 168
    2950:	1f 4f       	sbci	r17, 0xFF	; 255
    2952:	fe 01       	movw	r30, r28
    2954:	e7 5a       	subi	r30, 0xA7	; 167
    2956:	ff 4f       	sbci	r31, 0xFF	; 255
    2958:	60 81       	ld	r22, Z
    295a:	71 81       	ldd	r23, Z+1	; 0x01
    295c:	82 81       	ldd	r24, Z+2	; 0x02
    295e:	93 81       	ldd	r25, Z+3	; 0x03
    2960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	f8 01       	movw	r30, r16
    296a:	80 83       	st	Z, r24
    296c:	de 01       	movw	r26, r28
    296e:	a7 5b       	subi	r26, 0xB7	; 183
    2970:	bf 4f       	sbci	r27, 0xFF	; 255
    2972:	fe 01       	movw	r30, r28
    2974:	e8 5a       	subi	r30, 0xA8	; 168
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	80 81       	ld	r24, Z
    297a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    297c:	fe 01       	movw	r30, r28
    297e:	e7 5b       	subi	r30, 0xB7	; 183
    2980:	ff 4f       	sbci	r31, 0xFF	; 255
    2982:	80 81       	ld	r24, Z
    2984:	8a 95       	dec	r24
    2986:	f1 f7       	brne	.-4      	; 0x2984 <lcd_char+0x322>
    2988:	fe 01       	movw	r30, r28
    298a:	e7 5b       	subi	r30, 0xB7	; 183
    298c:	ff 4f       	sbci	r31, 0xFF	; 255
    298e:	80 83       	st	Z, r24
	_delay_us(10);
	Dio_write(E,Low);
    2990:	8b e0       	ldi	r24, 0x0B	; 11
    2992:	60 e0       	ldi	r22, 0x00	; 0
    2994:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
    2998:	fe 01       	movw	r30, r28
    299a:	eb 5b       	subi	r30, 0xBB	; 187
    299c:	ff 4f       	sbci	r31, 0xFF	; 255
    299e:	80 e0       	ldi	r24, 0x00	; 0
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	a8 e4       	ldi	r26, 0x48	; 72
    29a4:	b3 e4       	ldi	r27, 0x43	; 67
    29a6:	80 83       	st	Z, r24
    29a8:	91 83       	std	Z+1, r25	; 0x01
    29aa:	a2 83       	std	Z+2, r26	; 0x02
    29ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    29ae:	8e 01       	movw	r16, r28
    29b0:	0f 5b       	subi	r16, 0xBF	; 191
    29b2:	1f 4f       	sbci	r17, 0xFF	; 255
    29b4:	fe 01       	movw	r30, r28
    29b6:	eb 5b       	subi	r30, 0xBB	; 187
    29b8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ba:	60 81       	ld	r22, Z
    29bc:	71 81       	ldd	r23, Z+1	; 0x01
    29be:	82 81       	ldd	r24, Z+2	; 0x02
    29c0:	93 81       	ldd	r25, Z+3	; 0x03
    29c2:	2b ea       	ldi	r18, 0xAB	; 171
    29c4:	3a ea       	ldi	r19, 0xAA	; 170
    29c6:	4a ea       	ldi	r20, 0xAA	; 170
    29c8:	50 e4       	ldi	r21, 0x40	; 64
    29ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	f8 01       	movw	r30, r16
    29d4:	80 83       	st	Z, r24
    29d6:	91 83       	std	Z+1, r25	; 0x01
    29d8:	a2 83       	std	Z+2, r26	; 0x02
    29da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29dc:	fe 01       	movw	r30, r28
    29de:	ef 5b       	subi	r30, 0xBF	; 191
    29e0:	ff 4f       	sbci	r31, 0xFF	; 255
    29e2:	60 81       	ld	r22, Z
    29e4:	71 81       	ldd	r23, Z+1	; 0x01
    29e6:	82 81       	ldd	r24, Z+2	; 0x02
    29e8:	93 81       	ldd	r25, Z+3	; 0x03
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	40 e8       	ldi	r20, 0x80	; 128
    29f0:	5f e3       	ldi	r21, 0x3F	; 63
    29f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29f6:	88 23       	and	r24, r24
    29f8:	34 f4       	brge	.+12     	; 0x2a06 <lcd_char+0x3a4>
		__ticks = 1;
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	fe 01       	movw	r30, r28
    29fe:	e0 5c       	subi	r30, 0xC0	; 192
    2a00:	ff 4f       	sbci	r31, 0xFF	; 255
    2a02:	80 83       	st	Z, r24
    2a04:	9d c0       	rjmp	.+314    	; 0x2b40 <lcd_char+0x4de>
	else if (__tmp > 255)
    2a06:	fe 01       	movw	r30, r28
    2a08:	ef 5b       	subi	r30, 0xBF	; 191
    2a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0c:	60 81       	ld	r22, Z
    2a0e:	71 81       	ldd	r23, Z+1	; 0x01
    2a10:	82 81       	ldd	r24, Z+2	; 0x02
    2a12:	93 81       	ldd	r25, Z+3	; 0x03
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	4f e7       	ldi	r20, 0x7F	; 127
    2a1a:	53 e4       	ldi	r21, 0x43	; 67
    2a1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a20:	18 16       	cp	r1, r24
    2a22:	0c f0       	brlt	.+2      	; 0x2a26 <lcd_char+0x3c4>
    2a24:	7e c0       	rjmp	.+252    	; 0x2b22 <lcd_char+0x4c0>
	{
		_delay_ms(__us / 1000.0);
    2a26:	fe 01       	movw	r30, r28
    2a28:	eb 5b       	subi	r30, 0xBB	; 187
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	60 81       	ld	r22, Z
    2a2e:	71 81       	ldd	r23, Z+1	; 0x01
    2a30:	82 81       	ldd	r24, Z+2	; 0x02
    2a32:	93 81       	ldd	r25, Z+3	; 0x03
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	4a e7       	ldi	r20, 0x7A	; 122
    2a3a:	54 e4       	ldi	r21, 0x44	; 68
    2a3c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	8c af       	std	Y+60, r24	; 0x3c
    2a46:	9d af       	std	Y+61, r25	; 0x3d
    2a48:	ae af       	std	Y+62, r26	; 0x3e
    2a4a:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a4c:	6c ad       	ldd	r22, Y+60	; 0x3c
    2a4e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2a50:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a52:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	4a e7       	ldi	r20, 0x7A	; 122
    2a5a:	55 e4       	ldi	r21, 0x45	; 69
    2a5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	88 af       	std	Y+56, r24	; 0x38
    2a66:	99 af       	std	Y+57, r25	; 0x39
    2a68:	aa af       	std	Y+58, r26	; 0x3a
    2a6a:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2a6c:	68 ad       	ldd	r22, Y+56	; 0x38
    2a6e:	79 ad       	ldd	r23, Y+57	; 0x39
    2a70:	8a ad       	ldd	r24, Y+58	; 0x3a
    2a72:	9b ad       	ldd	r25, Y+59	; 0x3b
    2a74:	20 e0       	ldi	r18, 0x00	; 0
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	40 e8       	ldi	r20, 0x80	; 128
    2a7a:	5f e3       	ldi	r21, 0x3F	; 63
    2a7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a80:	88 23       	and	r24, r24
    2a82:	2c f4       	brge	.+10     	; 0x2a8e <lcd_char+0x42c>
		__ticks = 1;
    2a84:	81 e0       	ldi	r24, 0x01	; 1
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	9f ab       	std	Y+55, r25	; 0x37
    2a8a:	8e ab       	std	Y+54, r24	; 0x36
    2a8c:	3f c0       	rjmp	.+126    	; 0x2b0c <lcd_char+0x4aa>
	else if (__tmp > 65535)
    2a8e:	68 ad       	ldd	r22, Y+56	; 0x38
    2a90:	79 ad       	ldd	r23, Y+57	; 0x39
    2a92:	8a ad       	ldd	r24, Y+58	; 0x3a
    2a94:	9b ad       	ldd	r25, Y+59	; 0x3b
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	3f ef       	ldi	r19, 0xFF	; 255
    2a9a:	4f e7       	ldi	r20, 0x7F	; 127
    2a9c:	57 e4       	ldi	r21, 0x47	; 71
    2a9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2aa2:	18 16       	cp	r1, r24
    2aa4:	4c f5       	brge	.+82     	; 0x2af8 <lcd_char+0x496>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa6:	6c ad       	ldd	r22, Y+60	; 0x3c
    2aa8:	7d ad       	ldd	r23, Y+61	; 0x3d
    2aaa:	8e ad       	ldd	r24, Y+62	; 0x3e
    2aac:	9f ad       	ldd	r25, Y+63	; 0x3f
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	40 e2       	ldi	r20, 0x20	; 32
    2ab4:	51 e4       	ldi	r21, 0x41	; 65
    2ab6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	bc 01       	movw	r22, r24
    2ac0:	cd 01       	movw	r24, r26
    2ac2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	cb 01       	movw	r24, r22
    2aca:	9f ab       	std	Y+55, r25	; 0x37
    2acc:	8e ab       	std	Y+54, r24	; 0x36
    2ace:	0f c0       	rjmp	.+30     	; 0x2aee <lcd_char+0x48c>
    2ad0:	80 e9       	ldi	r24, 0x90	; 144
    2ad2:	91 e0       	ldi	r25, 0x01	; 1
    2ad4:	9d ab       	std	Y+53, r25	; 0x35
    2ad6:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ad8:	8c a9       	ldd	r24, Y+52	; 0x34
    2ada:	9d a9       	ldd	r25, Y+53	; 0x35
    2adc:	01 97       	sbiw	r24, 0x01	; 1
    2ade:	f1 f7       	brne	.-4      	; 0x2adc <lcd_char+0x47a>
    2ae0:	9d ab       	std	Y+53, r25	; 0x35
    2ae2:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae4:	8e a9       	ldd	r24, Y+54	; 0x36
    2ae6:	9f a9       	ldd	r25, Y+55	; 0x37
    2ae8:	01 97       	sbiw	r24, 0x01	; 1
    2aea:	9f ab       	std	Y+55, r25	; 0x37
    2aec:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aee:	8e a9       	ldd	r24, Y+54	; 0x36
    2af0:	9f a9       	ldd	r25, Y+55	; 0x37
    2af2:	00 97       	sbiw	r24, 0x00	; 0
    2af4:	69 f7       	brne	.-38     	; 0x2ad0 <lcd_char+0x46e>
    2af6:	2d c0       	rjmp	.+90     	; 0x2b52 <lcd_char+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af8:	68 ad       	ldd	r22, Y+56	; 0x38
    2afa:	79 ad       	ldd	r23, Y+57	; 0x39
    2afc:	8a ad       	ldd	r24, Y+58	; 0x3a
    2afe:	9b ad       	ldd	r25, Y+59	; 0x3b
    2b00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	9f ab       	std	Y+55, r25	; 0x37
    2b0a:	8e ab       	std	Y+54, r24	; 0x36
    2b0c:	8e a9       	ldd	r24, Y+54	; 0x36
    2b0e:	9f a9       	ldd	r25, Y+55	; 0x37
    2b10:	9b ab       	std	Y+51, r25	; 0x33
    2b12:	8a ab       	std	Y+50, r24	; 0x32
    2b14:	8a a9       	ldd	r24, Y+50	; 0x32
    2b16:	9b a9       	ldd	r25, Y+51	; 0x33
    2b18:	01 97       	sbiw	r24, 0x01	; 1
    2b1a:	f1 f7       	brne	.-4      	; 0x2b18 <lcd_char+0x4b6>
    2b1c:	9b ab       	std	Y+51, r25	; 0x33
    2b1e:	8a ab       	std	Y+50, r24	; 0x32
    2b20:	18 c0       	rjmp	.+48     	; 0x2b52 <lcd_char+0x4f0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b22:	fe 01       	movw	r30, r28
    2b24:	ef 5b       	subi	r30, 0xBF	; 191
    2b26:	ff 4f       	sbci	r31, 0xFF	; 255
    2b28:	60 81       	ld	r22, Z
    2b2a:	71 81       	ldd	r23, Z+1	; 0x01
    2b2c:	82 81       	ldd	r24, Z+2	; 0x02
    2b2e:	93 81       	ldd	r25, Z+3	; 0x03
    2b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	fe 01       	movw	r30, r28
    2b3a:	e0 5c       	subi	r30, 0xC0	; 192
    2b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3e:	80 83       	st	Z, r24
    2b40:	fe 01       	movw	r30, r28
    2b42:	e0 5c       	subi	r30, 0xC0	; 192
    2b44:	ff 4f       	sbci	r31, 0xFF	; 255
    2b46:	80 81       	ld	r24, Z
    2b48:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b4a:	89 a9       	ldd	r24, Y+49	; 0x31
    2b4c:	8a 95       	dec	r24
    2b4e:	f1 f7       	brne	.-4      	; 0x2b4c <lcd_char+0x4ea>
    2b50:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);

	GET_BIT(data,3)?Dio_write(D7,High):Dio_write(D7,Low);
    2b52:	fe 01       	movw	r30, r28
    2b54:	ef 59       	subi	r30, 0x9F	; 159
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	80 81       	ld	r24, Z
    2b5a:	86 95       	lsr	r24
    2b5c:	86 95       	lsr	r24
    2b5e:	86 95       	lsr	r24
    2b60:	88 2f       	mov	r24, r24
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	81 70       	andi	r24, 0x01	; 1
    2b66:	90 70       	andi	r25, 0x00	; 0
    2b68:	88 23       	and	r24, r24
    2b6a:	29 f0       	breq	.+10     	; 0x2b76 <lcd_char+0x514>
    2b6c:	87 e0       	ldi	r24, 0x07	; 7
    2b6e:	61 e0       	ldi	r22, 0x01	; 1
    2b70:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
    2b74:	04 c0       	rjmp	.+8      	; 0x2b7e <lcd_char+0x51c>
    2b76:	87 e0       	ldi	r24, 0x07	; 7
    2b78:	60 e0       	ldi	r22, 0x00	; 0
    2b7a:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
	GET_BIT(data,2)?Dio_write(D6,High):Dio_write(D6,Low);
    2b7e:	fe 01       	movw	r30, r28
    2b80:	ef 59       	subi	r30, 0x9F	; 159
    2b82:	ff 4f       	sbci	r31, 0xFF	; 255
    2b84:	80 81       	ld	r24, Z
    2b86:	86 95       	lsr	r24
    2b88:	86 95       	lsr	r24
    2b8a:	88 2f       	mov	r24, r24
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	81 70       	andi	r24, 0x01	; 1
    2b90:	90 70       	andi	r25, 0x00	; 0
    2b92:	88 23       	and	r24, r24
    2b94:	29 f0       	breq	.+10     	; 0x2ba0 <lcd_char+0x53e>
    2b96:	86 e0       	ldi	r24, 0x06	; 6
    2b98:	61 e0       	ldi	r22, 0x01	; 1
    2b9a:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
    2b9e:	04 c0       	rjmp	.+8      	; 0x2ba8 <lcd_char+0x546>
    2ba0:	86 e0       	ldi	r24, 0x06	; 6
    2ba2:	60 e0       	ldi	r22, 0x00	; 0
    2ba4:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
	GET_BIT(data,1)?Dio_write(D5,High):Dio_write(D5,Low);
    2ba8:	fe 01       	movw	r30, r28
    2baa:	ef 59       	subi	r30, 0x9F	; 159
    2bac:	ff 4f       	sbci	r31, 0xFF	; 255
    2bae:	80 81       	ld	r24, Z
    2bb0:	86 95       	lsr	r24
    2bb2:	88 2f       	mov	r24, r24
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	81 70       	andi	r24, 0x01	; 1
    2bb8:	90 70       	andi	r25, 0x00	; 0
    2bba:	88 23       	and	r24, r24
    2bbc:	29 f0       	breq	.+10     	; 0x2bc8 <lcd_char+0x566>
    2bbe:	85 e0       	ldi	r24, 0x05	; 5
    2bc0:	61 e0       	ldi	r22, 0x01	; 1
    2bc2:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
    2bc6:	04 c0       	rjmp	.+8      	; 0x2bd0 <lcd_char+0x56e>
    2bc8:	85 e0       	ldi	r24, 0x05	; 5
    2bca:	60 e0       	ldi	r22, 0x00	; 0
    2bcc:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
	GET_BIT(data,0)?Dio_write(D4,High):Dio_write(D4,Low);
    2bd0:	fe 01       	movw	r30, r28
    2bd2:	ef 59       	subi	r30, 0x9F	; 159
    2bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd6:	80 81       	ld	r24, Z
    2bd8:	88 2f       	mov	r24, r24
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	81 70       	andi	r24, 0x01	; 1
    2bde:	90 70       	andi	r25, 0x00	; 0
    2be0:	88 23       	and	r24, r24
    2be2:	29 f0       	breq	.+10     	; 0x2bee <lcd_char+0x58c>
    2be4:	84 e0       	ldi	r24, 0x04	; 4
    2be6:	61 e0       	ldi	r22, 0x01	; 1
    2be8:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
    2bec:	04 c0       	rjmp	.+8      	; 0x2bf6 <lcd_char+0x594>
    2bee:	84 e0       	ldi	r24, 0x04	; 4
    2bf0:	60 e0       	ldi	r22, 0x00	; 0
    2bf2:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>

	Dio_write(E,High);
    2bf6:	8b e0       	ldi	r24, 0x0B	; 11
    2bf8:	61 e0       	ldi	r22, 0x01	; 1
    2bfa:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
    2bfe:	80 e0       	ldi	r24, 0x00	; 0
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	a0 e8       	ldi	r26, 0x80	; 128
    2c04:	bf e3       	ldi	r27, 0x3F	; 63
    2c06:	8d a7       	std	Y+45, r24	; 0x2d
    2c08:	9e a7       	std	Y+46, r25	; 0x2e
    2c0a:	af a7       	std	Y+47, r26	; 0x2f
    2c0c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c0e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2c10:	7e a5       	ldd	r23, Y+46	; 0x2e
    2c12:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c14:	98 a9       	ldd	r25, Y+48	; 0x30
    2c16:	2b ea       	ldi	r18, 0xAB	; 171
    2c18:	3a ea       	ldi	r19, 0xAA	; 170
    2c1a:	4a ea       	ldi	r20, 0xAA	; 170
    2c1c:	50 e4       	ldi	r21, 0x40	; 64
    2c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c22:	dc 01       	movw	r26, r24
    2c24:	cb 01       	movw	r24, r22
    2c26:	89 a7       	std	Y+41, r24	; 0x29
    2c28:	9a a7       	std	Y+42, r25	; 0x2a
    2c2a:	ab a7       	std	Y+43, r26	; 0x2b
    2c2c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2c2e:	69 a5       	ldd	r22, Y+41	; 0x29
    2c30:	7a a5       	ldd	r23, Y+42	; 0x2a
    2c32:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c34:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c36:	20 e0       	ldi	r18, 0x00	; 0
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	40 e8       	ldi	r20, 0x80	; 128
    2c3c:	5f e3       	ldi	r21, 0x3F	; 63
    2c3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c42:	88 23       	and	r24, r24
    2c44:	1c f4       	brge	.+6      	; 0x2c4c <lcd_char+0x5ea>
		__ticks = 1;
    2c46:	81 e0       	ldi	r24, 0x01	; 1
    2c48:	88 a7       	std	Y+40, r24	; 0x28
    2c4a:	91 c0       	rjmp	.+290    	; 0x2d6e <lcd_char+0x70c>
	else if (__tmp > 255)
    2c4c:	69 a5       	ldd	r22, Y+41	; 0x29
    2c4e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2c50:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c52:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	4f e7       	ldi	r20, 0x7F	; 127
    2c5a:	53 e4       	ldi	r21, 0x43	; 67
    2c5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c60:	18 16       	cp	r1, r24
    2c62:	0c f0       	brlt	.+2      	; 0x2c66 <lcd_char+0x604>
    2c64:	7b c0       	rjmp	.+246    	; 0x2d5c <lcd_char+0x6fa>
	{
		_delay_ms(__us / 1000.0);
    2c66:	6d a5       	ldd	r22, Y+45	; 0x2d
    2c68:	7e a5       	ldd	r23, Y+46	; 0x2e
    2c6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c6c:	98 a9       	ldd	r25, Y+48	; 0x30
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	4a e7       	ldi	r20, 0x7A	; 122
    2c74:	54 e4       	ldi	r21, 0x44	; 68
    2c76:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	8c a3       	std	Y+36, r24	; 0x24
    2c80:	9d a3       	std	Y+37, r25	; 0x25
    2c82:	ae a3       	std	Y+38, r26	; 0x26
    2c84:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c86:	6c a1       	ldd	r22, Y+36	; 0x24
    2c88:	7d a1       	ldd	r23, Y+37	; 0x25
    2c8a:	8e a1       	ldd	r24, Y+38	; 0x26
    2c8c:	9f a1       	ldd	r25, Y+39	; 0x27
    2c8e:	20 e0       	ldi	r18, 0x00	; 0
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	4a e7       	ldi	r20, 0x7A	; 122
    2c94:	55 e4       	ldi	r21, 0x45	; 69
    2c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	88 a3       	std	Y+32, r24	; 0x20
    2ca0:	99 a3       	std	Y+33, r25	; 0x21
    2ca2:	aa a3       	std	Y+34, r26	; 0x22
    2ca4:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2ca6:	68 a1       	ldd	r22, Y+32	; 0x20
    2ca8:	79 a1       	ldd	r23, Y+33	; 0x21
    2caa:	8a a1       	ldd	r24, Y+34	; 0x22
    2cac:	9b a1       	ldd	r25, Y+35	; 0x23
    2cae:	20 e0       	ldi	r18, 0x00	; 0
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	40 e8       	ldi	r20, 0x80	; 128
    2cb4:	5f e3       	ldi	r21, 0x3F	; 63
    2cb6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cba:	88 23       	and	r24, r24
    2cbc:	2c f4       	brge	.+10     	; 0x2cc8 <lcd_char+0x666>
		__ticks = 1;
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	9f 8f       	std	Y+31, r25	; 0x1f
    2cc4:	8e 8f       	std	Y+30, r24	; 0x1e
    2cc6:	3f c0       	rjmp	.+126    	; 0x2d46 <lcd_char+0x6e4>
	else if (__tmp > 65535)
    2cc8:	68 a1       	ldd	r22, Y+32	; 0x20
    2cca:	79 a1       	ldd	r23, Y+33	; 0x21
    2ccc:	8a a1       	ldd	r24, Y+34	; 0x22
    2cce:	9b a1       	ldd	r25, Y+35	; 0x23
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	3f ef       	ldi	r19, 0xFF	; 255
    2cd4:	4f e7       	ldi	r20, 0x7F	; 127
    2cd6:	57 e4       	ldi	r21, 0x47	; 71
    2cd8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cdc:	18 16       	cp	r1, r24
    2cde:	4c f5       	brge	.+82     	; 0x2d32 <lcd_char+0x6d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ce0:	6c a1       	ldd	r22, Y+36	; 0x24
    2ce2:	7d a1       	ldd	r23, Y+37	; 0x25
    2ce4:	8e a1       	ldd	r24, Y+38	; 0x26
    2ce6:	9f a1       	ldd	r25, Y+39	; 0x27
    2ce8:	20 e0       	ldi	r18, 0x00	; 0
    2cea:	30 e0       	ldi	r19, 0x00	; 0
    2cec:	40 e2       	ldi	r20, 0x20	; 32
    2cee:	51 e4       	ldi	r21, 0x41	; 65
    2cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf4:	dc 01       	movw	r26, r24
    2cf6:	cb 01       	movw	r24, r22
    2cf8:	bc 01       	movw	r22, r24
    2cfa:	cd 01       	movw	r24, r26
    2cfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	9f 8f       	std	Y+31, r25	; 0x1f
    2d06:	8e 8f       	std	Y+30, r24	; 0x1e
    2d08:	0f c0       	rjmp	.+30     	; 0x2d28 <lcd_char+0x6c6>
    2d0a:	80 e9       	ldi	r24, 0x90	; 144
    2d0c:	91 e0       	ldi	r25, 0x01	; 1
    2d0e:	9d 8f       	std	Y+29, r25	; 0x1d
    2d10:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d12:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2d14:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2d16:	01 97       	sbiw	r24, 0x01	; 1
    2d18:	f1 f7       	brne	.-4      	; 0x2d16 <lcd_char+0x6b4>
    2d1a:	9d 8f       	std	Y+29, r25	; 0x1d
    2d1c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d1e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d20:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2d22:	01 97       	sbiw	r24, 0x01	; 1
    2d24:	9f 8f       	std	Y+31, r25	; 0x1f
    2d26:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d28:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d2a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2d2c:	00 97       	sbiw	r24, 0x00	; 0
    2d2e:	69 f7       	brne	.-38     	; 0x2d0a <lcd_char+0x6a8>
    2d30:	24 c0       	rjmp	.+72     	; 0x2d7a <lcd_char+0x718>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d32:	68 a1       	ldd	r22, Y+32	; 0x20
    2d34:	79 a1       	ldd	r23, Y+33	; 0x21
    2d36:	8a a1       	ldd	r24, Y+34	; 0x22
    2d38:	9b a1       	ldd	r25, Y+35	; 0x23
    2d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d3e:	dc 01       	movw	r26, r24
    2d40:	cb 01       	movw	r24, r22
    2d42:	9f 8f       	std	Y+31, r25	; 0x1f
    2d44:	8e 8f       	std	Y+30, r24	; 0x1e
    2d46:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d48:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2d4a:	9b 8f       	std	Y+27, r25	; 0x1b
    2d4c:	8a 8f       	std	Y+26, r24	; 0x1a
    2d4e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d50:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2d52:	01 97       	sbiw	r24, 0x01	; 1
    2d54:	f1 f7       	brne	.-4      	; 0x2d52 <lcd_char+0x6f0>
    2d56:	9b 8f       	std	Y+27, r25	; 0x1b
    2d58:	8a 8f       	std	Y+26, r24	; 0x1a
    2d5a:	0f c0       	rjmp	.+30     	; 0x2d7a <lcd_char+0x718>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d5c:	69 a5       	ldd	r22, Y+41	; 0x29
    2d5e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2d60:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d62:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d68:	dc 01       	movw	r26, r24
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	88 a7       	std	Y+40, r24	; 0x28
    2d6e:	88 a5       	ldd	r24, Y+40	; 0x28
    2d70:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d72:	89 8d       	ldd	r24, Y+25	; 0x19
    2d74:	8a 95       	dec	r24
    2d76:	f1 f7       	brne	.-4      	; 0x2d74 <lcd_char+0x712>
    2d78:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	Dio_write(E,Low);
    2d7a:	8b e0       	ldi	r24, 0x0B	; 11
    2d7c:	60 e0       	ldi	r22, 0x00	; 0
    2d7e:	0e 94 c7 0a 	call	0x158e	; 0x158e <Dio_write>
    2d82:	80 e0       	ldi	r24, 0x00	; 0
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	a8 e4       	ldi	r26, 0x48	; 72
    2d88:	b3 e4       	ldi	r27, 0x43	; 67
    2d8a:	8d 8b       	std	Y+21, r24	; 0x15
    2d8c:	9e 8b       	std	Y+22, r25	; 0x16
    2d8e:	af 8b       	std	Y+23, r26	; 0x17
    2d90:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d92:	6d 89       	ldd	r22, Y+21	; 0x15
    2d94:	7e 89       	ldd	r23, Y+22	; 0x16
    2d96:	8f 89       	ldd	r24, Y+23	; 0x17
    2d98:	98 8d       	ldd	r25, Y+24	; 0x18
    2d9a:	2b ea       	ldi	r18, 0xAB	; 171
    2d9c:	3a ea       	ldi	r19, 0xAA	; 170
    2d9e:	4a ea       	ldi	r20, 0xAA	; 170
    2da0:	50 e4       	ldi	r21, 0x40	; 64
    2da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	89 8b       	std	Y+17, r24	; 0x11
    2dac:	9a 8b       	std	Y+18, r25	; 0x12
    2dae:	ab 8b       	std	Y+19, r26	; 0x13
    2db0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2db2:	69 89       	ldd	r22, Y+17	; 0x11
    2db4:	7a 89       	ldd	r23, Y+18	; 0x12
    2db6:	8b 89       	ldd	r24, Y+19	; 0x13
    2db8:	9c 89       	ldd	r25, Y+20	; 0x14
    2dba:	20 e0       	ldi	r18, 0x00	; 0
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	40 e8       	ldi	r20, 0x80	; 128
    2dc0:	5f e3       	ldi	r21, 0x3F	; 63
    2dc2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dc6:	88 23       	and	r24, r24
    2dc8:	1c f4       	brge	.+6      	; 0x2dd0 <lcd_char+0x76e>
		__ticks = 1;
    2dca:	81 e0       	ldi	r24, 0x01	; 1
    2dcc:	88 8b       	std	Y+16, r24	; 0x10
    2dce:	91 c0       	rjmp	.+290    	; 0x2ef2 <lcd_char+0x890>
	else if (__tmp > 255)
    2dd0:	69 89       	ldd	r22, Y+17	; 0x11
    2dd2:	7a 89       	ldd	r23, Y+18	; 0x12
    2dd4:	8b 89       	ldd	r24, Y+19	; 0x13
    2dd6:	9c 89       	ldd	r25, Y+20	; 0x14
    2dd8:	20 e0       	ldi	r18, 0x00	; 0
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	4f e7       	ldi	r20, 0x7F	; 127
    2dde:	53 e4       	ldi	r21, 0x43	; 67
    2de0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2de4:	18 16       	cp	r1, r24
    2de6:	0c f0       	brlt	.+2      	; 0x2dea <lcd_char+0x788>
    2de8:	7b c0       	rjmp	.+246    	; 0x2ee0 <lcd_char+0x87e>
	{
		_delay_ms(__us / 1000.0);
    2dea:	6d 89       	ldd	r22, Y+21	; 0x15
    2dec:	7e 89       	ldd	r23, Y+22	; 0x16
    2dee:	8f 89       	ldd	r24, Y+23	; 0x17
    2df0:	98 8d       	ldd	r25, Y+24	; 0x18
    2df2:	20 e0       	ldi	r18, 0x00	; 0
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	4a e7       	ldi	r20, 0x7A	; 122
    2df8:	54 e4       	ldi	r21, 0x44	; 68
    2dfa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2dfe:	dc 01       	movw	r26, r24
    2e00:	cb 01       	movw	r24, r22
    2e02:	8c 87       	std	Y+12, r24	; 0x0c
    2e04:	9d 87       	std	Y+13, r25	; 0x0d
    2e06:	ae 87       	std	Y+14, r26	; 0x0e
    2e08:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e0a:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e0c:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e0e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e10:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	4a e7       	ldi	r20, 0x7A	; 122
    2e18:	55 e4       	ldi	r21, 0x45	; 69
    2e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1e:	dc 01       	movw	r26, r24
    2e20:	cb 01       	movw	r24, r22
    2e22:	88 87       	std	Y+8, r24	; 0x08
    2e24:	99 87       	std	Y+9, r25	; 0x09
    2e26:	aa 87       	std	Y+10, r26	; 0x0a
    2e28:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2e2a:	68 85       	ldd	r22, Y+8	; 0x08
    2e2c:	79 85       	ldd	r23, Y+9	; 0x09
    2e2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e30:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	40 e8       	ldi	r20, 0x80	; 128
    2e38:	5f e3       	ldi	r21, 0x3F	; 63
    2e3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e3e:	88 23       	and	r24, r24
    2e40:	2c f4       	brge	.+10     	; 0x2e4c <lcd_char+0x7ea>
		__ticks = 1;
    2e42:	81 e0       	ldi	r24, 0x01	; 1
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	9f 83       	std	Y+7, r25	; 0x07
    2e48:	8e 83       	std	Y+6, r24	; 0x06
    2e4a:	3f c0       	rjmp	.+126    	; 0x2eca <lcd_char+0x868>
	else if (__tmp > 65535)
    2e4c:	68 85       	ldd	r22, Y+8	; 0x08
    2e4e:	79 85       	ldd	r23, Y+9	; 0x09
    2e50:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e52:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	3f ef       	ldi	r19, 0xFF	; 255
    2e58:	4f e7       	ldi	r20, 0x7F	; 127
    2e5a:	57 e4       	ldi	r21, 0x47	; 71
    2e5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e60:	18 16       	cp	r1, r24
    2e62:	4c f5       	brge	.+82     	; 0x2eb6 <lcd_char+0x854>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e64:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e66:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e68:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e6a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e6c:	20 e0       	ldi	r18, 0x00	; 0
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	40 e2       	ldi	r20, 0x20	; 32
    2e72:	51 e4       	ldi	r21, 0x41	; 65
    2e74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e78:	dc 01       	movw	r26, r24
    2e7a:	cb 01       	movw	r24, r22
    2e7c:	bc 01       	movw	r22, r24
    2e7e:	cd 01       	movw	r24, r26
    2e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e84:	dc 01       	movw	r26, r24
    2e86:	cb 01       	movw	r24, r22
    2e88:	9f 83       	std	Y+7, r25	; 0x07
    2e8a:	8e 83       	std	Y+6, r24	; 0x06
    2e8c:	0f c0       	rjmp	.+30     	; 0x2eac <lcd_char+0x84a>
    2e8e:	80 e9       	ldi	r24, 0x90	; 144
    2e90:	91 e0       	ldi	r25, 0x01	; 1
    2e92:	9d 83       	std	Y+5, r25	; 0x05
    2e94:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e96:	8c 81       	ldd	r24, Y+4	; 0x04
    2e98:	9d 81       	ldd	r25, Y+5	; 0x05
    2e9a:	01 97       	sbiw	r24, 0x01	; 1
    2e9c:	f1 f7       	brne	.-4      	; 0x2e9a <lcd_char+0x838>
    2e9e:	9d 83       	std	Y+5, r25	; 0x05
    2ea0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ea2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ea4:	9f 81       	ldd	r25, Y+7	; 0x07
    2ea6:	01 97       	sbiw	r24, 0x01	; 1
    2ea8:	9f 83       	std	Y+7, r25	; 0x07
    2eaa:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eac:	8e 81       	ldd	r24, Y+6	; 0x06
    2eae:	9f 81       	ldd	r25, Y+7	; 0x07
    2eb0:	00 97       	sbiw	r24, 0x00	; 0
    2eb2:	69 f7       	brne	.-38     	; 0x2e8e <lcd_char+0x82c>
    2eb4:	24 c0       	rjmp	.+72     	; 0x2efe <lcd_char+0x89c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eb6:	68 85       	ldd	r22, Y+8	; 0x08
    2eb8:	79 85       	ldd	r23, Y+9	; 0x09
    2eba:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ebc:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	cb 01       	movw	r24, r22
    2ec6:	9f 83       	std	Y+7, r25	; 0x07
    2ec8:	8e 83       	std	Y+6, r24	; 0x06
    2eca:	8e 81       	ldd	r24, Y+6	; 0x06
    2ecc:	9f 81       	ldd	r25, Y+7	; 0x07
    2ece:	9b 83       	std	Y+3, r25	; 0x03
    2ed0:	8a 83       	std	Y+2, r24	; 0x02
    2ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ed6:	01 97       	sbiw	r24, 0x01	; 1
    2ed8:	f1 f7       	brne	.-4      	; 0x2ed6 <lcd_char+0x874>
    2eda:	9b 83       	std	Y+3, r25	; 0x03
    2edc:	8a 83       	std	Y+2, r24	; 0x02
    2ede:	0f c0       	rjmp	.+30     	; 0x2efe <lcd_char+0x89c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ee0:	69 89       	ldd	r22, Y+17	; 0x11
    2ee2:	7a 89       	ldd	r23, Y+18	; 0x12
    2ee4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ee6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eec:	dc 01       	movw	r26, r24
    2eee:	cb 01       	movw	r24, r22
    2ef0:	88 8b       	std	Y+16, r24	; 0x10
    2ef2:	88 89       	ldd	r24, Y+16	; 0x10
    2ef4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ef6:	89 81       	ldd	r24, Y+1	; 0x01
    2ef8:	8a 95       	dec	r24
    2efa:	f1 f7       	brne	.-4      	; 0x2ef8 <lcd_char+0x896>
    2efc:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(200);
}
    2efe:	cf 59       	subi	r28, 0x9F	; 159
    2f00:	df 4f       	sbci	r29, 0xFF	; 255
    2f02:	0f b6       	in	r0, 0x3f	; 63
    2f04:	f8 94       	cli
    2f06:	de bf       	out	0x3e, r29	; 62
    2f08:	0f be       	out	0x3f, r0	; 63
    2f0a:	cd bf       	out	0x3d, r28	; 61
    2f0c:	cf 91       	pop	r28
    2f0e:	df 91       	pop	r29
    2f10:	1f 91       	pop	r17
    2f12:	0f 91       	pop	r16
    2f14:	08 95       	ret

00002f16 <lcd_str>:

void lcd_str(uint8 *str){
    2f16:	df 93       	push	r29
    2f18:	cf 93       	push	r28
    2f1a:	00 d0       	rcall	.+0      	; 0x2f1c <lcd_str+0x6>
    2f1c:	00 d0       	rcall	.+0      	; 0x2f1e <lcd_str+0x8>
    2f1e:	cd b7       	in	r28, 0x3d	; 61
    2f20:	de b7       	in	r29, 0x3e	; 62
    2f22:	9c 83       	std	Y+4, r25	; 0x04
    2f24:	8b 83       	std	Y+3, r24	; 0x03
	int i =0;
    2f26:	1a 82       	std	Y+2, r1	; 0x02
    2f28:	19 82       	std	Y+1, r1	; 0x01
    2f2a:	0f c0       	rjmp	.+30     	; 0x2f4a <lcd_str+0x34>
	while(str[i]!=0){
		lcd_char(str[i]);
    2f2c:	29 81       	ldd	r18, Y+1	; 0x01
    2f2e:	3a 81       	ldd	r19, Y+2	; 0x02
    2f30:	8b 81       	ldd	r24, Y+3	; 0x03
    2f32:	9c 81       	ldd	r25, Y+4	; 0x04
    2f34:	fc 01       	movw	r30, r24
    2f36:	e2 0f       	add	r30, r18
    2f38:	f3 1f       	adc	r31, r19
    2f3a:	80 81       	ld	r24, Z
    2f3c:	0e 94 31 13 	call	0x2662	; 0x2662 <lcd_char>
		i++;
    2f40:	89 81       	ldd	r24, Y+1	; 0x01
    2f42:	9a 81       	ldd	r25, Y+2	; 0x02
    2f44:	01 96       	adiw	r24, 0x01	; 1
    2f46:	9a 83       	std	Y+2, r25	; 0x02
    2f48:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(200);
}

void lcd_str(uint8 *str){
	int i =0;
	while(str[i]!=0){
    2f4a:	29 81       	ldd	r18, Y+1	; 0x01
    2f4c:	3a 81       	ldd	r19, Y+2	; 0x02
    2f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f50:	9c 81       	ldd	r25, Y+4	; 0x04
    2f52:	fc 01       	movw	r30, r24
    2f54:	e2 0f       	add	r30, r18
    2f56:	f3 1f       	adc	r31, r19
    2f58:	80 81       	ld	r24, Z
    2f5a:	88 23       	and	r24, r24
    2f5c:	39 f7       	brne	.-50     	; 0x2f2c <lcd_str+0x16>
		lcd_char(str[i]);
		i++;
	}
}
    2f5e:	0f 90       	pop	r0
    2f60:	0f 90       	pop	r0
    2f62:	0f 90       	pop	r0
    2f64:	0f 90       	pop	r0
    2f66:	cf 91       	pop	r28
    2f68:	df 91       	pop	r29
    2f6a:	08 95       	ret

00002f6c <lcd_clear>:

void lcd_clear(){
    2f6c:	df 93       	push	r29
    2f6e:	cf 93       	push	r28
    2f70:	cd b7       	in	r28, 0x3d	; 61
    2f72:	de b7       	in	r29, 0x3e	; 62
    2f74:	2e 97       	sbiw	r28, 0x0e	; 14
    2f76:	0f b6       	in	r0, 0x3f	; 63
    2f78:	f8 94       	cli
    2f7a:	de bf       	out	0x3e, r29	; 62
    2f7c:	0f be       	out	0x3f, r0	; 63
    2f7e:	cd bf       	out	0x3d, r28	; 61
	lcd_command(0x01); //clear the display
    2f80:	81 e0       	ldi	r24, 0x01	; 1
    2f82:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <lcd_command>
    2f86:	80 e0       	ldi	r24, 0x00	; 0
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	a0 e0       	ldi	r26, 0x00	; 0
    2f8c:	b0 e4       	ldi	r27, 0x40	; 64
    2f8e:	8b 87       	std	Y+11, r24	; 0x0b
    2f90:	9c 87       	std	Y+12, r25	; 0x0c
    2f92:	ad 87       	std	Y+13, r26	; 0x0d
    2f94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f96:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f98:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f9e:	20 e0       	ldi	r18, 0x00	; 0
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	4a e7       	ldi	r20, 0x7A	; 122
    2fa4:	55 e4       	ldi	r21, 0x45	; 69
    2fa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2faa:	dc 01       	movw	r26, r24
    2fac:	cb 01       	movw	r24, r22
    2fae:	8f 83       	std	Y+7, r24	; 0x07
    2fb0:	98 87       	std	Y+8, r25	; 0x08
    2fb2:	a9 87       	std	Y+9, r26	; 0x09
    2fb4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fb6:	6f 81       	ldd	r22, Y+7	; 0x07
    2fb8:	78 85       	ldd	r23, Y+8	; 0x08
    2fba:	89 85       	ldd	r24, Y+9	; 0x09
    2fbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fbe:	20 e0       	ldi	r18, 0x00	; 0
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	40 e8       	ldi	r20, 0x80	; 128
    2fc4:	5f e3       	ldi	r21, 0x3F	; 63
    2fc6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fca:	88 23       	and	r24, r24
    2fcc:	2c f4       	brge	.+10     	; 0x2fd8 <lcd_clear+0x6c>
		__ticks = 1;
    2fce:	81 e0       	ldi	r24, 0x01	; 1
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	9e 83       	std	Y+6, r25	; 0x06
    2fd4:	8d 83       	std	Y+5, r24	; 0x05
    2fd6:	3f c0       	rjmp	.+126    	; 0x3056 <lcd_clear+0xea>
	else if (__tmp > 65535)
    2fd8:	6f 81       	ldd	r22, Y+7	; 0x07
    2fda:	78 85       	ldd	r23, Y+8	; 0x08
    2fdc:	89 85       	ldd	r24, Y+9	; 0x09
    2fde:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fe0:	20 e0       	ldi	r18, 0x00	; 0
    2fe2:	3f ef       	ldi	r19, 0xFF	; 255
    2fe4:	4f e7       	ldi	r20, 0x7F	; 127
    2fe6:	57 e4       	ldi	r21, 0x47	; 71
    2fe8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fec:	18 16       	cp	r1, r24
    2fee:	4c f5       	brge	.+82     	; 0x3042 <lcd_clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ff0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ff2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ff4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ff6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ff8:	20 e0       	ldi	r18, 0x00	; 0
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	40 e2       	ldi	r20, 0x20	; 32
    2ffe:	51 e4       	ldi	r21, 0x41	; 65
    3000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3004:	dc 01       	movw	r26, r24
    3006:	cb 01       	movw	r24, r22
    3008:	bc 01       	movw	r22, r24
    300a:	cd 01       	movw	r24, r26
    300c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3010:	dc 01       	movw	r26, r24
    3012:	cb 01       	movw	r24, r22
    3014:	9e 83       	std	Y+6, r25	; 0x06
    3016:	8d 83       	std	Y+5, r24	; 0x05
    3018:	0f c0       	rjmp	.+30     	; 0x3038 <lcd_clear+0xcc>
    301a:	80 e9       	ldi	r24, 0x90	; 144
    301c:	91 e0       	ldi	r25, 0x01	; 1
    301e:	9c 83       	std	Y+4, r25	; 0x04
    3020:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3022:	8b 81       	ldd	r24, Y+3	; 0x03
    3024:	9c 81       	ldd	r25, Y+4	; 0x04
    3026:	01 97       	sbiw	r24, 0x01	; 1
    3028:	f1 f7       	brne	.-4      	; 0x3026 <lcd_clear+0xba>
    302a:	9c 83       	std	Y+4, r25	; 0x04
    302c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    302e:	8d 81       	ldd	r24, Y+5	; 0x05
    3030:	9e 81       	ldd	r25, Y+6	; 0x06
    3032:	01 97       	sbiw	r24, 0x01	; 1
    3034:	9e 83       	std	Y+6, r25	; 0x06
    3036:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3038:	8d 81       	ldd	r24, Y+5	; 0x05
    303a:	9e 81       	ldd	r25, Y+6	; 0x06
    303c:	00 97       	sbiw	r24, 0x00	; 0
    303e:	69 f7       	brne	.-38     	; 0x301a <lcd_clear+0xae>
    3040:	14 c0       	rjmp	.+40     	; 0x306a <lcd_clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3042:	6f 81       	ldd	r22, Y+7	; 0x07
    3044:	78 85       	ldd	r23, Y+8	; 0x08
    3046:	89 85       	ldd	r24, Y+9	; 0x09
    3048:	9a 85       	ldd	r25, Y+10	; 0x0a
    304a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    304e:	dc 01       	movw	r26, r24
    3050:	cb 01       	movw	r24, r22
    3052:	9e 83       	std	Y+6, r25	; 0x06
    3054:	8d 83       	std	Y+5, r24	; 0x05
    3056:	8d 81       	ldd	r24, Y+5	; 0x05
    3058:	9e 81       	ldd	r25, Y+6	; 0x06
    305a:	9a 83       	std	Y+2, r25	; 0x02
    305c:	89 83       	std	Y+1, r24	; 0x01
    305e:	89 81       	ldd	r24, Y+1	; 0x01
    3060:	9a 81       	ldd	r25, Y+2	; 0x02
    3062:	01 97       	sbiw	r24, 0x01	; 1
    3064:	f1 f7       	brne	.-4      	; 0x3062 <lcd_clear+0xf6>
    3066:	9a 83       	std	Y+2, r25	; 0x02
    3068:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	lcd_command(0x80); //cursor at (0,0)
    306a:	80 e8       	ldi	r24, 0x80	; 128
    306c:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <lcd_command>
}
    3070:	2e 96       	adiw	r28, 0x0e	; 14
    3072:	0f b6       	in	r0, 0x3f	; 63
    3074:	f8 94       	cli
    3076:	de bf       	out	0x3e, r29	; 62
    3078:	0f be       	out	0x3f, r0	; 63
    307a:	cd bf       	out	0x3d, r28	; 61
    307c:	cf 91       	pop	r28
    307e:	df 91       	pop	r29
    3080:	08 95       	ret

00003082 <lcd_str_xy>:

void lcd_str_xy(uint8 x, uint8 y,uint8 *str){
    3082:	df 93       	push	r29
    3084:	cf 93       	push	r28
    3086:	00 d0       	rcall	.+0      	; 0x3088 <lcd_str_xy+0x6>
    3088:	00 d0       	rcall	.+0      	; 0x308a <lcd_str_xy+0x8>
    308a:	cd b7       	in	r28, 0x3d	; 61
    308c:	de b7       	in	r29, 0x3e	; 62
    308e:	89 83       	std	Y+1, r24	; 0x01
    3090:	6a 83       	std	Y+2, r22	; 0x02
    3092:	5c 83       	std	Y+4, r21	; 0x04
    3094:	4b 83       	std	Y+3, r20	; 0x03
	if (y==0 && x<16){
    3096:	8a 81       	ldd	r24, Y+2	; 0x02
    3098:	88 23       	and	r24, r24
    309a:	49 f4       	brne	.+18     	; 0x30ae <lcd_str_xy+0x2c>
    309c:	89 81       	ldd	r24, Y+1	; 0x01
    309e:	80 31       	cpi	r24, 0x10	; 16
    30a0:	30 f4       	brcc	.+12     	; 0x30ae <lcd_str_xy+0x2c>
		lcd_command((x & 0x0f)|0x80);//cursor at the xy cordinates
    30a2:	89 81       	ldd	r24, Y+1	; 0x01
    30a4:	8f 70       	andi	r24, 0x0F	; 15
    30a6:	80 68       	ori	r24, 0x80	; 128
    30a8:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <lcd_command>
    30ac:	0b c0       	rjmp	.+22     	; 0x30c4 <lcd_str_xy+0x42>
	}else if(y==1 && x<16){
    30ae:	8a 81       	ldd	r24, Y+2	; 0x02
    30b0:	81 30       	cpi	r24, 0x01	; 1
    30b2:	41 f4       	brne	.+16     	; 0x30c4 <lcd_str_xy+0x42>
    30b4:	89 81       	ldd	r24, Y+1	; 0x01
    30b6:	80 31       	cpi	r24, 0x10	; 16
    30b8:	28 f4       	brcc	.+10     	; 0x30c4 <lcd_str_xy+0x42>
		lcd_command((x & 0x0f)|0xc0);//cursor at the xy cordinates
    30ba:	89 81       	ldd	r24, Y+1	; 0x01
    30bc:	8f 70       	andi	r24, 0x0F	; 15
    30be:	80 6c       	ori	r24, 0xC0	; 192
    30c0:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <lcd_command>
	}
	lcd_str(str);
    30c4:	8b 81       	ldd	r24, Y+3	; 0x03
    30c6:	9c 81       	ldd	r25, Y+4	; 0x04
    30c8:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <lcd_str>
}
    30cc:	0f 90       	pop	r0
    30ce:	0f 90       	pop	r0
    30d0:	0f 90       	pop	r0
    30d2:	0f 90       	pop	r0
    30d4:	cf 91       	pop	r28
    30d6:	df 91       	pop	r29
    30d8:	08 95       	ret

000030da <test>:
#include"MCAL/UART/UART.h"
#include"MCAL/LED/led.h"
volatile int ctr = 0;
volatile int ctr2 = 0;

void test(void){
    30da:	df 93       	push	r29
    30dc:	cf 93       	push	r28
    30de:	cd b7       	in	r28, 0x3d	; 61
    30e0:	de b7       	in	r29, 0x3e	; 62
	ctr++;
    30e2:	80 91 cb 00 	lds	r24, 0x00CB
    30e6:	90 91 cc 00 	lds	r25, 0x00CC
    30ea:	01 96       	adiw	r24, 0x01	; 1
    30ec:	90 93 cc 00 	sts	0x00CC, r25
    30f0:	80 93 cb 00 	sts	0x00CB, r24
}
    30f4:	cf 91       	pop	r28
    30f6:	df 91       	pop	r29
    30f8:	08 95       	ret

000030fa <TIM0_init2>:

void TIM0_init2(void){
    30fa:	df 93       	push	r29
    30fc:	cf 93       	push	r28
    30fe:	cd b7       	in	r28, 0x3d	; 61
    3100:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0;
    3102:	e2 e5       	ldi	r30, 0x52	; 82
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	10 82       	st	Z, r1
	// Mode
	CLR_BIT(TCCR0,3);
    3108:	a3 e5       	ldi	r26, 0x53	; 83
    310a:	b0 e0       	ldi	r27, 0x00	; 0
    310c:	e3 e5       	ldi	r30, 0x53	; 83
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	80 81       	ld	r24, Z
    3112:	87 7f       	andi	r24, 0xF7	; 247
    3114:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,6);
    3116:	a3 e5       	ldi	r26, 0x53	; 83
    3118:	b0 e0       	ldi	r27, 0x00	; 0
    311a:	e3 e5       	ldi	r30, 0x53	; 83
    311c:	f0 e0       	ldi	r31, 0x00	; 0
    311e:	80 81       	ld	r24, Z
    3120:	8f 7b       	andi	r24, 0xBF	; 191
    3122:	8c 93       	st	X, r24

	// Prescaler
	SET_BIT(TCCR0,0);
    3124:	a3 e5       	ldi	r26, 0x53	; 83
    3126:	b0 e0       	ldi	r27, 0x00	; 0
    3128:	e3 e5       	ldi	r30, 0x53	; 83
    312a:	f0 e0       	ldi	r31, 0x00	; 0
    312c:	80 81       	ld	r24, Z
    312e:	81 60       	ori	r24, 0x01	; 1
    3130:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,1);
    3132:	a3 e5       	ldi	r26, 0x53	; 83
    3134:	b0 e0       	ldi	r27, 0x00	; 0
    3136:	e3 e5       	ldi	r30, 0x53	; 83
    3138:	f0 e0       	ldi	r31, 0x00	; 0
    313a:	80 81       	ld	r24, Z
    313c:	8d 7f       	andi	r24, 0xFD	; 253
    313e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,2);
    3140:	a3 e5       	ldi	r26, 0x53	; 83
    3142:	b0 e0       	ldi	r27, 0x00	; 0
    3144:	e3 e5       	ldi	r30, 0x53	; 83
    3146:	f0 e0       	ldi	r31, 0x00	; 0
    3148:	80 81       	ld	r24, Z
    314a:	84 60       	ori	r24, 0x04	; 4
    314c:	8c 93       	st	X, r24


}
    314e:	cf 91       	pop	r28
    3150:	df 91       	pop	r29
    3152:	08 95       	ret

00003154 <main>:

*/


int main()
{
    3154:	df 93       	push	r29
    3156:	cf 93       	push	r28
    3158:	cd b7       	in	r28, 0x3d	; 61
    315a:	de b7       	in	r29, 0x3e	; 62
    315c:	64 97       	sbiw	r28, 0x14	; 20
    315e:	0f b6       	in	r0, 0x3f	; 63
    3160:	f8 94       	cli
    3162:	de bf       	out	0x3e, r29	; 62
    3164:	0f be       	out	0x3f, r0	; 63
    3166:	cd bf       	out	0x3d, r28	; 61
	uint8 str[20];
    Dio_init();
    3168:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <Dio_init>
	SPI_initSlave();
    316c:	0e 94 ca 08 	call	0x1194	; 0x1194 <SPI_initSlave>

	while(1)
	{
         SPI_ReceiveString(str);
    3170:	ce 01       	movw	r24, r28
    3172:	01 96       	adiw	r24, 0x01	; 1
    3174:	0e 94 20 09 	call	0x1240	; 0x1240 <SPI_ReceiveString>
         Led_Handler(str);
    3178:	ce 01       	movw	r24, r28
    317a:	01 96       	adiw	r24, 0x01	; 1
    317c:	0e 94 63 09 	call	0x12c6	; 0x12c6 <Led_Handler>
    3180:	f7 cf       	rjmp	.-18     	; 0x3170 <main+0x1c>

00003182 <__prologue_saves__>:
    3182:	2f 92       	push	r2
    3184:	3f 92       	push	r3
    3186:	4f 92       	push	r4
    3188:	5f 92       	push	r5
    318a:	6f 92       	push	r6
    318c:	7f 92       	push	r7
    318e:	8f 92       	push	r8
    3190:	9f 92       	push	r9
    3192:	af 92       	push	r10
    3194:	bf 92       	push	r11
    3196:	cf 92       	push	r12
    3198:	df 92       	push	r13
    319a:	ef 92       	push	r14
    319c:	ff 92       	push	r15
    319e:	0f 93       	push	r16
    31a0:	1f 93       	push	r17
    31a2:	cf 93       	push	r28
    31a4:	df 93       	push	r29
    31a6:	cd b7       	in	r28, 0x3d	; 61
    31a8:	de b7       	in	r29, 0x3e	; 62
    31aa:	ca 1b       	sub	r28, r26
    31ac:	db 0b       	sbc	r29, r27
    31ae:	0f b6       	in	r0, 0x3f	; 63
    31b0:	f8 94       	cli
    31b2:	de bf       	out	0x3e, r29	; 62
    31b4:	0f be       	out	0x3f, r0	; 63
    31b6:	cd bf       	out	0x3d, r28	; 61
    31b8:	09 94       	ijmp

000031ba <__epilogue_restores__>:
    31ba:	2a 88       	ldd	r2, Y+18	; 0x12
    31bc:	39 88       	ldd	r3, Y+17	; 0x11
    31be:	48 88       	ldd	r4, Y+16	; 0x10
    31c0:	5f 84       	ldd	r5, Y+15	; 0x0f
    31c2:	6e 84       	ldd	r6, Y+14	; 0x0e
    31c4:	7d 84       	ldd	r7, Y+13	; 0x0d
    31c6:	8c 84       	ldd	r8, Y+12	; 0x0c
    31c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    31ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    31cc:	b9 84       	ldd	r11, Y+9	; 0x09
    31ce:	c8 84       	ldd	r12, Y+8	; 0x08
    31d0:	df 80       	ldd	r13, Y+7	; 0x07
    31d2:	ee 80       	ldd	r14, Y+6	; 0x06
    31d4:	fd 80       	ldd	r15, Y+5	; 0x05
    31d6:	0c 81       	ldd	r16, Y+4	; 0x04
    31d8:	1b 81       	ldd	r17, Y+3	; 0x03
    31da:	aa 81       	ldd	r26, Y+2	; 0x02
    31dc:	b9 81       	ldd	r27, Y+1	; 0x01
    31de:	ce 0f       	add	r28, r30
    31e0:	d1 1d       	adc	r29, r1
    31e2:	0f b6       	in	r0, 0x3f	; 63
    31e4:	f8 94       	cli
    31e6:	de bf       	out	0x3e, r29	; 62
    31e8:	0f be       	out	0x3f, r0	; 63
    31ea:	cd bf       	out	0x3d, r28	; 61
    31ec:	ed 01       	movw	r28, r26
    31ee:	08 95       	ret

000031f0 <_exit>:
    31f0:	f8 94       	cli

000031f2 <__stop_program>:
    31f2:	ff cf       	rjmp	.-2      	; 0x31f2 <__stop_program>
