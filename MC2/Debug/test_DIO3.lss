
test_DIO3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006a  00800060  00002a92  00002b26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  008000ca  008000ca  00002b90  2**0
                  ALLOC
  3 .stab         00002bf8  00000000  00000000  00002b90  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017be  00000000  00000000  00005788  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006f46  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000070a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00007235  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000927a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a37b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b300  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b480  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b742  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bfd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d2 08 	jmp	0x11a4	; 0x11a4 <__vector_1>
       8:	0c 94 ff 08 	jmp	0x11fe	; 0x11fe <__vector_2>
       c:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__vector_10>
      2c:	0c 94 d3 07 	jmp	0xfa6	; 0xfa6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e9       	ldi	r30, 0x92	; 146
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3c       	cpi	r26, 0xCA	; 202
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa ec       	ldi	r26, 0xCA	; 202
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3d       	cpi	r26, 0xD8	; 216
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <main>
      8a:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 10 15 	jmp	0x2a20	; 0x2a20 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2c 15 	jmp	0x2a58	; 0x2a58 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 10 15 	jmp	0x2a20	; 0x2a20 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2c 15 	jmp	0x2a58	; 0x2a58 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 18 15 	jmp	0x2a30	; 0x2a30 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 20 15 	jmp	0x2a40	; 0x2a40 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 3c 15 	jmp	0x2a78	; 0x2a78 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <USART_Init>:
 */ 

#include "UART.h"						/* Include USART header file */

void USART_Init(unsigned long BAUDRATE)				/* USART initialize function */
{ 
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <USART_Init+0xa>
     ca8:	00 d0       	rcall	.+0      	; 0xcaa <USART_Init+0xc>
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
     cae:	69 83       	std	Y+1, r22	; 0x01
     cb0:	7a 83       	std	Y+2, r23	; 0x02
     cb2:	8b 83       	std	Y+3, r24	; 0x03
     cb4:	9c 83       	std	Y+4, r25	; 0x04
	UCSRB |= (1 << RXEN) | (1 << TXEN);				/* Enable USART transmitter and receiver */
     cb6:	aa e2       	ldi	r26, 0x2A	; 42
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	ea e2       	ldi	r30, 0x2A	; 42
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	88 61       	ori	r24, 0x18	; 24
     cc2:	8c 93       	st	X, r24
	UCSRC |= (1 << URSEL)| (1 << UCSZ0) | (1 << UCSZ1);	/* Write USCRC for 8 bit data and 1 stop bit */ 
     cc4:	a0 e4       	ldi	r26, 0x40	; 64
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e0 e4       	ldi	r30, 0x40	; 64
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	86 68       	ori	r24, 0x86	; 134
     cd0:	8c 93       	st	X, r24
	UBRRL = BAUD_PRESCALE;							/* Load UBRRL with lower 8 bit of prescale value */
     cd2:	09 e2       	ldi	r16, 0x29	; 41
     cd4:	10 e0       	ldi	r17, 0x00	; 0
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	9a 81       	ldd	r25, Y+2	; 0x02
     cda:	ab 81       	ldd	r26, Y+3	; 0x03
     cdc:	bc 81       	ldd	r27, Y+4	; 0x04
     cde:	88 0f       	add	r24, r24
     ce0:	99 1f       	adc	r25, r25
     ce2:	aa 1f       	adc	r26, r26
     ce4:	bb 1f       	adc	r27, r27
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	aa 1f       	adc	r26, r26
     cec:	bb 1f       	adc	r27, r27
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	aa 1f       	adc	r26, r26
     cf4:	bb 1f       	adc	r27, r27
     cf6:	88 0f       	add	r24, r24
     cf8:	99 1f       	adc	r25, r25
     cfa:	aa 1f       	adc	r26, r26
     cfc:	bb 1f       	adc	r27, r27
     cfe:	9c 01       	movw	r18, r24
     d00:	ad 01       	movw	r20, r26
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	94 e2       	ldi	r25, 0x24	; 36
     d06:	a4 ef       	ldi	r26, 0xF4	; 244
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	bc 01       	movw	r22, r24
     d0c:	cd 01       	movw	r24, r26
     d0e:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__udivmodsi4>
     d12:	da 01       	movw	r26, r20
     d14:	c9 01       	movw	r24, r18
     d16:	81 50       	subi	r24, 0x01	; 1
     d18:	f8 01       	movw	r30, r16
     d1a:	80 83       	st	Z, r24
	UBRRH = (BAUD_PRESCALE >> 8);					/* Load UBRRH with upper 8 bit of prescale value */
     d1c:	00 e4       	ldi	r16, 0x40	; 64
     d1e:	10 e0       	ldi	r17, 0x00	; 0
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	9a 81       	ldd	r25, Y+2	; 0x02
     d24:	ab 81       	ldd	r26, Y+3	; 0x03
     d26:	bc 81       	ldd	r27, Y+4	; 0x04
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	aa 1f       	adc	r26, r26
     d2e:	bb 1f       	adc	r27, r27
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	aa 1f       	adc	r26, r26
     d36:	bb 1f       	adc	r27, r27
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	aa 1f       	adc	r26, r26
     d3e:	bb 1f       	adc	r27, r27
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	aa 1f       	adc	r26, r26
     d46:	bb 1f       	adc	r27, r27
     d48:	9c 01       	movw	r18, r24
     d4a:	ad 01       	movw	r20, r26
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	94 e2       	ldi	r25, 0x24	; 36
     d50:	a4 ef       	ldi	r26, 0xF4	; 244
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	bc 01       	movw	r22, r24
     d56:	cd 01       	movw	r24, r26
     d58:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__udivmodsi4>
     d5c:	da 01       	movw	r26, r20
     d5e:	c9 01       	movw	r24, r18
     d60:	01 97       	sbiw	r24, 0x01	; 1
     d62:	a1 09       	sbc	r26, r1
     d64:	b1 09       	sbc	r27, r1
     d66:	89 2f       	mov	r24, r25
     d68:	9a 2f       	mov	r25, r26
     d6a:	ab 2f       	mov	r26, r27
     d6c:	bb 27       	eor	r27, r27
     d6e:	f8 01       	movw	r30, r16
     d70:	80 83       	st	Z, r24
}
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	cf 91       	pop	r28
     d7c:	df 91       	pop	r29
     d7e:	1f 91       	pop	r17
     d80:	0f 91       	pop	r16
     d82:	08 95       	ret

00000d84 <USART_RxChar>:
/*
0x20 --> 0b0123123 // Updating HBRRH = 0x02
0x20 --> 0b1123123 // Updating HCSRC = 0x12
*/
unsigned char USART_RxChar( void )
{
     d84:	df 93       	push	r29
     d86:	cf 93       	push	r28
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
    /* Wait for data to be received */
    while (!(UCSRA & (1<<RXC)));
     d8c:	eb e2       	ldi	r30, 0x2B	; 43
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	88 23       	and	r24, r24
     d94:	dc f7       	brge	.-10     	; 0xd8c <USART_RxChar+0x8>
    /* Get and return received data from buffer */
    return UDR;
     d96:	ec e2       	ldi	r30, 0x2C	; 44
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
}
     d9c:	cf 91       	pop	r28
     d9e:	df 91       	pop	r29
     da0:	08 95       	ret

00000da2 <USART_TxChar>:

void USART_TxChar(char data)						/* Data transmitting function */
{
     da2:	df 93       	push	r29
     da4:	cf 93       	push	r28
     da6:	0f 92       	push	r0
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
     dac:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;										/* Write data to be transmitting in UDR */
     dae:	ec e2       	ldi	r30, 0x2C	; 44
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	80 83       	st	Z, r24
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
     db6:	eb e2       	ldi	r30, 0x2B	; 43
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	88 2f       	mov	r24, r24
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	80 72       	andi	r24, 0x20	; 32
     dc2:	90 70       	andi	r25, 0x00	; 0
     dc4:	00 97       	sbiw	r24, 0x00	; 0
     dc6:	b9 f3       	breq	.-18     	; 0xdb6 <USART_TxChar+0x14>
}
     dc8:	0f 90       	pop	r0
     dca:	cf 91       	pop	r28
     dcc:	df 91       	pop	r29
     dce:	08 95       	ret

00000dd0 <USART_SendString>:

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
     dd0:	df 93       	push	r29
     dd2:	cf 93       	push	r28
     dd4:	00 d0       	rcall	.+0      	; 0xdd6 <USART_SendString+0x6>
     dd6:	00 d0       	rcall	.+0      	; 0xdd8 <USART_SendString+0x8>
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
     ddc:	9c 83       	std	Y+4, r25	; 0x04
     dde:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;																	
     de0:	1a 82       	std	Y+2, r1	; 0x02
     de2:	19 82       	std	Y+1, r1	; 0x01
     de4:	0f c0       	rjmp	.+30     	; 0xe04 <USART_SendString+0x34>
	while (str[i]!=0)
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
     de6:	29 81       	ldd	r18, Y+1	; 0x01
     de8:	3a 81       	ldd	r19, Y+2	; 0x02
     dea:	8b 81       	ldd	r24, Y+3	; 0x03
     dec:	9c 81       	ldd	r25, Y+4	; 0x04
     dee:	fc 01       	movw	r30, r24
     df0:	e2 0f       	add	r30, r18
     df2:	f3 1f       	adc	r31, r19
     df4:	80 81       	ld	r24, Z
     df6:	0e 94 d1 06 	call	0xda2	; 0xda2 <USART_TxChar>
		i++;
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	9a 81       	ldd	r25, Y+2	; 0x02
     dfe:	01 96       	adiw	r24, 0x01	; 1
     e00:	9a 83       	std	Y+2, r25	; 0x02
     e02:	89 83       	std	Y+1, r24	; 0x01
}

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
	int i=0;																	
	while (str[i]!=0)
     e04:	29 81       	ldd	r18, Y+1	; 0x01
     e06:	3a 81       	ldd	r19, Y+2	; 0x02
     e08:	8b 81       	ldd	r24, Y+3	; 0x03
     e0a:	9c 81       	ldd	r25, Y+4	; 0x04
     e0c:	fc 01       	movw	r30, r24
     e0e:	e2 0f       	add	r30, r18
     e10:	f3 1f       	adc	r31, r19
     e12:	80 81       	ld	r24, Z
     e14:	88 23       	and	r24, r24
     e16:	39 f7       	brne	.-50     	; 0xde6 <USART_SendString+0x16>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
}
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	cf 91       	pop	r28
     e22:	df 91       	pop	r29
     e24:	08 95       	ret

00000e26 <USART_RecvString>:

// You have to specify the end of your string

void USART_RecvString(char buffer[]){
     e26:	0f 93       	push	r16
     e28:	1f 93       	push	r17
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <USART_RecvString+0xa>
     e30:	00 d0       	rcall	.+0      	; 0xe32 <USART_RecvString+0xc>
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	9c 83       	std	Y+4, r25	; 0x04
     e38:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
     e3a:	1a 82       	std	Y+2, r1	; 0x02
     e3c:	19 82       	std	Y+1, r1	; 0x01
	while(1){
		buffer[i]=USART_RxChar();
     e3e:	29 81       	ldd	r18, Y+1	; 0x01
     e40:	3a 81       	ldd	r19, Y+2	; 0x02
     e42:	8b 81       	ldd	r24, Y+3	; 0x03
     e44:	9c 81       	ldd	r25, Y+4	; 0x04
     e46:	8c 01       	movw	r16, r24
     e48:	02 0f       	add	r16, r18
     e4a:	13 1f       	adc	r17, r19
     e4c:	0e 94 c2 06 	call	0xd84	; 0xd84 <USART_RxChar>
     e50:	f8 01       	movw	r30, r16
     e52:	80 83       	st	Z, r24
		if(buffer[i] == '\n'){
     e54:	29 81       	ldd	r18, Y+1	; 0x01
     e56:	3a 81       	ldd	r19, Y+2	; 0x02
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	9c 81       	ldd	r25, Y+4	; 0x04
     e5c:	fc 01       	movw	r30, r24
     e5e:	e2 0f       	add	r30, r18
     e60:	f3 1f       	adc	r31, r19
     e62:	80 81       	ld	r24, Z
     e64:	8a 30       	cpi	r24, 0x0A	; 10
     e66:	89 f4       	brne	.+34     	; 0xe8a <USART_RecvString+0x64>
			buffer[i]='\0';
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	9a 81       	ldd	r25, Y+2	; 0x02
     e6c:	2b 81       	ldd	r18, Y+3	; 0x03
     e6e:	3c 81       	ldd	r19, Y+4	; 0x04
     e70:	f9 01       	movw	r30, r18
     e72:	e8 0f       	add	r30, r24
     e74:	f9 1f       	adc	r31, r25
     e76:	10 82       	st	Z, r1
			break;
		}
		i++;
	}
}
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	cf 91       	pop	r28
     e82:	df 91       	pop	r29
     e84:	1f 91       	pop	r17
     e86:	0f 91       	pop	r16
     e88:	08 95       	ret
		buffer[i]=USART_RxChar();
		if(buffer[i] == '\n'){
			buffer[i]='\0';
			break;
		}
		i++;
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	9a 81       	ldd	r25, Y+2	; 0x02
     e8e:	01 96       	adiw	r24, 0x01	; 1
     e90:	9a 83       	std	Y+2, r25	; 0x02
     e92:	89 83       	std	Y+1, r24	; 0x01
     e94:	d4 cf       	rjmp	.-88     	; 0xe3e <USART_RecvString+0x18>

00000e96 <setCallBack_Timer0>:
#include "../../Bit_Math.h"
#include "timer_cfg.h"

void (*p2f)(void);

void setCallBack_Timer0(void (*ptf)(void)){
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	00 d0       	rcall	.+0      	; 0xe9c <setCallBack_Timer0+0x6>
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
     ea0:	9a 83       	std	Y+2, r25	; 0x02
     ea2:	89 83       	std	Y+1, r24	; 0x01
	p2f = ptf;
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	9a 81       	ldd	r25, Y+2	; 0x02
     ea8:	90 93 cf 00 	sts	0x00CF, r25
     eac:	80 93 ce 00 	sts	0x00CE, r24
}
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <timer_init>:

void timer_init(void){
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0; // Set initial value to zero
     ec2:	e2 e5       	ldi	r30, 0x52	; 82
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	10 82       	st	Z, r1

#if TIM0_MODE_SELECT == TIM0_NORMAL_MODE
	CLR_BIT(TCCR0,WGM00);
	CLR_BIT(TCCR0,WGM01);
#elif TIM0_MODE_SELECT == TIM0_CTC_MODE
	CLR_BIT(TCCR0,WGM00);
     ec8:	a3 e5       	ldi	r26, 0x53	; 83
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e3 e5       	ldi	r30, 0x53	; 83
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	8f 7b       	andi	r24, 0xBF	; 191
     ed4:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
     ed6:	a3 e5       	ldi	r26, 0x53	; 83
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e3 e5       	ldi	r30, 0x53	; 83
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	88 60       	ori	r24, 0x08	; 8
     ee2:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,WGM01);
#endif

#if TIM0_PRESCALER_SELECT == TIM0_1024_PRESCALER
	// Set prescaler Fclk/1024
	SET_BIT(TCCR0,CS00);
     ee4:	a3 e5       	ldi	r26, 0x53	; 83
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e3 e5       	ldi	r30, 0x53	; 83
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	81 60       	ori	r24, 0x01	; 1
     ef0:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS01);
     ef2:	a3 e5       	ldi	r26, 0x53	; 83
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e3 e5       	ldi	r30, 0x53	; 83
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	8d 7f       	andi	r24, 0xFD	; 253
     efe:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
     f00:	a3 e5       	ldi	r26, 0x53	; 83
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e3 e5       	ldi	r30, 0x53	; 83
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	84 60       	ori	r24, 0x04	; 4
     f0c:	8c 93       	st	X, r24
	CLR_BIT(TIMSK,OCIE0);
#elif TIM0_INTERRUPT_MODE == TIM0_TOV
	SET_BIT(TIMSK,TOIE0);
	CLR_BIT(TIMSK,OCIE0);
#elif TIM0_INTERRUPT_MODE == TIM0_TOC
	CLR_BIT(TIMSK,TOIE0);
     f0e:	a9 e5       	ldi	r26, 0x59	; 89
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e9 e5       	ldi	r30, 0x59	; 89
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8e 7f       	andi	r24, 0xFE	; 254
     f1a:	8c 93       	st	X, r24
	SET_BIT(TIMSK,OCIE0);
     f1c:	a9 e5       	ldi	r26, 0x59	; 89
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e9 e5       	ldi	r30, 0x59	; 89
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	82 60       	ori	r24, 0x02	; 2
     f28:	8c 93       	st	X, r24
#endif
}
     f2a:	cf 91       	pop	r28
     f2c:	df 91       	pop	r29
     f2e:	08 95       	ret

00000f30 <timer0_setOCR0>:

void timer0_setOCR0(unsigned char ocr_val){
     f30:	df 93       	push	r29
     f32:	cf 93       	push	r28
     f34:	0f 92       	push	r0
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = ocr_val;
     f3c:	ec e5       	ldi	r30, 0x5C	; 92
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	80 83       	st	Z, r24
}
     f44:	0f 90       	pop	r0
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <__vector_10>:

ISR(TIMER0_COMP_vect){
     f4c:	1f 92       	push	r1
     f4e:	0f 92       	push	r0
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	0f 92       	push	r0
     f54:	11 24       	eor	r1, r1
     f56:	2f 93       	push	r18
     f58:	3f 93       	push	r19
     f5a:	4f 93       	push	r20
     f5c:	5f 93       	push	r21
     f5e:	6f 93       	push	r22
     f60:	7f 93       	push	r23
     f62:	8f 93       	push	r24
     f64:	9f 93       	push	r25
     f66:	af 93       	push	r26
     f68:	bf 93       	push	r27
     f6a:	ef 93       	push	r30
     f6c:	ff 93       	push	r31
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
	p2f();
     f76:	e0 91 ce 00 	lds	r30, 0x00CE
     f7a:	f0 91 cf 00 	lds	r31, 0x00CF
     f7e:	09 95       	icall
}
     f80:	cf 91       	pop	r28
     f82:	df 91       	pop	r29
     f84:	ff 91       	pop	r31
     f86:	ef 91       	pop	r30
     f88:	bf 91       	pop	r27
     f8a:	af 91       	pop	r26
     f8c:	9f 91       	pop	r25
     f8e:	8f 91       	pop	r24
     f90:	7f 91       	pop	r23
     f92:	6f 91       	pop	r22
     f94:	5f 91       	pop	r21
     f96:	4f 91       	pop	r20
     f98:	3f 91       	pop	r19
     f9a:	2f 91       	pop	r18
     f9c:	0f 90       	pop	r0
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	0f 90       	pop	r0
     fa2:	1f 90       	pop	r1
     fa4:	18 95       	reti

00000fa6 <__vector_11>:

ISR(TIMER0_OVF_vect){
     fa6:	1f 92       	push	r1
     fa8:	0f 92       	push	r0
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	0f 92       	push	r0
     fae:	11 24       	eor	r1, r1
     fb0:	2f 93       	push	r18
     fb2:	3f 93       	push	r19
     fb4:	4f 93       	push	r20
     fb6:	5f 93       	push	r21
     fb8:	6f 93       	push	r22
     fba:	7f 93       	push	r23
     fbc:	8f 93       	push	r24
     fbe:	9f 93       	push	r25
     fc0:	af 93       	push	r26
     fc2:	bf 93       	push	r27
     fc4:	ef 93       	push	r30
     fc6:	ff 93       	push	r31
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
	p2f();
     fd0:	e0 91 ce 00 	lds	r30, 0x00CE
     fd4:	f0 91 cf 00 	lds	r31, 0x00CF
     fd8:	09 95       	icall
}
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	ff 91       	pop	r31
     fe0:	ef 91       	pop	r30
     fe2:	bf 91       	pop	r27
     fe4:	af 91       	pop	r26
     fe6:	9f 91       	pop	r25
     fe8:	8f 91       	pop	r24
     fea:	7f 91       	pop	r23
     fec:	6f 91       	pop	r22
     fee:	5f 91       	pop	r21
     ff0:	4f 91       	pop	r20
     ff2:	3f 91       	pop	r19
     ff4:	2f 91       	pop	r18
     ff6:	0f 90       	pop	r0
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	0f 90       	pop	r0
     ffc:	1f 90       	pop	r1
     ffe:	18 95       	reti

00001000 <SPI_Init>:
 *  Created on: Oct 23, 2020
 *      Author: Mohamed Abdalla
 */
#include "SPI.h"

void SPI_Init(){
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
#if SPI_MODE == Master
	SET_BIT(SPCR,MSTR);
    1008:	ad e2       	ldi	r26, 0x2D	; 45
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	ed e2       	ldi	r30, 0x2D	; 45
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	80 61       	ori	r24, 0x10	; 16
    1014:	8c 93       	st	X, r24
	CLR_BIT(SPCR,MSTR);
//	SPCR&=~(MSTR<<1);
#endif

#if  SPI_DORD == SPI_MSB_First
	CLR_BIT(SPCR,DORD);
    1016:	ad e2       	ldi	r26, 0x2D	; 45
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	ed e2       	ldi	r30, 0x2D	; 45
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	8f 7d       	andi	r24, 0xDF	; 223
    1022:	8c 93       	st	X, r24
#else
	SET_BIT(SPCR,DORD);
#endif

#if  SPI_CLKPHA_MODE == SPI_CLKPHA_SAMPLE
	CLR_BIT(SPCR,CPHA);
    1024:	ad e2       	ldi	r26, 0x2D	; 45
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	ed e2       	ldi	r30, 0x2D	; 45
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	8b 7f       	andi	r24, 0xFB	; 251
    1030:	8c 93       	st	X, r24
#else
	SET_BIT(SPCR,CPHA);
#endif

#if  SPI_CLKPOL == SPI_CLKPOL_RAISNG
	CLR_BIT(SPCR,CPOL);
    1032:	ad e2       	ldi	r26, 0x2D	; 45
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	ed e2       	ldi	r30, 0x2D	; 45
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	87 7f       	andi	r24, 0xF7	; 247
    103e:	8c 93       	st	X, r24
#define SPI_CLKRATE_DIV8	5
#define SPI_CLKRATE_DIV32	6
#define SPI_CLKRATE_DIV64	7
	 */
#if SPI_CLKRATE_SELECT == SPI_CLKRATE_DIV4
	CLR_BIT(SPCR, SPR0);
    1040:	ad e2       	ldi	r26, 0x2D	; 45
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	ed e2       	ldi	r30, 0x2D	; 45
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	8e 7f       	andi	r24, 0xFE	; 254
    104c:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPR1);
    104e:	ad e2       	ldi	r26, 0x2D	; 45
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	ed e2       	ldi	r30, 0x2D	; 45
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	8d 7f       	andi	r24, 0xFD	; 253
    105a:	8c 93       	st	X, r24
	CLR_BIT(SPSR, SPI2X);
    105c:	ae e2       	ldi	r26, 0x2E	; 46
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	ee e2       	ldi	r30, 0x2E	; 46
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	8e 7f       	andi	r24, 0xFE	; 254
    1068:	8c 93       	st	X, r24
	SET_BIT(SPCR, SPR1);
	CLR_BIT(SPSR, SPI2X);
#endif

#if SPI_ENABLE == Enable
	SET_BIT(SPCR,SPE);
    106a:	ad e2       	ldi	r26, 0x2D	; 45
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	ed e2       	ldi	r30, 0x2D	; 45
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	80 64       	ori	r24, 0x40	; 64
    1076:	8c 93       	st	X, r24
#else
	SPCR &=~(SPE<<1);
#endif

}
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	08 95       	ret

0000107e <SPI_Transceive>:

unsigned char SPI_Transceive(unsigned char data,Channel_Type channel){
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	00 d0       	rcall	.+0      	; 0x1084 <SPI_Transceive+0x6>
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	89 83       	std	Y+1, r24	; 0x01
    108a:	6a 83       	std	Y+2, r22	; 0x02
	Dio_write(channel, Low);
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	60 e0       	ldi	r22, 0x00	; 0
    1090:	0e 94 64 09 	call	0x12c8	; 0x12c8 <Dio_write>
	SPDR = data;
    1094:	ef e2       	ldi	r30, 0x2F	; 47
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	80 83       	st	Z, r24
	while(GET_BIT(SPSR,SPIF) == 0);
    109c:	ee e2       	ldi	r30, 0x2E	; 46
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	88 23       	and	r24, r24
    10a4:	dc f7       	brge	.-10     	; 0x109c <SPI_Transceive+0x1e>
	data = SPDR;
    10a6:	ef e2       	ldi	r30, 0x2F	; 47
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	89 83       	std	Y+1, r24	; 0x01
	Dio_write(channel, High);
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	61 e0       	ldi	r22, 0x01	; 1
    10b2:	0e 94 64 09 	call	0x12c8	; 0x12c8 <Dio_write>
	return data;
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	08 95       	ret

000010c2 <SPI_Receive>:

unsigned char SPI_Receive(unsigned char data){
    10c2:	df 93       	push	r29
    10c4:	cf 93       	push	r28
    10c6:	0f 92       	push	r0
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
    10ce:	ef e2       	ldi	r30, 0x2F	; 47
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	80 83       	st	Z, r24
	while(GET_BIT(SPSR,SPIF) == 0);
    10d6:	ee e2       	ldi	r30, 0x2E	; 46
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	88 23       	and	r24, r24
    10de:	dc f7       	brge	.-10     	; 0x10d6 <SPI_Receive+0x14>
	data = SPDR;
    10e0:	ef e2       	ldi	r30, 0x2F	; 47
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	89 83       	std	Y+1, r24	; 0x01
	return data;
    10e8:	89 81       	ldd	r24, Y+1	; 0x01

}
    10ea:	0f 90       	pop	r0
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	08 95       	ret

000010f2 <init_interrupt>:

void (*p2f0)(void);
void (*p2f1)(void);
void (*p2f2)(void);

void init_interrupt() {
    10f2:	df 93       	push	r29
    10f4:	cf 93       	push	r28
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
#if EXTI_INT0 == ENABLED
	GICR |= (1 << INT0);	// Enable INT0
    10fa:	ab e5       	ldi	r26, 0x5B	; 91
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	eb e5       	ldi	r30, 0x5B	; 91
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	80 64       	ori	r24, 0x40	; 64
    1106:	8c 93       	st	X, r24
#if EXTI_INT0_EDGE == Low_Level
	MCUCR &= ~(1 << ISC01);
	MCUCR &= ~(1 << ISC00);
#elif EXTI_INT0_EDGE == Both_Edges
	MCUCR &=~(1<<ISC01);
    1108:	a5 e5       	ldi	r26, 0x55	; 85
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e5 e5       	ldi	r30, 0x55	; 85
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	8d 7f       	andi	r24, 0xFD	; 253
    1114:	8c 93       	st	X, r24
	MCUCR |=(1<<ISC00);
    1116:	a5 e5       	ldi	r26, 0x55	; 85
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e5 e5       	ldi	r30, 0x55	; 85
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	81 60       	ori	r24, 0x01	; 1
    1122:	8c 93       	st	X, r24
		} else if (EXTI_INT1_EDGE == Raising_Edge) {
			MCUCSR |= (1 << ISC2);
		}
	}

	SREG |= (1 << 7);
    1124:	af e5       	ldi	r26, 0x5F	; 95
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	ef e5       	ldi	r30, 0x5F	; 95
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	80 68       	ori	r24, 0x80	; 128
    1130:	8c 93       	st	X, r24
}
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <Set_CallBack_INT0>:

void Set_CallBack_INT0(void (*p2func)(void)){
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <Set_CallBack_INT0+0x6>
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
    1142:	9a 83       	std	Y+2, r25	; 0x02
    1144:	89 83       	std	Y+1, r24	; 0x01
	p2f0 = p2func;
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	9a 81       	ldd	r25, Y+2	; 0x02
    114a:	90 93 d1 00 	sts	0x00D1, r25
    114e:	80 93 d0 00 	sts	0x00D0, r24
}
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	08 95       	ret

0000115c <Set_CallBack_INT1>:

void Set_CallBack_INT1(void (*p2func)(void)){
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	00 d0       	rcall	.+0      	; 0x1162 <Set_CallBack_INT1+0x6>
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
    1166:	9a 83       	std	Y+2, r25	; 0x02
    1168:	89 83       	std	Y+1, r24	; 0x01
	p2f1 = p2func;
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	9a 81       	ldd	r25, Y+2	; 0x02
    116e:	90 93 d3 00 	sts	0x00D3, r25
    1172:	80 93 d2 00 	sts	0x00D2, r24
}
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <Set_CallBack_INT2>:

void Set_CallBack_INT2(void (*p2func)(void)){
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	00 d0       	rcall	.+0      	; 0x1186 <Set_CallBack_INT2+0x6>
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
    118a:	9a 83       	std	Y+2, r25	; 0x02
    118c:	89 83       	std	Y+1, r24	; 0x01
	p2f2 = p2func;
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	9a 81       	ldd	r25, Y+2	; 0x02
    1192:	90 93 d5 00 	sts	0x00D5, r25
    1196:	80 93 d4 00 	sts	0x00D4, r24
}
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	cf 91       	pop	r28
    11a0:	df 91       	pop	r29
    11a2:	08 95       	ret

000011a4 <__vector_1>:

ISR(INT0_vect){
    11a4:	1f 92       	push	r1
    11a6:	0f 92       	push	r0
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	0f 92       	push	r0
    11ac:	11 24       	eor	r1, r1
    11ae:	2f 93       	push	r18
    11b0:	3f 93       	push	r19
    11b2:	4f 93       	push	r20
    11b4:	5f 93       	push	r21
    11b6:	6f 93       	push	r22
    11b8:	7f 93       	push	r23
    11ba:	8f 93       	push	r24
    11bc:	9f 93       	push	r25
    11be:	af 93       	push	r26
    11c0:	bf 93       	push	r27
    11c2:	ef 93       	push	r30
    11c4:	ff 93       	push	r31
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
	p2f0();
    11ce:	e0 91 d0 00 	lds	r30, 0x00D0
    11d2:	f0 91 d1 00 	lds	r31, 0x00D1
    11d6:	09 95       	icall
}
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	ff 91       	pop	r31
    11de:	ef 91       	pop	r30
    11e0:	bf 91       	pop	r27
    11e2:	af 91       	pop	r26
    11e4:	9f 91       	pop	r25
    11e6:	8f 91       	pop	r24
    11e8:	7f 91       	pop	r23
    11ea:	6f 91       	pop	r22
    11ec:	5f 91       	pop	r21
    11ee:	4f 91       	pop	r20
    11f0:	3f 91       	pop	r19
    11f2:	2f 91       	pop	r18
    11f4:	0f 90       	pop	r0
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	0f 90       	pop	r0
    11fa:	1f 90       	pop	r1
    11fc:	18 95       	reti

000011fe <__vector_2>:

ISR(INT1_vect){
    11fe:	1f 92       	push	r1
    1200:	0f 92       	push	r0
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	0f 92       	push	r0
    1206:	11 24       	eor	r1, r1
    1208:	2f 93       	push	r18
    120a:	3f 93       	push	r19
    120c:	4f 93       	push	r20
    120e:	5f 93       	push	r21
    1210:	6f 93       	push	r22
    1212:	7f 93       	push	r23
    1214:	8f 93       	push	r24
    1216:	9f 93       	push	r25
    1218:	af 93       	push	r26
    121a:	bf 93       	push	r27
    121c:	ef 93       	push	r30
    121e:	ff 93       	push	r31
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
	p2f1();
    1228:	e0 91 d2 00 	lds	r30, 0x00D2
    122c:	f0 91 d3 00 	lds	r31, 0x00D3
    1230:	09 95       	icall
}
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	ff 91       	pop	r31
    1238:	ef 91       	pop	r30
    123a:	bf 91       	pop	r27
    123c:	af 91       	pop	r26
    123e:	9f 91       	pop	r25
    1240:	8f 91       	pop	r24
    1242:	7f 91       	pop	r23
    1244:	6f 91       	pop	r22
    1246:	5f 91       	pop	r21
    1248:	4f 91       	pop	r20
    124a:	3f 91       	pop	r19
    124c:	2f 91       	pop	r18
    124e:	0f 90       	pop	r0
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	0f 90       	pop	r0
    1254:	1f 90       	pop	r1
    1256:	18 95       	reti

00001258 <__vector_3>:

ISR(INT2_vect){
    1258:	1f 92       	push	r1
    125a:	0f 92       	push	r0
    125c:	0f b6       	in	r0, 0x3f	; 63
    125e:	0f 92       	push	r0
    1260:	11 24       	eor	r1, r1
    1262:	2f 93       	push	r18
    1264:	3f 93       	push	r19
    1266:	4f 93       	push	r20
    1268:	5f 93       	push	r21
    126a:	6f 93       	push	r22
    126c:	7f 93       	push	r23
    126e:	8f 93       	push	r24
    1270:	9f 93       	push	r25
    1272:	af 93       	push	r26
    1274:	bf 93       	push	r27
    1276:	ef 93       	push	r30
    1278:	ff 93       	push	r31
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
	p2f2();
    1282:	e0 91 d4 00 	lds	r30, 0x00D4
    1286:	f0 91 d5 00 	lds	r31, 0x00D5
    128a:	09 95       	icall
}
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	ff 91       	pop	r31
    1292:	ef 91       	pop	r30
    1294:	bf 91       	pop	r27
    1296:	af 91       	pop	r26
    1298:	9f 91       	pop	r25
    129a:	8f 91       	pop	r24
    129c:	7f 91       	pop	r23
    129e:	6f 91       	pop	r22
    12a0:	5f 91       	pop	r21
    12a2:	4f 91       	pop	r20
    12a4:	3f 91       	pop	r19
    12a6:	2f 91       	pop	r18
    12a8:	0f 90       	pop	r0
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	0f 90       	pop	r0
    12ae:	1f 90       	pop	r1
    12b0:	18 95       	reti

000012b2 <Dio_read>:
 *      Author: Mohamed Abdalla
 */
#include "Dio.h"


DIO_Level Dio_read(Channel_Type channel) {
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	00 d0       	rcall	.+0      	; 0x12b8 <Dio_read+0x6>
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
    12bc:	89 83       	std	Y+1, r24	; 0x01

}
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	08 95       	ret

000012c8 <Dio_write>:


void Dio_write(Channel_Type channel, DIO_Level level) {
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <Dio_write+0x6>
    12ce:	00 d0       	rcall	.+0      	; 0x12d0 <Dio_write+0x8>
    12d0:	00 d0       	rcall	.+0      	; 0x12d2 <Dio_write+0xa>
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	8b 83       	std	Y+3, r24	; 0x03
    12d8:	6c 83       	std	Y+4, r22	; 0x04
	DIO_Port port = channel / 8;
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	86 95       	lsr	r24
    12de:	86 95       	lsr	r24
    12e0:	86 95       	lsr	r24
    12e2:	8a 83       	std	Y+2, r24	; 0x02
	DIO_Pin pin = channel % 8;
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	87 70       	andi	r24, 0x07	; 7
    12e8:	89 83       	std	Y+1, r24	; 0x01

	switch (port) {
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	3e 83       	std	Y+6, r19	; 0x06
    12f2:	2d 83       	std	Y+5, r18	; 0x05
    12f4:	8d 81       	ldd	r24, Y+5	; 0x05
    12f6:	9e 81       	ldd	r25, Y+6	; 0x06
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	91 05       	cpc	r25, r1
    12fc:	09 f4       	brne	.+2      	; 0x1300 <Dio_write+0x38>
    12fe:	43 c0       	rjmp	.+134    	; 0x1386 <Dio_write+0xbe>
    1300:	2d 81       	ldd	r18, Y+5	; 0x05
    1302:	3e 81       	ldd	r19, Y+6	; 0x06
    1304:	22 30       	cpi	r18, 0x02	; 2
    1306:	31 05       	cpc	r19, r1
    1308:	2c f4       	brge	.+10     	; 0x1314 <Dio_write+0x4c>
    130a:	8d 81       	ldd	r24, Y+5	; 0x05
    130c:	9e 81       	ldd	r25, Y+6	; 0x06
    130e:	00 97       	sbiw	r24, 0x00	; 0
    1310:	71 f0       	breq	.+28     	; 0x132e <Dio_write+0x66>
    1312:	bc c0       	rjmp	.+376    	; 0x148c <Dio_write+0x1c4>
    1314:	2d 81       	ldd	r18, Y+5	; 0x05
    1316:	3e 81       	ldd	r19, Y+6	; 0x06
    1318:	22 30       	cpi	r18, 0x02	; 2
    131a:	31 05       	cpc	r19, r1
    131c:	09 f4       	brne	.+2      	; 0x1320 <Dio_write+0x58>
    131e:	5f c0       	rjmp	.+190    	; 0x13de <Dio_write+0x116>
    1320:	8d 81       	ldd	r24, Y+5	; 0x05
    1322:	9e 81       	ldd	r25, Y+6	; 0x06
    1324:	83 30       	cpi	r24, 0x03	; 3
    1326:	91 05       	cpc	r25, r1
    1328:	09 f4       	brne	.+2      	; 0x132c <Dio_write+0x64>
    132a:	85 c0       	rjmp	.+266    	; 0x1436 <Dio_write+0x16e>
    132c:	af c0       	rjmp	.+350    	; 0x148c <Dio_write+0x1c4>
	case DIO_PortA:
		if (level == High) {
    132e:	8c 81       	ldd	r24, Y+4	; 0x04
    1330:	81 30       	cpi	r24, 0x01	; 1
    1332:	a1 f4       	brne	.+40     	; 0x135c <Dio_write+0x94>
			SET_BIT(PORTA, pin);
    1334:	ab e3       	ldi	r26, 0x3B	; 59
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	eb e3       	ldi	r30, 0x3B	; 59
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	48 2f       	mov	r20, r24
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	02 2e       	mov	r0, r18
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <Dio_write+0x8a>
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	0a 94       	dec	r0
    1354:	e2 f7       	brpl	.-8      	; 0x134e <Dio_write+0x86>
    1356:	84 2b       	or	r24, r20
    1358:	8c 93       	st	X, r24
    135a:	98 c0       	rjmp	.+304    	; 0x148c <Dio_write+0x1c4>
		} else {
			CLR_BIT(PORTA, pin);
    135c:	ab e3       	ldi	r26, 0x3B	; 59
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	eb e3       	ldi	r30, 0x3B	; 59
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	48 2f       	mov	r20, r24
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	02 2e       	mov	r0, r18
    1374:	02 c0       	rjmp	.+4      	; 0x137a <Dio_write+0xb2>
    1376:	88 0f       	add	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	0a 94       	dec	r0
    137c:	e2 f7       	brpl	.-8      	; 0x1376 <Dio_write+0xae>
    137e:	80 95       	com	r24
    1380:	84 23       	and	r24, r20
    1382:	8c 93       	st	X, r24
    1384:	83 c0       	rjmp	.+262    	; 0x148c <Dio_write+0x1c4>
		}
		break;
	case DIO_PortB:
		if (level == High) {
    1386:	8c 81       	ldd	r24, Y+4	; 0x04
    1388:	81 30       	cpi	r24, 0x01	; 1
    138a:	a1 f4       	brne	.+40     	; 0x13b4 <Dio_write+0xec>
			SET_BIT(PORTB, pin);
    138c:	a8 e3       	ldi	r26, 0x38	; 56
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e8 e3       	ldi	r30, 0x38	; 56
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	48 2f       	mov	r20, r24
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	02 2e       	mov	r0, r18
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <Dio_write+0xe2>
    13a6:	88 0f       	add	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	0a 94       	dec	r0
    13ac:	e2 f7       	brpl	.-8      	; 0x13a6 <Dio_write+0xde>
    13ae:	84 2b       	or	r24, r20
    13b0:	8c 93       	st	X, r24
    13b2:	6c c0       	rjmp	.+216    	; 0x148c <Dio_write+0x1c4>
		} else {
			CLR_BIT(PORTB, pin);
    13b4:	a8 e3       	ldi	r26, 0x38	; 56
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e8 e3       	ldi	r30, 0x38	; 56
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	48 2f       	mov	r20, r24
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	02 2e       	mov	r0, r18
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <Dio_write+0x10a>
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	0a 94       	dec	r0
    13d4:	e2 f7       	brpl	.-8      	; 0x13ce <Dio_write+0x106>
    13d6:	80 95       	com	r24
    13d8:	84 23       	and	r24, r20
    13da:	8c 93       	st	X, r24
    13dc:	57 c0       	rjmp	.+174    	; 0x148c <Dio_write+0x1c4>
		}
		break;
	case DIO_PortC:
		if (level == High) {
    13de:	8c 81       	ldd	r24, Y+4	; 0x04
    13e0:	81 30       	cpi	r24, 0x01	; 1
    13e2:	a1 f4       	brne	.+40     	; 0x140c <Dio_write+0x144>
			SET_BIT(PORTC, pin);
    13e4:	a5 e3       	ldi	r26, 0x35	; 53
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e5 e3       	ldi	r30, 0x35	; 53
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	48 2f       	mov	r20, r24
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	02 2e       	mov	r0, r18
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <Dio_write+0x13a>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	0a 94       	dec	r0
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <Dio_write+0x136>
    1406:	84 2b       	or	r24, r20
    1408:	8c 93       	st	X, r24
    140a:	40 c0       	rjmp	.+128    	; 0x148c <Dio_write+0x1c4>
		} else {
			CLR_BIT(PORTC, pin);
    140c:	a5 e3       	ldi	r26, 0x35	; 53
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e5 e3       	ldi	r30, 0x35	; 53
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	48 2f       	mov	r20, r24
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 2e       	mov	r0, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <Dio_write+0x162>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <Dio_write+0x15e>
    142e:	80 95       	com	r24
    1430:	84 23       	and	r24, r20
    1432:	8c 93       	st	X, r24
    1434:	2b c0       	rjmp	.+86     	; 0x148c <Dio_write+0x1c4>
		}
		break;
	case DIO_PortD:
		if (level == High) {
    1436:	8c 81       	ldd	r24, Y+4	; 0x04
    1438:	81 30       	cpi	r24, 0x01	; 1
    143a:	a1 f4       	brne	.+40     	; 0x1464 <Dio_write+0x19c>
			SET_BIT(PORTD, pin);
    143c:	a2 e3       	ldi	r26, 0x32	; 50
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e2 e3       	ldi	r30, 0x32	; 50
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	48 2f       	mov	r20, r24
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	02 2e       	mov	r0, r18
    1454:	02 c0       	rjmp	.+4      	; 0x145a <Dio_write+0x192>
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	0a 94       	dec	r0
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <Dio_write+0x18e>
    145e:	84 2b       	or	r24, r20
    1460:	8c 93       	st	X, r24
    1462:	14 c0       	rjmp	.+40     	; 0x148c <Dio_write+0x1c4>
		} else {
			CLR_BIT(PORTD, pin);
    1464:	a2 e3       	ldi	r26, 0x32	; 50
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e2 e3       	ldi	r30, 0x32	; 50
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	48 2f       	mov	r20, r24
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	02 2e       	mov	r0, r18
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <Dio_write+0x1ba>
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	0a 94       	dec	r0
    1484:	e2 f7       	brpl	.-8      	; 0x147e <Dio_write+0x1b6>
    1486:	80 95       	com	r24
    1488:	84 23       	and	r24, r20
    148a:	8c 93       	st	X, r24
		break;
	default:
		break;
	}

}
    148c:	26 96       	adiw	r28, 0x06	; 6
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	08 95       	ret

0000149e <Dio_init>:
		{DIO_PortD, DIO_Pin3, Output, Low},
		{DIO_PortD, DIO_Pin4, Output, Low},
		{DIO_PortD, DIO_Pin5, Output, Low}
};

void Dio_init(void){
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <Dio_init+0x6>
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <Dio_init+0x8>
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
	int count = sizeof(Pin_Cfgs)/ sizeof(Pin_Cfgs[0]);
    14aa:	88 e1       	ldi	r24, 0x18	; 24
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	9c 83       	std	Y+4, r25	; 0x04
    14b0:	8b 83       	std	Y+3, r24	; 0x03
	int i = 0;
    14b2:	1a 82       	std	Y+2, r1	; 0x02
    14b4:	19 82       	std	Y+1, r1	; 0x01
	for(i = 0; i < count ; i++){
    14b6:	1a 82       	std	Y+2, r1	; 0x02
    14b8:	19 82       	std	Y+1, r1	; 0x01
    14ba:	57 c1       	rjmp	.+686    	; 0x176a <Dio_init+0x2cc>
		if(Pin_Cfgs[i].PinPort == DIO_PortA){ //DDRA
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	9a 81       	ldd	r25, Y+2	; 0x02
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	fc 01       	movw	r30, r24
    14ca:	e8 59       	subi	r30, 0x98	; 152
    14cc:	ff 4f       	sbci	r31, 0xFF	; 255
    14ce:	80 81       	ld	r24, Z
    14d0:	88 23       	and	r24, r24
    14d2:	09 f0       	breq	.+2      	; 0x14d6 <Dio_init+0x38>
    14d4:	48 c0       	rjmp	.+144    	; 0x1566 <Dio_init+0xc8>
			if(Pin_Cfgs[i].PinDir == Output){
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	9a 81       	ldd	r25, Y+2	; 0x02
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	01 96       	adiw	r24, 0x01	; 1
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	fc 01       	movw	r30, r24
    14e6:	e8 59       	subi	r30, 0x98	; 152
    14e8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ea:	80 81       	ld	r24, Z
    14ec:	81 30       	cpi	r24, 0x01	; 1
    14ee:	e9 f4       	brne	.+58     	; 0x152a <Dio_init+0x8c>
				SET_BIT(DDRA,Pin_Cfgs[i].Pin);
    14f0:	aa e3       	ldi	r26, 0x3A	; 58
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	ea e3       	ldi	r30, 0x3A	; 58
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	48 2f       	mov	r20, r24
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1500:	88 0f       	add	r24, r24
    1502:	99 1f       	adc	r25, r25
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	fc 01       	movw	r30, r24
    150a:	e7 59       	subi	r30, 0x97	; 151
    150c:	ff 4f       	sbci	r31, 0xFF	; 255
    150e:	80 81       	ld	r24, Z
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	02 2e       	mov	r0, r18
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <Dio_init+0x82>
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	0a 94       	dec	r0
    1522:	e2 f7       	brpl	.-8      	; 0x151c <Dio_init+0x7e>
    1524:	84 2b       	or	r24, r20
    1526:	8c 93       	st	X, r24
    1528:	1b c1       	rjmp	.+566    	; 0x1760 <Dio_init+0x2c2>
			}
			else{
				CLR_BIT(DDRA,Pin_Cfgs[i].Pin);
    152a:	aa e3       	ldi	r26, 0x3A	; 58
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	ea e3       	ldi	r30, 0x3A	; 58
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	48 2f       	mov	r20, r24
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	9a 81       	ldd	r25, Y+2	; 0x02
    153a:	88 0f       	add	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	fc 01       	movw	r30, r24
    1544:	e7 59       	subi	r30, 0x97	; 151
    1546:	ff 4f       	sbci	r31, 0xFF	; 255
    1548:	80 81       	ld	r24, Z
    154a:	28 2f       	mov	r18, r24
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	02 2e       	mov	r0, r18
    1554:	02 c0       	rjmp	.+4      	; 0x155a <Dio_init+0xbc>
    1556:	88 0f       	add	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	0a 94       	dec	r0
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <Dio_init+0xb8>
    155e:	80 95       	com	r24
    1560:	84 23       	and	r24, r20
    1562:	8c 93       	st	X, r24
    1564:	fd c0       	rjmp	.+506    	; 0x1760 <Dio_init+0x2c2>
			}
		}
		else if(Pin_Cfgs[i].PinPort == DIO_PortB){ //DDRB
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	9a 81       	ldd	r25, Y+2	; 0x02
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	fc 01       	movw	r30, r24
    1574:	e8 59       	subi	r30, 0x98	; 152
    1576:	ff 4f       	sbci	r31, 0xFF	; 255
    1578:	80 81       	ld	r24, Z
    157a:	81 30       	cpi	r24, 0x01	; 1
    157c:	09 f0       	breq	.+2      	; 0x1580 <Dio_init+0xe2>
    157e:	48 c0       	rjmp	.+144    	; 0x1610 <Dio_init+0x172>
			if(Pin_Cfgs[i].PinDir == Output){
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	9a 81       	ldd	r25, Y+2	; 0x02
    1584:	88 0f       	add	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	01 96       	adiw	r24, 0x01	; 1
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	fc 01       	movw	r30, r24
    1590:	e8 59       	subi	r30, 0x98	; 152
    1592:	ff 4f       	sbci	r31, 0xFF	; 255
    1594:	80 81       	ld	r24, Z
    1596:	81 30       	cpi	r24, 0x01	; 1
    1598:	e9 f4       	brne	.+58     	; 0x15d4 <Dio_init+0x136>
				SET_BIT(DDRB,Pin_Cfgs[i].Pin);
    159a:	a7 e3       	ldi	r26, 0x37	; 55
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	e7 e3       	ldi	r30, 0x37	; 55
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	48 2f       	mov	r20, r24
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	9a 81       	ldd	r25, Y+2	; 0x02
    15aa:	88 0f       	add	r24, r24
    15ac:	99 1f       	adc	r25, r25
    15ae:	88 0f       	add	r24, r24
    15b0:	99 1f       	adc	r25, r25
    15b2:	fc 01       	movw	r30, r24
    15b4:	e7 59       	subi	r30, 0x97	; 151
    15b6:	ff 4f       	sbci	r31, 0xFF	; 255
    15b8:	80 81       	ld	r24, Z
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	02 2e       	mov	r0, r18
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <Dio_init+0x12c>
    15c6:	88 0f       	add	r24, r24
    15c8:	99 1f       	adc	r25, r25
    15ca:	0a 94       	dec	r0
    15cc:	e2 f7       	brpl	.-8      	; 0x15c6 <Dio_init+0x128>
    15ce:	84 2b       	or	r24, r20
    15d0:	8c 93       	st	X, r24
    15d2:	c6 c0       	rjmp	.+396    	; 0x1760 <Dio_init+0x2c2>
			}
			else{
				CLR_BIT(DDRB,Pin_Cfgs[i].Pin);
    15d4:	a7 e3       	ldi	r26, 0x37	; 55
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e7 e3       	ldi	r30, 0x37	; 55
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	48 2f       	mov	r20, r24
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	9a 81       	ldd	r25, Y+2	; 0x02
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	fc 01       	movw	r30, r24
    15ee:	e7 59       	subi	r30, 0x97	; 151
    15f0:	ff 4f       	sbci	r31, 0xFF	; 255
    15f2:	80 81       	ld	r24, Z
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	02 2e       	mov	r0, r18
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <Dio_init+0x166>
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	0a 94       	dec	r0
    1606:	e2 f7       	brpl	.-8      	; 0x1600 <Dio_init+0x162>
    1608:	80 95       	com	r24
    160a:	84 23       	and	r24, r20
    160c:	8c 93       	st	X, r24
    160e:	a8 c0       	rjmp	.+336    	; 0x1760 <Dio_init+0x2c2>
			}
		}
		else if(Pin_Cfgs[i].PinPort == DIO_PortC){ //DDRC
    1610:	89 81       	ldd	r24, Y+1	; 0x01
    1612:	9a 81       	ldd	r25, Y+2	; 0x02
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	fc 01       	movw	r30, r24
    161e:	e8 59       	subi	r30, 0x98	; 152
    1620:	ff 4f       	sbci	r31, 0xFF	; 255
    1622:	80 81       	ld	r24, Z
    1624:	82 30       	cpi	r24, 0x02	; 2
    1626:	09 f0       	breq	.+2      	; 0x162a <Dio_init+0x18c>
    1628:	48 c0       	rjmp	.+144    	; 0x16ba <Dio_init+0x21c>
			if(Pin_Cfgs[i].PinDir == Output){
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	9a 81       	ldd	r25, Y+2	; 0x02
    162e:	88 0f       	add	r24, r24
    1630:	99 1f       	adc	r25, r25
    1632:	01 96       	adiw	r24, 0x01	; 1
    1634:	88 0f       	add	r24, r24
    1636:	99 1f       	adc	r25, r25
    1638:	fc 01       	movw	r30, r24
    163a:	e8 59       	subi	r30, 0x98	; 152
    163c:	ff 4f       	sbci	r31, 0xFF	; 255
    163e:	80 81       	ld	r24, Z
    1640:	81 30       	cpi	r24, 0x01	; 1
    1642:	e9 f4       	brne	.+58     	; 0x167e <Dio_init+0x1e0>
				SET_BIT(DDRC,Pin_Cfgs[i].Pin);
    1644:	a4 e3       	ldi	r26, 0x34	; 52
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	e4 e3       	ldi	r30, 0x34	; 52
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	48 2f       	mov	r20, r24
    1650:	89 81       	ldd	r24, Y+1	; 0x01
    1652:	9a 81       	ldd	r25, Y+2	; 0x02
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	88 0f       	add	r24, r24
    165a:	99 1f       	adc	r25, r25
    165c:	fc 01       	movw	r30, r24
    165e:	e7 59       	subi	r30, 0x97	; 151
    1660:	ff 4f       	sbci	r31, 0xFF	; 255
    1662:	80 81       	ld	r24, Z
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	02 2e       	mov	r0, r18
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <Dio_init+0x1d6>
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	0a 94       	dec	r0
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <Dio_init+0x1d2>
    1678:	84 2b       	or	r24, r20
    167a:	8c 93       	st	X, r24
    167c:	71 c0       	rjmp	.+226    	; 0x1760 <Dio_init+0x2c2>
			}
			else{
				CLR_BIT(DDRC,Pin_Cfgs[i].Pin);
    167e:	a4 e3       	ldi	r26, 0x34	; 52
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e4 e3       	ldi	r30, 0x34	; 52
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	48 2f       	mov	r20, r24
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	9a 81       	ldd	r25, Y+2	; 0x02
    168e:	88 0f       	add	r24, r24
    1690:	99 1f       	adc	r25, r25
    1692:	88 0f       	add	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	fc 01       	movw	r30, r24
    1698:	e7 59       	subi	r30, 0x97	; 151
    169a:	ff 4f       	sbci	r31, 0xFF	; 255
    169c:	80 81       	ld	r24, Z
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	02 2e       	mov	r0, r18
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <Dio_init+0x210>
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	0a 94       	dec	r0
    16b0:	e2 f7       	brpl	.-8      	; 0x16aa <Dio_init+0x20c>
    16b2:	80 95       	com	r24
    16b4:	84 23       	and	r24, r20
    16b6:	8c 93       	st	X, r24
    16b8:	53 c0       	rjmp	.+166    	; 0x1760 <Dio_init+0x2c2>
			}
		}
		else if(Pin_Cfgs[i].PinPort == DIO_PortD){ //DDRD
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	9a 81       	ldd	r25, Y+2	; 0x02
    16be:	88 0f       	add	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	fc 01       	movw	r30, r24
    16c8:	e8 59       	subi	r30, 0x98	; 152
    16ca:	ff 4f       	sbci	r31, 0xFF	; 255
    16cc:	80 81       	ld	r24, Z
    16ce:	83 30       	cpi	r24, 0x03	; 3
    16d0:	09 f0       	breq	.+2      	; 0x16d4 <Dio_init+0x236>
    16d2:	46 c0       	rjmp	.+140    	; 0x1760 <Dio_init+0x2c2>
			if(Pin_Cfgs[i].PinDir == Output){
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	9a 81       	ldd	r25, Y+2	; 0x02
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	01 96       	adiw	r24, 0x01	; 1
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	fc 01       	movw	r30, r24
    16e4:	e8 59       	subi	r30, 0x98	; 152
    16e6:	ff 4f       	sbci	r31, 0xFF	; 255
    16e8:	80 81       	ld	r24, Z
    16ea:	81 30       	cpi	r24, 0x01	; 1
    16ec:	e9 f4       	brne	.+58     	; 0x1728 <Dio_init+0x28a>
				SET_BIT(DDRD,Pin_Cfgs[i].Pin);
    16ee:	a1 e3       	ldi	r26, 0x31	; 49
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e1 e3       	ldi	r30, 0x31	; 49
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	48 2f       	mov	r20, r24
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	9a 81       	ldd	r25, Y+2	; 0x02
    16fe:	88 0f       	add	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	88 0f       	add	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	fc 01       	movw	r30, r24
    1708:	e7 59       	subi	r30, 0x97	; 151
    170a:	ff 4f       	sbci	r31, 0xFF	; 255
    170c:	80 81       	ld	r24, Z
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	02 2e       	mov	r0, r18
    1718:	02 c0       	rjmp	.+4      	; 0x171e <Dio_init+0x280>
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	0a 94       	dec	r0
    1720:	e2 f7       	brpl	.-8      	; 0x171a <Dio_init+0x27c>
    1722:	84 2b       	or	r24, r20
    1724:	8c 93       	st	X, r24
    1726:	1c c0       	rjmp	.+56     	; 0x1760 <Dio_init+0x2c2>
			}
			else{
				CLR_BIT(DDRD,Pin_Cfgs[i].Pin);
    1728:	a1 e3       	ldi	r26, 0x31	; 49
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	e1 e3       	ldi	r30, 0x31	; 49
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	48 2f       	mov	r20, r24
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	9a 81       	ldd	r25, Y+2	; 0x02
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	fc 01       	movw	r30, r24
    1742:	e7 59       	subi	r30, 0x97	; 151
    1744:	ff 4f       	sbci	r31, 0xFF	; 255
    1746:	80 81       	ld	r24, Z
    1748:	28 2f       	mov	r18, r24
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <Dio_init+0x2b8>
    1752:	88 0f       	add	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	2a 95       	dec	r18
    1758:	e2 f7       	brpl	.-8      	; 0x1752 <Dio_init+0x2b4>
    175a:	80 95       	com	r24
    175c:	84 23       	and	r24, r20
    175e:	8c 93       	st	X, r24
};

void Dio_init(void){
	int count = sizeof(Pin_Cfgs)/ sizeof(Pin_Cfgs[0]);
	int i = 0;
	for(i = 0; i < count ; i++){
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	9a 81       	ldd	r25, Y+2	; 0x02
    1764:	01 96       	adiw	r24, 0x01	; 1
    1766:	9a 83       	std	Y+2, r25	; 0x02
    1768:	89 83       	std	Y+1, r24	; 0x01
    176a:	29 81       	ldd	r18, Y+1	; 0x01
    176c:	3a 81       	ldd	r19, Y+2	; 0x02
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	9c 81       	ldd	r25, Y+4	; 0x04
    1772:	28 17       	cp	r18, r24
    1774:	39 07       	cpc	r19, r25
    1776:	0c f4       	brge	.+2      	; 0x177a <Dio_init+0x2dc>
    1778:	a1 ce       	rjmp	.-702    	; 0x14bc <Dio_init+0x1e>
			else{
				CLR_BIT(DDRD,Pin_Cfgs[i].Pin);
			}
		}
	}
}
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	08 95       	ret

00001788 <adc_init>:
 *      Author: Mohamed Abdalla
 */
#include "adc.h"
#include "adc_cfg.h"

void adc_init(void){
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
	// Enable ADC
#if ADC_ENABLE == ENABLE
	SET_BIT(ADCSRA,ADEN);
    1790:	a6 e2       	ldi	r26, 0x26	; 38
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e6 e2       	ldi	r30, 0x26	; 38
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	80 68       	ori	r24, 0x80	; 128
    179c:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,REFS1);
#elif ADC_SOURCE == ADC_SOURCE_AVCC
	SET_BIT(ADMUX,REFS0);
	CLR_BIT(ADMUX,REFS1);
#elif ADC_SOURCE == ADC_SOURCE_VREF
	SET_BIT(ADMUX,REFS0);
    179e:	a7 e2       	ldi	r26, 0x27	; 39
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e7 e2       	ldi	r30, 0x27	; 39
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	80 64       	ori	r24, 0x40	; 64
    17aa:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS1);
    17ac:	a7 e2       	ldi	r26, 0x27	; 39
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e7 e2       	ldi	r30, 0x27	; 39
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	80 68       	ori	r24, 0x80	; 128
    17b8:	8c 93       	st	X, r24
#endif

	// Set Prescaler division factor fclk/128
	SET_BIT(ADCSRA,ADPS0);
    17ba:	a6 e2       	ldi	r26, 0x26	; 38
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e6 e2       	ldi	r30, 0x26	; 38
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	81 60       	ori	r24, 0x01	; 1
    17c6:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
    17c8:	a6 e2       	ldi	r26, 0x26	; 38
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	e6 e2       	ldi	r30, 0x26	; 38
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	82 60       	ori	r24, 0x02	; 2
    17d4:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS2);
    17d6:	a6 e2       	ldi	r26, 0x26	; 38
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	e6 e2       	ldi	r30, 0x26	; 38
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	84 60       	ori	r24, 0x04	; 4
    17e2:	8c 93       	st	X, r24
}
    17e4:	cf 91       	pop	r28
    17e6:	df 91       	pop	r29
    17e8:	08 95       	ret

000017ea <adc_read>:

uint16 adc_read(uint8 channel){
    17ea:	df 93       	push	r29
    17ec:	cf 93       	push	r28
    17ee:	0f 92       	push	r0
    17f0:	cd b7       	in	r28, 0x3d	; 61
    17f2:	de b7       	in	r29, 0x3e	; 62
    17f4:	89 83       	std	Y+1, r24	; 0x01
	ADMUX = (ADMUX & 0b11100000) | channel;
    17f6:	a7 e2       	ldi	r26, 0x27	; 39
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e7 e2       	ldi	r30, 0x27	; 39
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	98 2f       	mov	r25, r24
    1802:	90 7e       	andi	r25, 0xE0	; 224
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	89 2b       	or	r24, r25
    1808:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADSC);	//Start conversion
    180a:	a6 e2       	ldi	r26, 0x26	; 38
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	e6 e2       	ldi	r30, 0x26	; 38
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	80 64       	ori	r24, 0x40	; 64
    1816:	8c 93       	st	X, r24
	while(GET_BIT(ADCSRA,ADIF)== 0); // Wait for conversion to finish
    1818:	e6 e2       	ldi	r30, 0x26	; 38
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	82 95       	swap	r24
    1820:	8f 70       	andi	r24, 0x0F	; 15
    1822:	88 2f       	mov	r24, r24
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	81 70       	andi	r24, 0x01	; 1
    1828:	90 70       	andi	r25, 0x00	; 0
    182a:	00 97       	sbiw	r24, 0x00	; 0
    182c:	a9 f3       	breq	.-22     	; 0x1818 <adc_read+0x2e>
	SET_BIT(ADCSRA,ADIF);
    182e:	a6 e2       	ldi	r26, 0x26	; 38
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e6 e2       	ldi	r30, 0x26	; 38
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	80 61       	ori	r24, 0x10	; 16
    183a:	8c 93       	st	X, r24
	return ADC;
    183c:	e4 e2       	ldi	r30, 0x24	; 36
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	91 81       	ldd	r25, Z+1	; 0x01
}
    1844:	0f 90       	pop	r0
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	08 95       	ret

0000184c <LCD_Init>:

#include "../../MCAL/Dio/Dio.h"
#include <util/delay.h>
#include "lcd.h"

void LCD_Init(void){
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
    1854:	2e 97       	sbiw	r28, 0x0e	; 14
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	f8 94       	cli
    185a:	de bf       	out	0x3e, r29	; 62
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	cd bf       	out	0x3d, r28	; 61
	Dio_write(RW,Low);
    1860:	8a e0       	ldi	r24, 0x0A	; 10
    1862:	60 e0       	ldi	r22, 0x00	; 0
    1864:	0e 94 64 09 	call	0x12c8	; 0x12c8 <Dio_write>
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	a0 ea       	ldi	r26, 0xA0	; 160
    186e:	b1 e4       	ldi	r27, 0x41	; 65
    1870:	8b 87       	std	Y+11, r24	; 0x0b
    1872:	9c 87       	std	Y+12, r25	; 0x0c
    1874:	ad 87       	std	Y+13, r26	; 0x0d
    1876:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1878:	6b 85       	ldd	r22, Y+11	; 0x0b
    187a:	7c 85       	ldd	r23, Y+12	; 0x0c
    187c:	8d 85       	ldd	r24, Y+13	; 0x0d
    187e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	4a e7       	ldi	r20, 0x7A	; 122
    1886:	55 e4       	ldi	r21, 0x45	; 69
    1888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	8f 83       	std	Y+7, r24	; 0x07
    1892:	98 87       	std	Y+8, r25	; 0x08
    1894:	a9 87       	std	Y+9, r26	; 0x09
    1896:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1898:	6f 81       	ldd	r22, Y+7	; 0x07
    189a:	78 85       	ldd	r23, Y+8	; 0x08
    189c:	89 85       	ldd	r24, Y+9	; 0x09
    189e:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	40 e8       	ldi	r20, 0x80	; 128
    18a6:	5f e3       	ldi	r21, 0x3F	; 63
    18a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18ac:	88 23       	and	r24, r24
    18ae:	2c f4       	brge	.+10     	; 0x18ba <LCD_Init+0x6e>
		__ticks = 1;
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	9e 83       	std	Y+6, r25	; 0x06
    18b6:	8d 83       	std	Y+5, r24	; 0x05
    18b8:	3f c0       	rjmp	.+126    	; 0x1938 <LCD_Init+0xec>
	else if (__tmp > 65535)
    18ba:	6f 81       	ldd	r22, Y+7	; 0x07
    18bc:	78 85       	ldd	r23, Y+8	; 0x08
    18be:	89 85       	ldd	r24, Y+9	; 0x09
    18c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	3f ef       	ldi	r19, 0xFF	; 255
    18c6:	4f e7       	ldi	r20, 0x7F	; 127
    18c8:	57 e4       	ldi	r21, 0x47	; 71
    18ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18ce:	18 16       	cp	r1, r24
    18d0:	4c f5       	brge	.+82     	; 0x1924 <LCD_Init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    18d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    18d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	40 e2       	ldi	r20, 0x20	; 32
    18e0:	51 e4       	ldi	r21, 0x41	; 65
    18e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	bc 01       	movw	r22, r24
    18ec:	cd 01       	movw	r24, r26
    18ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	9e 83       	std	Y+6, r25	; 0x06
    18f8:	8d 83       	std	Y+5, r24	; 0x05
    18fa:	0f c0       	rjmp	.+30     	; 0x191a <LCD_Init+0xce>
    18fc:	80 e9       	ldi	r24, 0x90	; 144
    18fe:	91 e0       	ldi	r25, 0x01	; 1
    1900:	9c 83       	std	Y+4, r25	; 0x04
    1902:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	9c 81       	ldd	r25, Y+4	; 0x04
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	f1 f7       	brne	.-4      	; 0x1908 <LCD_Init+0xbc>
    190c:	9c 83       	std	Y+4, r25	; 0x04
    190e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1910:	8d 81       	ldd	r24, Y+5	; 0x05
    1912:	9e 81       	ldd	r25, Y+6	; 0x06
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	9e 83       	std	Y+6, r25	; 0x06
    1918:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    191a:	8d 81       	ldd	r24, Y+5	; 0x05
    191c:	9e 81       	ldd	r25, Y+6	; 0x06
    191e:	00 97       	sbiw	r24, 0x00	; 0
    1920:	69 f7       	brne	.-38     	; 0x18fc <LCD_Init+0xb0>
    1922:	14 c0       	rjmp	.+40     	; 0x194c <LCD_Init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1924:	6f 81       	ldd	r22, Y+7	; 0x07
    1926:	78 85       	ldd	r23, Y+8	; 0x08
    1928:	89 85       	ldd	r24, Y+9	; 0x09
    192a:	9a 85       	ldd	r25, Y+10	; 0x0a
    192c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	9e 83       	std	Y+6, r25	; 0x06
    1936:	8d 83       	std	Y+5, r24	; 0x05
    1938:	8d 81       	ldd	r24, Y+5	; 0x05
    193a:	9e 81       	ldd	r25, Y+6	; 0x06
    193c:	9a 83       	std	Y+2, r25	; 0x02
    193e:	89 83       	std	Y+1, r24	; 0x01
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	9a 81       	ldd	r25, Y+2	; 0x02
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	f1 f7       	brne	.-4      	; 0x1944 <LCD_Init+0xf8>
    1948:	9a 83       	std	Y+2, r25	; 0x02
    194a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);		// LCD Power ON delay

	LCD_Command(0x28); // Select 4 Bit Mode, 5*7 dots
    194c:	88 e2       	ldi	r24, 0x28	; 40
    194e:	0e 94 21 10 	call	0x2042	; 0x2042 <LCD_Command>
	LCD_Command(0x0F);	// Display On, Cursor Blinking
    1952:	8f e0       	ldi	r24, 0x0F	; 15
    1954:	0e 94 21 10 	call	0x2042	; 0x2042 <LCD_Command>
	LCD_Command(0x06);	// Entry Mode Increment cursor to right
    1958:	86 e0       	ldi	r24, 0x06	; 6
    195a:	0e 94 21 10 	call	0x2042	; 0x2042 <LCD_Command>
	LCD_Command(0x01);	// Clear Display
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	0e 94 21 10 	call	0x2042	; 0x2042 <LCD_Command>
}
    1964:	2e 96       	adiw	r28, 0x0e	; 14
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	f8 94       	cli
    196a:	de bf       	out	0x3e, r29	; 62
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	cd bf       	out	0x3d, r28	; 61
    1970:	cf 91       	pop	r28
    1972:	df 91       	pop	r29
    1974:	08 95       	ret

00001976 <LCD_Char>:

void LCD_Char(char data){
    1976:	0f 93       	push	r16
    1978:	1f 93       	push	r17
    197a:	df 93       	push	r29
    197c:	cf 93       	push	r28
    197e:	cd b7       	in	r28, 0x3d	; 61
    1980:	de b7       	in	r29, 0x3e	; 62
    1982:	c7 55       	subi	r28, 0x57	; 87
    1984:	d0 40       	sbci	r29, 0x00	; 0
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	f8 94       	cli
    198a:	de bf       	out	0x3e, r29	; 62
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	cd bf       	out	0x3d, r28	; 61
    1990:	fe 01       	movw	r30, r28
    1992:	e9 5a       	subi	r30, 0xA9	; 169
    1994:	ff 4f       	sbci	r31, 0xFF	; 255
    1996:	80 83       	st	Z, r24
	Dio_write(RS,High);
    1998:	89 e0       	ldi	r24, 0x09	; 9
    199a:	61 e0       	ldi	r22, 0x01	; 1
    199c:	0e 94 64 09 	call	0x12c8	; 0x12c8 <Dio_write>
	Dio_write(RW,Low);
    19a0:	8a e0       	ldi	r24, 0x0A	; 10
    19a2:	60 e0       	ldi	r22, 0x00	; 0
    19a4:	0e 94 64 09 	call	0x12c8	; 0x12c8 <Dio_write>
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xf0);
    19a8:	ab e3       	ldi	r26, 0x3B	; 59
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	eb e3       	ldi	r30, 0x3B	; 59
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	98 2f       	mov	r25, r24
    19b4:	9f 70       	andi	r25, 0x0F	; 15
    19b6:	fe 01       	movw	r30, r28
    19b8:	e9 5a       	subi	r30, 0xA9	; 169
    19ba:	ff 4f       	sbci	r31, 0xFF	; 255
    19bc:	80 81       	ld	r24, Z
    19be:	80 7f       	andi	r24, 0xF0	; 240
    19c0:	89 2b       	or	r24, r25
    19c2:	8c 93       	st	X, r24
	Dio_write(E,High);
    19c4:	8b e0       	ldi	r24, 0x0B	; 11
    19c6:	61 e0       	ldi	r22, 0x01	; 1
    19c8:	0e 94 64 09 	call	0x12c8	; 0x12c8 <Dio_write>
    19cc:	fe 01       	movw	r30, r28
    19ce:	ed 5a       	subi	r30, 0xAD	; 173
    19d0:	ff 4f       	sbci	r31, 0xFF	; 255
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	a0 e2       	ldi	r26, 0x20	; 32
    19d8:	b1 e4       	ldi	r27, 0x41	; 65
    19da:	80 83       	st	Z, r24
    19dc:	91 83       	std	Z+1, r25	; 0x01
    19de:	a2 83       	std	Z+2, r26	; 0x02
    19e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19e2:	8e 01       	movw	r16, r28
    19e4:	01 5b       	subi	r16, 0xB1	; 177
    19e6:	1f 4f       	sbci	r17, 0xFF	; 255
    19e8:	fe 01       	movw	r30, r28
    19ea:	ed 5a       	subi	r30, 0xAD	; 173
    19ec:	ff 4f       	sbci	r31, 0xFF	; 255
    19ee:	60 81       	ld	r22, Z
    19f0:	71 81       	ldd	r23, Z+1	; 0x01
    19f2:	82 81       	ldd	r24, Z+2	; 0x02
    19f4:	93 81       	ldd	r25, Z+3	; 0x03
    19f6:	2b ea       	ldi	r18, 0xAB	; 171
    19f8:	3a ea       	ldi	r19, 0xAA	; 170
    19fa:	4a ea       	ldi	r20, 0xAA	; 170
    19fc:	50 e4       	ldi	r21, 0x40	; 64
    19fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	f8 01       	movw	r30, r16
    1a08:	80 83       	st	Z, r24
    1a0a:	91 83       	std	Z+1, r25	; 0x01
    1a0c:	a2 83       	std	Z+2, r26	; 0x02
    1a0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a10:	fe 01       	movw	r30, r28
    1a12:	e1 5b       	subi	r30, 0xB1	; 177
    1a14:	ff 4f       	sbci	r31, 0xFF	; 255
    1a16:	60 81       	ld	r22, Z
    1a18:	71 81       	ldd	r23, Z+1	; 0x01
    1a1a:	82 81       	ldd	r24, Z+2	; 0x02
    1a1c:	93 81       	ldd	r25, Z+3	; 0x03
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	40 e8       	ldi	r20, 0x80	; 128
    1a24:	5f e3       	ldi	r21, 0x3F	; 63
    1a26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a2a:	88 23       	and	r24, r24
    1a2c:	34 f4       	brge	.+12     	; 0x1a3a <LCD_Char+0xc4>
		__ticks = 1;
    1a2e:	fe 01       	movw	r30, r28
    1a30:	e2 5b       	subi	r30, 0xB2	; 178
    1a32:	ff 4f       	sbci	r31, 0xFF	; 255
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	80 83       	st	Z, r24
    1a38:	e0 c0       	rjmp	.+448    	; 0x1bfa <LCD_Char+0x284>
	else if (__tmp > 255)
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	e1 5b       	subi	r30, 0xB1	; 177
    1a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a40:	60 81       	ld	r22, Z
    1a42:	71 81       	ldd	r23, Z+1	; 0x01
    1a44:	82 81       	ldd	r24, Z+2	; 0x02
    1a46:	93 81       	ldd	r25, Z+3	; 0x03
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	4f e7       	ldi	r20, 0x7F	; 127
    1a4e:	53 e4       	ldi	r21, 0x43	; 67
    1a50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a54:	18 16       	cp	r1, r24
    1a56:	0c f0       	brlt	.+2      	; 0x1a5a <LCD_Char+0xe4>
    1a58:	c0 c0       	rjmp	.+384    	; 0x1bda <LCD_Char+0x264>
	{
		_delay_ms(__us / 1000.0);
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	ed 5a       	subi	r30, 0xAD	; 173
    1a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a60:	60 81       	ld	r22, Z
    1a62:	71 81       	ldd	r23, Z+1	; 0x01
    1a64:	82 81       	ldd	r24, Z+2	; 0x02
    1a66:	93 81       	ldd	r25, Z+3	; 0x03
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	4a e7       	ldi	r20, 0x7A	; 122
    1a6e:	54 e4       	ldi	r21, 0x44	; 68
    1a70:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	fe 01       	movw	r30, r28
    1a7a:	e6 5b       	subi	r30, 0xB6	; 182
    1a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7e:	80 83       	st	Z, r24
    1a80:	91 83       	std	Z+1, r25	; 0x01
    1a82:	a2 83       	std	Z+2, r26	; 0x02
    1a84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a86:	8e 01       	movw	r16, r28
    1a88:	0a 5b       	subi	r16, 0xBA	; 186
    1a8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a8c:	fe 01       	movw	r30, r28
    1a8e:	e6 5b       	subi	r30, 0xB6	; 182
    1a90:	ff 4f       	sbci	r31, 0xFF	; 255
    1a92:	60 81       	ld	r22, Z
    1a94:	71 81       	ldd	r23, Z+1	; 0x01
    1a96:	82 81       	ldd	r24, Z+2	; 0x02
    1a98:	93 81       	ldd	r25, Z+3	; 0x03
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	4a e7       	ldi	r20, 0x7A	; 122
    1aa0:	55 e4       	ldi	r21, 0x45	; 69
    1aa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	f8 01       	movw	r30, r16
    1aac:	80 83       	st	Z, r24
    1aae:	91 83       	std	Z+1, r25	; 0x01
    1ab0:	a2 83       	std	Z+2, r26	; 0x02
    1ab2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	ea 5b       	subi	r30, 0xBA	; 186
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	60 81       	ld	r22, Z
    1abc:	71 81       	ldd	r23, Z+1	; 0x01
    1abe:	82 81       	ldd	r24, Z+2	; 0x02
    1ac0:	93 81       	ldd	r25, Z+3	; 0x03
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	40 e8       	ldi	r20, 0x80	; 128
    1ac8:	5f e3       	ldi	r21, 0x3F	; 63
    1aca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ace:	88 23       	and	r24, r24
    1ad0:	44 f4       	brge	.+16     	; 0x1ae2 <LCD_Char+0x16c>
		__ticks = 1;
    1ad2:	fe 01       	movw	r30, r28
    1ad4:	ec 5b       	subi	r30, 0xBC	; 188
    1ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	91 83       	std	Z+1, r25	; 0x01
    1ade:	80 83       	st	Z, r24
    1ae0:	64 c0       	rjmp	.+200    	; 0x1baa <LCD_Char+0x234>
	else if (__tmp > 65535)
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	ea 5b       	subi	r30, 0xBA	; 186
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	60 81       	ld	r22, Z
    1aea:	71 81       	ldd	r23, Z+1	; 0x01
    1aec:	82 81       	ldd	r24, Z+2	; 0x02
    1aee:	93 81       	ldd	r25, Z+3	; 0x03
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	3f ef       	ldi	r19, 0xFF	; 255
    1af4:	4f e7       	ldi	r20, 0x7F	; 127
    1af6:	57 e4       	ldi	r21, 0x47	; 71
    1af8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1afc:	18 16       	cp	r1, r24
    1afe:	0c f0       	brlt	.+2      	; 0x1b02 <LCD_Char+0x18c>
    1b00:	43 c0       	rjmp	.+134    	; 0x1b88 <LCD_Char+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b02:	fe 01       	movw	r30, r28
    1b04:	e6 5b       	subi	r30, 0xB6	; 182
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	60 81       	ld	r22, Z
    1b0a:	71 81       	ldd	r23, Z+1	; 0x01
    1b0c:	82 81       	ldd	r24, Z+2	; 0x02
    1b0e:	93 81       	ldd	r25, Z+3	; 0x03
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	40 e2       	ldi	r20, 0x20	; 32
    1b16:	51 e4       	ldi	r21, 0x41	; 65
    1b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	8e 01       	movw	r16, r28
    1b22:	0c 5b       	subi	r16, 0xBC	; 188
    1b24:	1f 4f       	sbci	r17, 0xFF	; 255
    1b26:	bc 01       	movw	r22, r24
    1b28:	cd 01       	movw	r24, r26
    1b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	f8 01       	movw	r30, r16
    1b34:	91 83       	std	Z+1, r25	; 0x01
    1b36:	80 83       	st	Z, r24
    1b38:	1f c0       	rjmp	.+62     	; 0x1b78 <LCD_Char+0x202>
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	ee 5b       	subi	r30, 0xBE	; 190
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	80 e9       	ldi	r24, 0x90	; 144
    1b42:	91 e0       	ldi	r25, 0x01	; 1
    1b44:	91 83       	std	Z+1, r25	; 0x01
    1b46:	80 83       	st	Z, r24
    1b48:	fe 01       	movw	r30, r28
    1b4a:	ee 5b       	subi	r30, 0xBE	; 190
    1b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4e:	80 81       	ld	r24, Z
    1b50:	91 81       	ldd	r25, Z+1	; 0x01
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	f1 f7       	brne	.-4      	; 0x1b52 <LCD_Char+0x1dc>
    1b56:	fe 01       	movw	r30, r28
    1b58:	ee 5b       	subi	r30, 0xBE	; 190
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	91 83       	std	Z+1, r25	; 0x01
    1b5e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b60:	de 01       	movw	r26, r28
    1b62:	ac 5b       	subi	r26, 0xBC	; 188
    1b64:	bf 4f       	sbci	r27, 0xFF	; 255
    1b66:	fe 01       	movw	r30, r28
    1b68:	ec 5b       	subi	r30, 0xBC	; 188
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	80 81       	ld	r24, Z
    1b6e:	91 81       	ldd	r25, Z+1	; 0x01
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	11 96       	adiw	r26, 0x01	; 1
    1b74:	9c 93       	st	X, r25
    1b76:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b78:	fe 01       	movw	r30, r28
    1b7a:	ec 5b       	subi	r30, 0xBC	; 188
    1b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7e:	80 81       	ld	r24, Z
    1b80:	91 81       	ldd	r25, Z+1	; 0x01
    1b82:	00 97       	sbiw	r24, 0x00	; 0
    1b84:	d1 f6       	brne	.-76     	; 0x1b3a <LCD_Char+0x1c4>
    1b86:	42 c0       	rjmp	.+132    	; 0x1c0c <LCD_Char+0x296>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b88:	8e 01       	movw	r16, r28
    1b8a:	0c 5b       	subi	r16, 0xBC	; 188
    1b8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b8e:	fe 01       	movw	r30, r28
    1b90:	ea 5b       	subi	r30, 0xBA	; 186
    1b92:	ff 4f       	sbci	r31, 0xFF	; 255
    1b94:	60 81       	ld	r22, Z
    1b96:	71 81       	ldd	r23, Z+1	; 0x01
    1b98:	82 81       	ldd	r24, Z+2	; 0x02
    1b9a:	93 81       	ldd	r25, Z+3	; 0x03
    1b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	f8 01       	movw	r30, r16
    1ba6:	91 83       	std	Z+1, r25	; 0x01
    1ba8:	80 83       	st	Z, r24
    1baa:	de 01       	movw	r26, r28
    1bac:	a0 5c       	subi	r26, 0xC0	; 192
    1bae:	bf 4f       	sbci	r27, 0xFF	; 255
    1bb0:	fe 01       	movw	r30, r28
    1bb2:	ec 5b       	subi	r30, 0xBC	; 188
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	80 81       	ld	r24, Z
    1bb8:	91 81       	ldd	r25, Z+1	; 0x01
    1bba:	11 96       	adiw	r26, 0x01	; 1
    1bbc:	9c 93       	st	X, r25
    1bbe:	8e 93       	st	-X, r24
    1bc0:	fe 01       	movw	r30, r28
    1bc2:	e0 5c       	subi	r30, 0xC0	; 192
    1bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc6:	80 81       	ld	r24, Z
    1bc8:	91 81       	ldd	r25, Z+1	; 0x01
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	f1 f7       	brne	.-4      	; 0x1bca <LCD_Char+0x254>
    1bce:	fe 01       	movw	r30, r28
    1bd0:	e0 5c       	subi	r30, 0xC0	; 192
    1bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd4:	91 83       	std	Z+1, r25	; 0x01
    1bd6:	80 83       	st	Z, r24
    1bd8:	19 c0       	rjmp	.+50     	; 0x1c0c <LCD_Char+0x296>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bda:	8e 01       	movw	r16, r28
    1bdc:	02 5b       	subi	r16, 0xB2	; 178
    1bde:	1f 4f       	sbci	r17, 0xFF	; 255
    1be0:	fe 01       	movw	r30, r28
    1be2:	e1 5b       	subi	r30, 0xB1	; 177
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	60 81       	ld	r22, Z
    1be8:	71 81       	ldd	r23, Z+1	; 0x01
    1bea:	82 81       	ldd	r24, Z+2	; 0x02
    1bec:	93 81       	ldd	r25, Z+3	; 0x03
    1bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	f8 01       	movw	r30, r16
    1bf8:	80 83       	st	Z, r24
    1bfa:	fe 01       	movw	r30, r28
    1bfc:	e2 5b       	subi	r30, 0xB2	; 178
    1bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1c00:	80 81       	ld	r24, Z
    1c02:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c04:	8f ad       	ldd	r24, Y+63	; 0x3f
    1c06:	8a 95       	dec	r24
    1c08:	f1 f7       	brne	.-4      	; 0x1c06 <LCD_Char+0x290>
    1c0a:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(10);
	Dio_write(E,Low);
    1c0c:	8b e0       	ldi	r24, 0x0B	; 11
    1c0e:	60 e0       	ldi	r22, 0x00	; 0
    1c10:	0e 94 64 09 	call	0x12c8	; 0x12c8 <Dio_write>
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	a8 e4       	ldi	r26, 0x48	; 72
    1c1a:	b3 e4       	ldi	r27, 0x43	; 67
    1c1c:	8b af       	std	Y+59, r24	; 0x3b
    1c1e:	9c af       	std	Y+60, r25	; 0x3c
    1c20:	ad af       	std	Y+61, r26	; 0x3d
    1c22:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c24:	6b ad       	ldd	r22, Y+59	; 0x3b
    1c26:	7c ad       	ldd	r23, Y+60	; 0x3c
    1c28:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c2a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c2c:	2b ea       	ldi	r18, 0xAB	; 171
    1c2e:	3a ea       	ldi	r19, 0xAA	; 170
    1c30:	4a ea       	ldi	r20, 0xAA	; 170
    1c32:	50 e4       	ldi	r21, 0x40	; 64
    1c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	8f ab       	std	Y+55, r24	; 0x37
    1c3e:	98 af       	std	Y+56, r25	; 0x38
    1c40:	a9 af       	std	Y+57, r26	; 0x39
    1c42:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1c44:	6f a9       	ldd	r22, Y+55	; 0x37
    1c46:	78 ad       	ldd	r23, Y+56	; 0x38
    1c48:	89 ad       	ldd	r24, Y+57	; 0x39
    1c4a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	40 e8       	ldi	r20, 0x80	; 128
    1c52:	5f e3       	ldi	r21, 0x3F	; 63
    1c54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c58:	88 23       	and	r24, r24
    1c5a:	1c f4       	brge	.+6      	; 0x1c62 <LCD_Char+0x2ec>
		__ticks = 1;
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	8e ab       	std	Y+54, r24	; 0x36
    1c60:	91 c0       	rjmp	.+290    	; 0x1d84 <LCD_Char+0x40e>
	else if (__tmp > 255)
    1c62:	6f a9       	ldd	r22, Y+55	; 0x37
    1c64:	78 ad       	ldd	r23, Y+56	; 0x38
    1c66:	89 ad       	ldd	r24, Y+57	; 0x39
    1c68:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	4f e7       	ldi	r20, 0x7F	; 127
    1c70:	53 e4       	ldi	r21, 0x43	; 67
    1c72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c76:	18 16       	cp	r1, r24
    1c78:	0c f0       	brlt	.+2      	; 0x1c7c <LCD_Char+0x306>
    1c7a:	7b c0       	rjmp	.+246    	; 0x1d72 <LCD_Char+0x3fc>
	{
		_delay_ms(__us / 1000.0);
    1c7c:	6b ad       	ldd	r22, Y+59	; 0x3b
    1c7e:	7c ad       	ldd	r23, Y+60	; 0x3c
    1c80:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c82:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	4a e7       	ldi	r20, 0x7A	; 122
    1c8a:	54 e4       	ldi	r21, 0x44	; 68
    1c8c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	8a ab       	std	Y+50, r24	; 0x32
    1c96:	9b ab       	std	Y+51, r25	; 0x33
    1c98:	ac ab       	std	Y+52, r26	; 0x34
    1c9a:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9c:	6a a9       	ldd	r22, Y+50	; 0x32
    1c9e:	7b a9       	ldd	r23, Y+51	; 0x33
    1ca0:	8c a9       	ldd	r24, Y+52	; 0x34
    1ca2:	9d a9       	ldd	r25, Y+53	; 0x35
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	4a e7       	ldi	r20, 0x7A	; 122
    1caa:	55 e4       	ldi	r21, 0x45	; 69
    1cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	8e a7       	std	Y+46, r24	; 0x2e
    1cb6:	9f a7       	std	Y+47, r25	; 0x2f
    1cb8:	a8 ab       	std	Y+48, r26	; 0x30
    1cba:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1cbc:	6e a5       	ldd	r22, Y+46	; 0x2e
    1cbe:	7f a5       	ldd	r23, Y+47	; 0x2f
    1cc0:	88 a9       	ldd	r24, Y+48	; 0x30
    1cc2:	99 a9       	ldd	r25, Y+49	; 0x31
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e8       	ldi	r20, 0x80	; 128
    1cca:	5f e3       	ldi	r21, 0x3F	; 63
    1ccc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cd0:	88 23       	and	r24, r24
    1cd2:	2c f4       	brge	.+10     	; 0x1cde <LCD_Char+0x368>
		__ticks = 1;
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	9d a7       	std	Y+45, r25	; 0x2d
    1cda:	8c a7       	std	Y+44, r24	; 0x2c
    1cdc:	3f c0       	rjmp	.+126    	; 0x1d5c <LCD_Char+0x3e6>
	else if (__tmp > 65535)
    1cde:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ce0:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ce2:	88 a9       	ldd	r24, Y+48	; 0x30
    1ce4:	99 a9       	ldd	r25, Y+49	; 0x31
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	3f ef       	ldi	r19, 0xFF	; 255
    1cea:	4f e7       	ldi	r20, 0x7F	; 127
    1cec:	57 e4       	ldi	r21, 0x47	; 71
    1cee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cf2:	18 16       	cp	r1, r24
    1cf4:	4c f5       	brge	.+82     	; 0x1d48 <LCD_Char+0x3d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf6:	6a a9       	ldd	r22, Y+50	; 0x32
    1cf8:	7b a9       	ldd	r23, Y+51	; 0x33
    1cfa:	8c a9       	ldd	r24, Y+52	; 0x34
    1cfc:	9d a9       	ldd	r25, Y+53	; 0x35
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	40 e2       	ldi	r20, 0x20	; 32
    1d04:	51 e4       	ldi	r21, 0x41	; 65
    1d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	bc 01       	movw	r22, r24
    1d10:	cd 01       	movw	r24, r26
    1d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	9d a7       	std	Y+45, r25	; 0x2d
    1d1c:	8c a7       	std	Y+44, r24	; 0x2c
    1d1e:	0f c0       	rjmp	.+30     	; 0x1d3e <LCD_Char+0x3c8>
    1d20:	80 e9       	ldi	r24, 0x90	; 144
    1d22:	91 e0       	ldi	r25, 0x01	; 1
    1d24:	9b a7       	std	Y+43, r25	; 0x2b
    1d26:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d28:	8a a5       	ldd	r24, Y+42	; 0x2a
    1d2a:	9b a5       	ldd	r25, Y+43	; 0x2b
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	f1 f7       	brne	.-4      	; 0x1d2c <LCD_Char+0x3b6>
    1d30:	9b a7       	std	Y+43, r25	; 0x2b
    1d32:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d34:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d36:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d38:	01 97       	sbiw	r24, 0x01	; 1
    1d3a:	9d a7       	std	Y+45, r25	; 0x2d
    1d3c:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d3e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d40:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d42:	00 97       	sbiw	r24, 0x00	; 0
    1d44:	69 f7       	brne	.-38     	; 0x1d20 <LCD_Char+0x3aa>
    1d46:	24 c0       	rjmp	.+72     	; 0x1d90 <LCD_Char+0x41a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d48:	6e a5       	ldd	r22, Y+46	; 0x2e
    1d4a:	7f a5       	ldd	r23, Y+47	; 0x2f
    1d4c:	88 a9       	ldd	r24, Y+48	; 0x30
    1d4e:	99 a9       	ldd	r25, Y+49	; 0x31
    1d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	9d a7       	std	Y+45, r25	; 0x2d
    1d5a:	8c a7       	std	Y+44, r24	; 0x2c
    1d5c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d5e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d60:	99 a7       	std	Y+41, r25	; 0x29
    1d62:	88 a7       	std	Y+40, r24	; 0x28
    1d64:	88 a5       	ldd	r24, Y+40	; 0x28
    1d66:	99 a5       	ldd	r25, Y+41	; 0x29
    1d68:	01 97       	sbiw	r24, 0x01	; 1
    1d6a:	f1 f7       	brne	.-4      	; 0x1d68 <LCD_Char+0x3f2>
    1d6c:	99 a7       	std	Y+41, r25	; 0x29
    1d6e:	88 a7       	std	Y+40, r24	; 0x28
    1d70:	0f c0       	rjmp	.+30     	; 0x1d90 <LCD_Char+0x41a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d72:	6f a9       	ldd	r22, Y+55	; 0x37
    1d74:	78 ad       	ldd	r23, Y+56	; 0x38
    1d76:	89 ad       	ldd	r24, Y+57	; 0x39
    1d78:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	8e ab       	std	Y+54, r24	; 0x36
    1d84:	8e a9       	ldd	r24, Y+54	; 0x36
    1d86:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d88:	8f a1       	ldd	r24, Y+39	; 0x27
    1d8a:	8a 95       	dec	r24
    1d8c:	f1 f7       	brne	.-4      	; 0x1d8a <LCD_Char+0x414>
    1d8e:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4);
    1d90:	ab e3       	ldi	r26, 0x3B	; 59
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	eb e3       	ldi	r30, 0x3B	; 59
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	2f 70       	andi	r18, 0x0F	; 15
    1d9e:	fe 01       	movw	r30, r28
    1da0:	e9 5a       	subi	r30, 0xA9	; 169
    1da2:	ff 4f       	sbci	r31, 0xFF	; 255
    1da4:	80 81       	ld	r24, Z
    1da6:	88 2f       	mov	r24, r24
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	82 95       	swap	r24
    1dac:	92 95       	swap	r25
    1dae:	90 7f       	andi	r25, 0xF0	; 240
    1db0:	98 27       	eor	r25, r24
    1db2:	80 7f       	andi	r24, 0xF0	; 240
    1db4:	98 27       	eor	r25, r24
    1db6:	82 2b       	or	r24, r18
    1db8:	8c 93       	st	X, r24
	Dio_write(E,High);
    1dba:	8b e0       	ldi	r24, 0x0B	; 11
    1dbc:	61 e0       	ldi	r22, 0x01	; 1
    1dbe:	0e 94 64 09 	call	0x12c8	; 0x12c8 <Dio_write>
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	a0 e2       	ldi	r26, 0x20	; 32
    1dc8:	b1 e4       	ldi	r27, 0x41	; 65
    1dca:	8b a3       	std	Y+35, r24	; 0x23
    1dcc:	9c a3       	std	Y+36, r25	; 0x24
    1dce:	ad a3       	std	Y+37, r26	; 0x25
    1dd0:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1dd2:	6b a1       	ldd	r22, Y+35	; 0x23
    1dd4:	7c a1       	ldd	r23, Y+36	; 0x24
    1dd6:	8d a1       	ldd	r24, Y+37	; 0x25
    1dd8:	9e a1       	ldd	r25, Y+38	; 0x26
    1dda:	2b ea       	ldi	r18, 0xAB	; 171
    1ddc:	3a ea       	ldi	r19, 0xAA	; 170
    1dde:	4a ea       	ldi	r20, 0xAA	; 170
    1de0:	50 e4       	ldi	r21, 0x40	; 64
    1de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	8f 8f       	std	Y+31, r24	; 0x1f
    1dec:	98 a3       	std	Y+32, r25	; 0x20
    1dee:	a9 a3       	std	Y+33, r26	; 0x21
    1df0:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1df2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1df4:	78 a1       	ldd	r23, Y+32	; 0x20
    1df6:	89 a1       	ldd	r24, Y+33	; 0x21
    1df8:	9a a1       	ldd	r25, Y+34	; 0x22
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	40 e8       	ldi	r20, 0x80	; 128
    1e00:	5f e3       	ldi	r21, 0x3F	; 63
    1e02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e06:	88 23       	and	r24, r24
    1e08:	1c f4       	brge	.+6      	; 0x1e10 <LCD_Char+0x49a>
		__ticks = 1;
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	8e 8f       	std	Y+30, r24	; 0x1e
    1e0e:	91 c0       	rjmp	.+290    	; 0x1f32 <LCD_Char+0x5bc>
	else if (__tmp > 255)
    1e10:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e12:	78 a1       	ldd	r23, Y+32	; 0x20
    1e14:	89 a1       	ldd	r24, Y+33	; 0x21
    1e16:	9a a1       	ldd	r25, Y+34	; 0x22
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	4f e7       	ldi	r20, 0x7F	; 127
    1e1e:	53 e4       	ldi	r21, 0x43	; 67
    1e20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e24:	18 16       	cp	r1, r24
    1e26:	0c f0       	brlt	.+2      	; 0x1e2a <LCD_Char+0x4b4>
    1e28:	7b c0       	rjmp	.+246    	; 0x1f20 <LCD_Char+0x5aa>
	{
		_delay_ms(__us / 1000.0);
    1e2a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e2c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e2e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e30:	9e a1       	ldd	r25, Y+38	; 0x26
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	4a e7       	ldi	r20, 0x7A	; 122
    1e38:	54 e4       	ldi	r21, 0x44	; 68
    1e3a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	8a 8f       	std	Y+26, r24	; 0x1a
    1e44:	9b 8f       	std	Y+27, r25	; 0x1b
    1e46:	ac 8f       	std	Y+28, r26	; 0x1c
    1e48:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e4a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1e4c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1e4e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e50:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	4a e7       	ldi	r20, 0x7A	; 122
    1e58:	55 e4       	ldi	r21, 0x45	; 69
    1e5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	8e 8b       	std	Y+22, r24	; 0x16
    1e64:	9f 8b       	std	Y+23, r25	; 0x17
    1e66:	a8 8f       	std	Y+24, r26	; 0x18
    1e68:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1e6a:	6e 89       	ldd	r22, Y+22	; 0x16
    1e6c:	7f 89       	ldd	r23, Y+23	; 0x17
    1e6e:	88 8d       	ldd	r24, Y+24	; 0x18
    1e70:	99 8d       	ldd	r25, Y+25	; 0x19
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	40 e8       	ldi	r20, 0x80	; 128
    1e78:	5f e3       	ldi	r21, 0x3F	; 63
    1e7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e7e:	88 23       	and	r24, r24
    1e80:	2c f4       	brge	.+10     	; 0x1e8c <LCD_Char+0x516>
		__ticks = 1;
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	9d 8b       	std	Y+21, r25	; 0x15
    1e88:	8c 8b       	std	Y+20, r24	; 0x14
    1e8a:	3f c0       	rjmp	.+126    	; 0x1f0a <LCD_Char+0x594>
	else if (__tmp > 65535)
    1e8c:	6e 89       	ldd	r22, Y+22	; 0x16
    1e8e:	7f 89       	ldd	r23, Y+23	; 0x17
    1e90:	88 8d       	ldd	r24, Y+24	; 0x18
    1e92:	99 8d       	ldd	r25, Y+25	; 0x19
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	3f ef       	ldi	r19, 0xFF	; 255
    1e98:	4f e7       	ldi	r20, 0x7F	; 127
    1e9a:	57 e4       	ldi	r21, 0x47	; 71
    1e9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ea0:	18 16       	cp	r1, r24
    1ea2:	4c f5       	brge	.+82     	; 0x1ef6 <LCD_Char+0x580>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1ea6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1ea8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1eaa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	40 e2       	ldi	r20, 0x20	; 32
    1eb2:	51 e4       	ldi	r21, 0x41	; 65
    1eb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	bc 01       	movw	r22, r24
    1ebe:	cd 01       	movw	r24, r26
    1ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	9d 8b       	std	Y+21, r25	; 0x15
    1eca:	8c 8b       	std	Y+20, r24	; 0x14
    1ecc:	0f c0       	rjmp	.+30     	; 0x1eec <LCD_Char+0x576>
    1ece:	80 e9       	ldi	r24, 0x90	; 144
    1ed0:	91 e0       	ldi	r25, 0x01	; 1
    1ed2:	9b 8b       	std	Y+19, r25	; 0x13
    1ed4:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ed6:	8a 89       	ldd	r24, Y+18	; 0x12
    1ed8:	9b 89       	ldd	r25, Y+19	; 0x13
    1eda:	01 97       	sbiw	r24, 0x01	; 1
    1edc:	f1 f7       	brne	.-4      	; 0x1eda <LCD_Char+0x564>
    1ede:	9b 8b       	std	Y+19, r25	; 0x13
    1ee0:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee2:	8c 89       	ldd	r24, Y+20	; 0x14
    1ee4:	9d 89       	ldd	r25, Y+21	; 0x15
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	9d 8b       	std	Y+21, r25	; 0x15
    1eea:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eec:	8c 89       	ldd	r24, Y+20	; 0x14
    1eee:	9d 89       	ldd	r25, Y+21	; 0x15
    1ef0:	00 97       	sbiw	r24, 0x00	; 0
    1ef2:	69 f7       	brne	.-38     	; 0x1ece <LCD_Char+0x558>
    1ef4:	24 c0       	rjmp	.+72     	; 0x1f3e <LCD_Char+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef6:	6e 89       	ldd	r22, Y+22	; 0x16
    1ef8:	7f 89       	ldd	r23, Y+23	; 0x17
    1efa:	88 8d       	ldd	r24, Y+24	; 0x18
    1efc:	99 8d       	ldd	r25, Y+25	; 0x19
    1efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	9d 8b       	std	Y+21, r25	; 0x15
    1f08:	8c 8b       	std	Y+20, r24	; 0x14
    1f0a:	8c 89       	ldd	r24, Y+20	; 0x14
    1f0c:	9d 89       	ldd	r25, Y+21	; 0x15
    1f0e:	99 8b       	std	Y+17, r25	; 0x11
    1f10:	88 8b       	std	Y+16, r24	; 0x10
    1f12:	88 89       	ldd	r24, Y+16	; 0x10
    1f14:	99 89       	ldd	r25, Y+17	; 0x11
    1f16:	01 97       	sbiw	r24, 0x01	; 1
    1f18:	f1 f7       	brne	.-4      	; 0x1f16 <LCD_Char+0x5a0>
    1f1a:	99 8b       	std	Y+17, r25	; 0x11
    1f1c:	88 8b       	std	Y+16, r24	; 0x10
    1f1e:	0f c0       	rjmp	.+30     	; 0x1f3e <LCD_Char+0x5c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f20:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1f22:	78 a1       	ldd	r23, Y+32	; 0x20
    1f24:	89 a1       	ldd	r24, Y+33	; 0x21
    1f26:	9a a1       	ldd	r25, Y+34	; 0x22
    1f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	8e 8f       	std	Y+30, r24	; 0x1e
    1f32:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f34:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f36:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f38:	8a 95       	dec	r24
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <LCD_Char+0x5c2>
    1f3c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(10);
	Dio_write(E,Low);
    1f3e:	8b e0       	ldi	r24, 0x0B	; 11
    1f40:	60 e0       	ldi	r22, 0x00	; 0
    1f42:	0e 94 64 09 	call	0x12c8	; 0x12c8 <Dio_write>
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	a0 e2       	ldi	r26, 0x20	; 32
    1f4c:	b1 e4       	ldi	r27, 0x41	; 65
    1f4e:	8b 87       	std	Y+11, r24	; 0x0b
    1f50:	9c 87       	std	Y+12, r25	; 0x0c
    1f52:	ad 87       	std	Y+13, r26	; 0x0d
    1f54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	4a e7       	ldi	r20, 0x7A	; 122
    1f64:	55 e4       	ldi	r21, 0x45	; 69
    1f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	8f 83       	std	Y+7, r24	; 0x07
    1f70:	98 87       	std	Y+8, r25	; 0x08
    1f72:	a9 87       	std	Y+9, r26	; 0x09
    1f74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f76:	6f 81       	ldd	r22, Y+7	; 0x07
    1f78:	78 85       	ldd	r23, Y+8	; 0x08
    1f7a:	89 85       	ldd	r24, Y+9	; 0x09
    1f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	40 e8       	ldi	r20, 0x80	; 128
    1f84:	5f e3       	ldi	r21, 0x3F	; 63
    1f86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f8a:	88 23       	and	r24, r24
    1f8c:	2c f4       	brge	.+10     	; 0x1f98 <LCD_Char+0x622>
		__ticks = 1;
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	9e 83       	std	Y+6, r25	; 0x06
    1f94:	8d 83       	std	Y+5, r24	; 0x05
    1f96:	3f c0       	rjmp	.+126    	; 0x2016 <LCD_Char+0x6a0>
	else if (__tmp > 65535)
    1f98:	6f 81       	ldd	r22, Y+7	; 0x07
    1f9a:	78 85       	ldd	r23, Y+8	; 0x08
    1f9c:	89 85       	ldd	r24, Y+9	; 0x09
    1f9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	3f ef       	ldi	r19, 0xFF	; 255
    1fa4:	4f e7       	ldi	r20, 0x7F	; 127
    1fa6:	57 e4       	ldi	r21, 0x47	; 71
    1fa8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fac:	18 16       	cp	r1, r24
    1fae:	4c f5       	brge	.+82     	; 0x2002 <LCD_Char+0x68c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	40 e2       	ldi	r20, 0x20	; 32
    1fbe:	51 e4       	ldi	r21, 0x41	; 65
    1fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	bc 01       	movw	r22, r24
    1fca:	cd 01       	movw	r24, r26
    1fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	9e 83       	std	Y+6, r25	; 0x06
    1fd6:	8d 83       	std	Y+5, r24	; 0x05
    1fd8:	0f c0       	rjmp	.+30     	; 0x1ff8 <LCD_Char+0x682>
    1fda:	80 e9       	ldi	r24, 0x90	; 144
    1fdc:	91 e0       	ldi	r25, 0x01	; 1
    1fde:	9c 83       	std	Y+4, r25	; 0x04
    1fe0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe6:	01 97       	sbiw	r24, 0x01	; 1
    1fe8:	f1 f7       	brne	.-4      	; 0x1fe6 <LCD_Char+0x670>
    1fea:	9c 83       	std	Y+4, r25	; 0x04
    1fec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff2:	01 97       	sbiw	r24, 0x01	; 1
    1ff4:	9e 83       	std	Y+6, r25	; 0x06
    1ff6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff8:	8d 81       	ldd	r24, Y+5	; 0x05
    1ffa:	9e 81       	ldd	r25, Y+6	; 0x06
    1ffc:	00 97       	sbiw	r24, 0x00	; 0
    1ffe:	69 f7       	brne	.-38     	; 0x1fda <LCD_Char+0x664>
    2000:	14 c0       	rjmp	.+40     	; 0x202a <LCD_Char+0x6b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2002:	6f 81       	ldd	r22, Y+7	; 0x07
    2004:	78 85       	ldd	r23, Y+8	; 0x08
    2006:	89 85       	ldd	r24, Y+9	; 0x09
    2008:	9a 85       	ldd	r25, Y+10	; 0x0a
    200a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	9e 83       	std	Y+6, r25	; 0x06
    2014:	8d 83       	std	Y+5, r24	; 0x05
    2016:	8d 81       	ldd	r24, Y+5	; 0x05
    2018:	9e 81       	ldd	r25, Y+6	; 0x06
    201a:	9a 83       	std	Y+2, r25	; 0x02
    201c:	89 83       	std	Y+1, r24	; 0x01
    201e:	89 81       	ldd	r24, Y+1	; 0x01
    2020:	9a 81       	ldd	r25, Y+2	; 0x02
    2022:	01 97       	sbiw	r24, 0x01	; 1
    2024:	f1 f7       	brne	.-4      	; 0x2022 <LCD_Char+0x6ac>
    2026:	9a 83       	std	Y+2, r25	; 0x02
    2028:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    202a:	c9 5a       	subi	r28, 0xA9	; 169
    202c:	df 4f       	sbci	r29, 0xFF	; 255
    202e:	0f b6       	in	r0, 0x3f	; 63
    2030:	f8 94       	cli
    2032:	de bf       	out	0x3e, r29	; 62
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	cd bf       	out	0x3d, r28	; 61
    2038:	cf 91       	pop	r28
    203a:	df 91       	pop	r29
    203c:	1f 91       	pop	r17
    203e:	0f 91       	pop	r16
    2040:	08 95       	ret

00002042 <LCD_Command>:

void LCD_Command(char data){
    2042:	0f 93       	push	r16
    2044:	1f 93       	push	r17
    2046:	df 93       	push	r29
    2048:	cf 93       	push	r28
    204a:	cd b7       	in	r28, 0x3d	; 61
    204c:	de b7       	in	r29, 0x3e	; 62
    204e:	c7 55       	subi	r28, 0x57	; 87
    2050:	d0 40       	sbci	r29, 0x00	; 0
    2052:	0f b6       	in	r0, 0x3f	; 63
    2054:	f8 94       	cli
    2056:	de bf       	out	0x3e, r29	; 62
    2058:	0f be       	out	0x3f, r0	; 63
    205a:	cd bf       	out	0x3d, r28	; 61
    205c:	fe 01       	movw	r30, r28
    205e:	e9 5a       	subi	r30, 0xA9	; 169
    2060:	ff 4f       	sbci	r31, 0xFF	; 255
    2062:	80 83       	st	Z, r24
	Dio_write(RS,Low);
    2064:	89 e0       	ldi	r24, 0x09	; 9
    2066:	60 e0       	ldi	r22, 0x00	; 0
    2068:	0e 94 64 09 	call	0x12c8	; 0x12c8 <Dio_write>
	Dio_write(RW,Low);
    206c:	8a e0       	ldi	r24, 0x0A	; 10
    206e:	60 e0       	ldi	r22, 0x00	; 0
    2070:	0e 94 64 09 	call	0x12c8	; 0x12c8 <Dio_write>
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xf0);
    2074:	ab e3       	ldi	r26, 0x3B	; 59
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	eb e3       	ldi	r30, 0x3B	; 59
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	98 2f       	mov	r25, r24
    2080:	9f 70       	andi	r25, 0x0F	; 15
    2082:	fe 01       	movw	r30, r28
    2084:	e9 5a       	subi	r30, 0xA9	; 169
    2086:	ff 4f       	sbci	r31, 0xFF	; 255
    2088:	80 81       	ld	r24, Z
    208a:	80 7f       	andi	r24, 0xF0	; 240
    208c:	89 2b       	or	r24, r25
    208e:	8c 93       	st	X, r24
	Dio_write(E,High);
    2090:	8b e0       	ldi	r24, 0x0B	; 11
    2092:	61 e0       	ldi	r22, 0x01	; 1
    2094:	0e 94 64 09 	call	0x12c8	; 0x12c8 <Dio_write>
    2098:	fe 01       	movw	r30, r28
    209a:	ed 5a       	subi	r30, 0xAD	; 173
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	80 e0       	ldi	r24, 0x00	; 0
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	a0 e2       	ldi	r26, 0x20	; 32
    20a4:	b1 e4       	ldi	r27, 0x41	; 65
    20a6:	80 83       	st	Z, r24
    20a8:	91 83       	std	Z+1, r25	; 0x01
    20aa:	a2 83       	std	Z+2, r26	; 0x02
    20ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20ae:	8e 01       	movw	r16, r28
    20b0:	01 5b       	subi	r16, 0xB1	; 177
    20b2:	1f 4f       	sbci	r17, 0xFF	; 255
    20b4:	fe 01       	movw	r30, r28
    20b6:	ed 5a       	subi	r30, 0xAD	; 173
    20b8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ba:	60 81       	ld	r22, Z
    20bc:	71 81       	ldd	r23, Z+1	; 0x01
    20be:	82 81       	ldd	r24, Z+2	; 0x02
    20c0:	93 81       	ldd	r25, Z+3	; 0x03
    20c2:	2b ea       	ldi	r18, 0xAB	; 171
    20c4:	3a ea       	ldi	r19, 0xAA	; 170
    20c6:	4a ea       	ldi	r20, 0xAA	; 170
    20c8:	50 e4       	ldi	r21, 0x40	; 64
    20ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	f8 01       	movw	r30, r16
    20d4:	80 83       	st	Z, r24
    20d6:	91 83       	std	Z+1, r25	; 0x01
    20d8:	a2 83       	std	Z+2, r26	; 0x02
    20da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20dc:	fe 01       	movw	r30, r28
    20de:	e1 5b       	subi	r30, 0xB1	; 177
    20e0:	ff 4f       	sbci	r31, 0xFF	; 255
    20e2:	60 81       	ld	r22, Z
    20e4:	71 81       	ldd	r23, Z+1	; 0x01
    20e6:	82 81       	ldd	r24, Z+2	; 0x02
    20e8:	93 81       	ldd	r25, Z+3	; 0x03
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	40 e8       	ldi	r20, 0x80	; 128
    20f0:	5f e3       	ldi	r21, 0x3F	; 63
    20f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20f6:	88 23       	and	r24, r24
    20f8:	34 f4       	brge	.+12     	; 0x2106 <LCD_Command+0xc4>
		__ticks = 1;
    20fa:	fe 01       	movw	r30, r28
    20fc:	e2 5b       	subi	r30, 0xB2	; 178
    20fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	80 83       	st	Z, r24
    2104:	e0 c0       	rjmp	.+448    	; 0x22c6 <LCD_Command+0x284>
	else if (__tmp > 255)
    2106:	fe 01       	movw	r30, r28
    2108:	e1 5b       	subi	r30, 0xB1	; 177
    210a:	ff 4f       	sbci	r31, 0xFF	; 255
    210c:	60 81       	ld	r22, Z
    210e:	71 81       	ldd	r23, Z+1	; 0x01
    2110:	82 81       	ldd	r24, Z+2	; 0x02
    2112:	93 81       	ldd	r25, Z+3	; 0x03
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	4f e7       	ldi	r20, 0x7F	; 127
    211a:	53 e4       	ldi	r21, 0x43	; 67
    211c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2120:	18 16       	cp	r1, r24
    2122:	0c f0       	brlt	.+2      	; 0x2126 <LCD_Command+0xe4>
    2124:	c0 c0       	rjmp	.+384    	; 0x22a6 <LCD_Command+0x264>
	{
		_delay_ms(__us / 1000.0);
    2126:	fe 01       	movw	r30, r28
    2128:	ed 5a       	subi	r30, 0xAD	; 173
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	60 81       	ld	r22, Z
    212e:	71 81       	ldd	r23, Z+1	; 0x01
    2130:	82 81       	ldd	r24, Z+2	; 0x02
    2132:	93 81       	ldd	r25, Z+3	; 0x03
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	4a e7       	ldi	r20, 0x7A	; 122
    213a:	54 e4       	ldi	r21, 0x44	; 68
    213c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	fe 01       	movw	r30, r28
    2146:	e6 5b       	subi	r30, 0xB6	; 182
    2148:	ff 4f       	sbci	r31, 0xFF	; 255
    214a:	80 83       	st	Z, r24
    214c:	91 83       	std	Z+1, r25	; 0x01
    214e:	a2 83       	std	Z+2, r26	; 0x02
    2150:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2152:	8e 01       	movw	r16, r28
    2154:	0a 5b       	subi	r16, 0xBA	; 186
    2156:	1f 4f       	sbci	r17, 0xFF	; 255
    2158:	fe 01       	movw	r30, r28
    215a:	e6 5b       	subi	r30, 0xB6	; 182
    215c:	ff 4f       	sbci	r31, 0xFF	; 255
    215e:	60 81       	ld	r22, Z
    2160:	71 81       	ldd	r23, Z+1	; 0x01
    2162:	82 81       	ldd	r24, Z+2	; 0x02
    2164:	93 81       	ldd	r25, Z+3	; 0x03
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	4a e7       	ldi	r20, 0x7A	; 122
    216c:	55 e4       	ldi	r21, 0x45	; 69
    216e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	f8 01       	movw	r30, r16
    2178:	80 83       	st	Z, r24
    217a:	91 83       	std	Z+1, r25	; 0x01
    217c:	a2 83       	std	Z+2, r26	; 0x02
    217e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2180:	fe 01       	movw	r30, r28
    2182:	ea 5b       	subi	r30, 0xBA	; 186
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	60 81       	ld	r22, Z
    2188:	71 81       	ldd	r23, Z+1	; 0x01
    218a:	82 81       	ldd	r24, Z+2	; 0x02
    218c:	93 81       	ldd	r25, Z+3	; 0x03
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	40 e8       	ldi	r20, 0x80	; 128
    2194:	5f e3       	ldi	r21, 0x3F	; 63
    2196:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    219a:	88 23       	and	r24, r24
    219c:	44 f4       	brge	.+16     	; 0x21ae <LCD_Command+0x16c>
		__ticks = 1;
    219e:	fe 01       	movw	r30, r28
    21a0:	ec 5b       	subi	r30, 0xBC	; 188
    21a2:	ff 4f       	sbci	r31, 0xFF	; 255
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	91 83       	std	Z+1, r25	; 0x01
    21aa:	80 83       	st	Z, r24
    21ac:	64 c0       	rjmp	.+200    	; 0x2276 <LCD_Command+0x234>
	else if (__tmp > 65535)
    21ae:	fe 01       	movw	r30, r28
    21b0:	ea 5b       	subi	r30, 0xBA	; 186
    21b2:	ff 4f       	sbci	r31, 0xFF	; 255
    21b4:	60 81       	ld	r22, Z
    21b6:	71 81       	ldd	r23, Z+1	; 0x01
    21b8:	82 81       	ldd	r24, Z+2	; 0x02
    21ba:	93 81       	ldd	r25, Z+3	; 0x03
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	3f ef       	ldi	r19, 0xFF	; 255
    21c0:	4f e7       	ldi	r20, 0x7F	; 127
    21c2:	57 e4       	ldi	r21, 0x47	; 71
    21c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21c8:	18 16       	cp	r1, r24
    21ca:	0c f0       	brlt	.+2      	; 0x21ce <LCD_Command+0x18c>
    21cc:	43 c0       	rjmp	.+134    	; 0x2254 <LCD_Command+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ce:	fe 01       	movw	r30, r28
    21d0:	e6 5b       	subi	r30, 0xB6	; 182
    21d2:	ff 4f       	sbci	r31, 0xFF	; 255
    21d4:	60 81       	ld	r22, Z
    21d6:	71 81       	ldd	r23, Z+1	; 0x01
    21d8:	82 81       	ldd	r24, Z+2	; 0x02
    21da:	93 81       	ldd	r25, Z+3	; 0x03
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	40 e2       	ldi	r20, 0x20	; 32
    21e2:	51 e4       	ldi	r21, 0x41	; 65
    21e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	8e 01       	movw	r16, r28
    21ee:	0c 5b       	subi	r16, 0xBC	; 188
    21f0:	1f 4f       	sbci	r17, 0xFF	; 255
    21f2:	bc 01       	movw	r22, r24
    21f4:	cd 01       	movw	r24, r26
    21f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	f8 01       	movw	r30, r16
    2200:	91 83       	std	Z+1, r25	; 0x01
    2202:	80 83       	st	Z, r24
    2204:	1f c0       	rjmp	.+62     	; 0x2244 <LCD_Command+0x202>
    2206:	fe 01       	movw	r30, r28
    2208:	ee 5b       	subi	r30, 0xBE	; 190
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	80 e9       	ldi	r24, 0x90	; 144
    220e:	91 e0       	ldi	r25, 0x01	; 1
    2210:	91 83       	std	Z+1, r25	; 0x01
    2212:	80 83       	st	Z, r24
    2214:	fe 01       	movw	r30, r28
    2216:	ee 5b       	subi	r30, 0xBE	; 190
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	80 81       	ld	r24, Z
    221c:	91 81       	ldd	r25, Z+1	; 0x01
    221e:	01 97       	sbiw	r24, 0x01	; 1
    2220:	f1 f7       	brne	.-4      	; 0x221e <LCD_Command+0x1dc>
    2222:	fe 01       	movw	r30, r28
    2224:	ee 5b       	subi	r30, 0xBE	; 190
    2226:	ff 4f       	sbci	r31, 0xFF	; 255
    2228:	91 83       	std	Z+1, r25	; 0x01
    222a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222c:	de 01       	movw	r26, r28
    222e:	ac 5b       	subi	r26, 0xBC	; 188
    2230:	bf 4f       	sbci	r27, 0xFF	; 255
    2232:	fe 01       	movw	r30, r28
    2234:	ec 5b       	subi	r30, 0xBC	; 188
    2236:	ff 4f       	sbci	r31, 0xFF	; 255
    2238:	80 81       	ld	r24, Z
    223a:	91 81       	ldd	r25, Z+1	; 0x01
    223c:	01 97       	sbiw	r24, 0x01	; 1
    223e:	11 96       	adiw	r26, 0x01	; 1
    2240:	9c 93       	st	X, r25
    2242:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2244:	fe 01       	movw	r30, r28
    2246:	ec 5b       	subi	r30, 0xBC	; 188
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	80 81       	ld	r24, Z
    224c:	91 81       	ldd	r25, Z+1	; 0x01
    224e:	00 97       	sbiw	r24, 0x00	; 0
    2250:	d1 f6       	brne	.-76     	; 0x2206 <LCD_Command+0x1c4>
    2252:	42 c0       	rjmp	.+132    	; 0x22d8 <LCD_Command+0x296>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2254:	8e 01       	movw	r16, r28
    2256:	0c 5b       	subi	r16, 0xBC	; 188
    2258:	1f 4f       	sbci	r17, 0xFF	; 255
    225a:	fe 01       	movw	r30, r28
    225c:	ea 5b       	subi	r30, 0xBA	; 186
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	60 81       	ld	r22, Z
    2262:	71 81       	ldd	r23, Z+1	; 0x01
    2264:	82 81       	ldd	r24, Z+2	; 0x02
    2266:	93 81       	ldd	r25, Z+3	; 0x03
    2268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	f8 01       	movw	r30, r16
    2272:	91 83       	std	Z+1, r25	; 0x01
    2274:	80 83       	st	Z, r24
    2276:	de 01       	movw	r26, r28
    2278:	a0 5c       	subi	r26, 0xC0	; 192
    227a:	bf 4f       	sbci	r27, 0xFF	; 255
    227c:	fe 01       	movw	r30, r28
    227e:	ec 5b       	subi	r30, 0xBC	; 188
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	80 81       	ld	r24, Z
    2284:	91 81       	ldd	r25, Z+1	; 0x01
    2286:	11 96       	adiw	r26, 0x01	; 1
    2288:	9c 93       	st	X, r25
    228a:	8e 93       	st	-X, r24
    228c:	fe 01       	movw	r30, r28
    228e:	e0 5c       	subi	r30, 0xC0	; 192
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	80 81       	ld	r24, Z
    2294:	91 81       	ldd	r25, Z+1	; 0x01
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	f1 f7       	brne	.-4      	; 0x2296 <LCD_Command+0x254>
    229a:	fe 01       	movw	r30, r28
    229c:	e0 5c       	subi	r30, 0xC0	; 192
    229e:	ff 4f       	sbci	r31, 0xFF	; 255
    22a0:	91 83       	std	Z+1, r25	; 0x01
    22a2:	80 83       	st	Z, r24
    22a4:	19 c0       	rjmp	.+50     	; 0x22d8 <LCD_Command+0x296>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22a6:	8e 01       	movw	r16, r28
    22a8:	02 5b       	subi	r16, 0xB2	; 178
    22aa:	1f 4f       	sbci	r17, 0xFF	; 255
    22ac:	fe 01       	movw	r30, r28
    22ae:	e1 5b       	subi	r30, 0xB1	; 177
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	60 81       	ld	r22, Z
    22b4:	71 81       	ldd	r23, Z+1	; 0x01
    22b6:	82 81       	ldd	r24, Z+2	; 0x02
    22b8:	93 81       	ldd	r25, Z+3	; 0x03
    22ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	f8 01       	movw	r30, r16
    22c4:	80 83       	st	Z, r24
    22c6:	fe 01       	movw	r30, r28
    22c8:	e2 5b       	subi	r30, 0xB2	; 178
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	80 81       	ld	r24, Z
    22ce:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22d0:	8f ad       	ldd	r24, Y+63	; 0x3f
    22d2:	8a 95       	dec	r24
    22d4:	f1 f7       	brne	.-4      	; 0x22d2 <LCD_Command+0x290>
    22d6:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(10);
	Dio_write(E,Low);
    22d8:	8b e0       	ldi	r24, 0x0B	; 11
    22da:	60 e0       	ldi	r22, 0x00	; 0
    22dc:	0e 94 64 09 	call	0x12c8	; 0x12c8 <Dio_write>
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	a8 e4       	ldi	r26, 0x48	; 72
    22e6:	b3 e4       	ldi	r27, 0x43	; 67
    22e8:	8b af       	std	Y+59, r24	; 0x3b
    22ea:	9c af       	std	Y+60, r25	; 0x3c
    22ec:	ad af       	std	Y+61, r26	; 0x3d
    22ee:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22f0:	6b ad       	ldd	r22, Y+59	; 0x3b
    22f2:	7c ad       	ldd	r23, Y+60	; 0x3c
    22f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    22f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    22f8:	2b ea       	ldi	r18, 0xAB	; 171
    22fa:	3a ea       	ldi	r19, 0xAA	; 170
    22fc:	4a ea       	ldi	r20, 0xAA	; 170
    22fe:	50 e4       	ldi	r21, 0x40	; 64
    2300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	8f ab       	std	Y+55, r24	; 0x37
    230a:	98 af       	std	Y+56, r25	; 0x38
    230c:	a9 af       	std	Y+57, r26	; 0x39
    230e:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2310:	6f a9       	ldd	r22, Y+55	; 0x37
    2312:	78 ad       	ldd	r23, Y+56	; 0x38
    2314:	89 ad       	ldd	r24, Y+57	; 0x39
    2316:	9a ad       	ldd	r25, Y+58	; 0x3a
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	40 e8       	ldi	r20, 0x80	; 128
    231e:	5f e3       	ldi	r21, 0x3F	; 63
    2320:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2324:	88 23       	and	r24, r24
    2326:	1c f4       	brge	.+6      	; 0x232e <LCD_Command+0x2ec>
		__ticks = 1;
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	8e ab       	std	Y+54, r24	; 0x36
    232c:	91 c0       	rjmp	.+290    	; 0x2450 <LCD_Command+0x40e>
	else if (__tmp > 255)
    232e:	6f a9       	ldd	r22, Y+55	; 0x37
    2330:	78 ad       	ldd	r23, Y+56	; 0x38
    2332:	89 ad       	ldd	r24, Y+57	; 0x39
    2334:	9a ad       	ldd	r25, Y+58	; 0x3a
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	4f e7       	ldi	r20, 0x7F	; 127
    233c:	53 e4       	ldi	r21, 0x43	; 67
    233e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2342:	18 16       	cp	r1, r24
    2344:	0c f0       	brlt	.+2      	; 0x2348 <LCD_Command+0x306>
    2346:	7b c0       	rjmp	.+246    	; 0x243e <LCD_Command+0x3fc>
	{
		_delay_ms(__us / 1000.0);
    2348:	6b ad       	ldd	r22, Y+59	; 0x3b
    234a:	7c ad       	ldd	r23, Y+60	; 0x3c
    234c:	8d ad       	ldd	r24, Y+61	; 0x3d
    234e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	4a e7       	ldi	r20, 0x7A	; 122
    2356:	54 e4       	ldi	r21, 0x44	; 68
    2358:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	8a ab       	std	Y+50, r24	; 0x32
    2362:	9b ab       	std	Y+51, r25	; 0x33
    2364:	ac ab       	std	Y+52, r26	; 0x34
    2366:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2368:	6a a9       	ldd	r22, Y+50	; 0x32
    236a:	7b a9       	ldd	r23, Y+51	; 0x33
    236c:	8c a9       	ldd	r24, Y+52	; 0x34
    236e:	9d a9       	ldd	r25, Y+53	; 0x35
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	4a e7       	ldi	r20, 0x7A	; 122
    2376:	55 e4       	ldi	r21, 0x45	; 69
    2378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	8e a7       	std	Y+46, r24	; 0x2e
    2382:	9f a7       	std	Y+47, r25	; 0x2f
    2384:	a8 ab       	std	Y+48, r26	; 0x30
    2386:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2388:	6e a5       	ldd	r22, Y+46	; 0x2e
    238a:	7f a5       	ldd	r23, Y+47	; 0x2f
    238c:	88 a9       	ldd	r24, Y+48	; 0x30
    238e:	99 a9       	ldd	r25, Y+49	; 0x31
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e8       	ldi	r20, 0x80	; 128
    2396:	5f e3       	ldi	r21, 0x3F	; 63
    2398:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    239c:	88 23       	and	r24, r24
    239e:	2c f4       	brge	.+10     	; 0x23aa <LCD_Command+0x368>
		__ticks = 1;
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	9d a7       	std	Y+45, r25	; 0x2d
    23a6:	8c a7       	std	Y+44, r24	; 0x2c
    23a8:	3f c0       	rjmp	.+126    	; 0x2428 <LCD_Command+0x3e6>
	else if (__tmp > 65535)
    23aa:	6e a5       	ldd	r22, Y+46	; 0x2e
    23ac:	7f a5       	ldd	r23, Y+47	; 0x2f
    23ae:	88 a9       	ldd	r24, Y+48	; 0x30
    23b0:	99 a9       	ldd	r25, Y+49	; 0x31
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	3f ef       	ldi	r19, 0xFF	; 255
    23b6:	4f e7       	ldi	r20, 0x7F	; 127
    23b8:	57 e4       	ldi	r21, 0x47	; 71
    23ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23be:	18 16       	cp	r1, r24
    23c0:	4c f5       	brge	.+82     	; 0x2414 <LCD_Command+0x3d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c2:	6a a9       	ldd	r22, Y+50	; 0x32
    23c4:	7b a9       	ldd	r23, Y+51	; 0x33
    23c6:	8c a9       	ldd	r24, Y+52	; 0x34
    23c8:	9d a9       	ldd	r25, Y+53	; 0x35
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	40 e2       	ldi	r20, 0x20	; 32
    23d0:	51 e4       	ldi	r21, 0x41	; 65
    23d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	bc 01       	movw	r22, r24
    23dc:	cd 01       	movw	r24, r26
    23de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	9d a7       	std	Y+45, r25	; 0x2d
    23e8:	8c a7       	std	Y+44, r24	; 0x2c
    23ea:	0f c0       	rjmp	.+30     	; 0x240a <LCD_Command+0x3c8>
    23ec:	80 e9       	ldi	r24, 0x90	; 144
    23ee:	91 e0       	ldi	r25, 0x01	; 1
    23f0:	9b a7       	std	Y+43, r25	; 0x2b
    23f2:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23f4:	8a a5       	ldd	r24, Y+42	; 0x2a
    23f6:	9b a5       	ldd	r25, Y+43	; 0x2b
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	f1 f7       	brne	.-4      	; 0x23f8 <LCD_Command+0x3b6>
    23fc:	9b a7       	std	Y+43, r25	; 0x2b
    23fe:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2400:	8c a5       	ldd	r24, Y+44	; 0x2c
    2402:	9d a5       	ldd	r25, Y+45	; 0x2d
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	9d a7       	std	Y+45, r25	; 0x2d
    2408:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    240a:	8c a5       	ldd	r24, Y+44	; 0x2c
    240c:	9d a5       	ldd	r25, Y+45	; 0x2d
    240e:	00 97       	sbiw	r24, 0x00	; 0
    2410:	69 f7       	brne	.-38     	; 0x23ec <LCD_Command+0x3aa>
    2412:	24 c0       	rjmp	.+72     	; 0x245c <LCD_Command+0x41a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2414:	6e a5       	ldd	r22, Y+46	; 0x2e
    2416:	7f a5       	ldd	r23, Y+47	; 0x2f
    2418:	88 a9       	ldd	r24, Y+48	; 0x30
    241a:	99 a9       	ldd	r25, Y+49	; 0x31
    241c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	9d a7       	std	Y+45, r25	; 0x2d
    2426:	8c a7       	std	Y+44, r24	; 0x2c
    2428:	8c a5       	ldd	r24, Y+44	; 0x2c
    242a:	9d a5       	ldd	r25, Y+45	; 0x2d
    242c:	99 a7       	std	Y+41, r25	; 0x29
    242e:	88 a7       	std	Y+40, r24	; 0x28
    2430:	88 a5       	ldd	r24, Y+40	; 0x28
    2432:	99 a5       	ldd	r25, Y+41	; 0x29
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	f1 f7       	brne	.-4      	; 0x2434 <LCD_Command+0x3f2>
    2438:	99 a7       	std	Y+41, r25	; 0x29
    243a:	88 a7       	std	Y+40, r24	; 0x28
    243c:	0f c0       	rjmp	.+30     	; 0x245c <LCD_Command+0x41a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    243e:	6f a9       	ldd	r22, Y+55	; 0x37
    2440:	78 ad       	ldd	r23, Y+56	; 0x38
    2442:	89 ad       	ldd	r24, Y+57	; 0x39
    2444:	9a ad       	ldd	r25, Y+58	; 0x3a
    2446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	8e ab       	std	Y+54, r24	; 0x36
    2450:	8e a9       	ldd	r24, Y+54	; 0x36
    2452:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2454:	8f a1       	ldd	r24, Y+39	; 0x27
    2456:	8a 95       	dec	r24
    2458:	f1 f7       	brne	.-4      	; 0x2456 <LCD_Command+0x414>
    245a:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4);
    245c:	ab e3       	ldi	r26, 0x3B	; 59
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	eb e3       	ldi	r30, 0x3B	; 59
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	80 81       	ld	r24, Z
    2466:	28 2f       	mov	r18, r24
    2468:	2f 70       	andi	r18, 0x0F	; 15
    246a:	fe 01       	movw	r30, r28
    246c:	e9 5a       	subi	r30, 0xA9	; 169
    246e:	ff 4f       	sbci	r31, 0xFF	; 255
    2470:	80 81       	ld	r24, Z
    2472:	88 2f       	mov	r24, r24
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	82 95       	swap	r24
    2478:	92 95       	swap	r25
    247a:	90 7f       	andi	r25, 0xF0	; 240
    247c:	98 27       	eor	r25, r24
    247e:	80 7f       	andi	r24, 0xF0	; 240
    2480:	98 27       	eor	r25, r24
    2482:	82 2b       	or	r24, r18
    2484:	8c 93       	st	X, r24
	Dio_write(E,High);
    2486:	8b e0       	ldi	r24, 0x0B	; 11
    2488:	61 e0       	ldi	r22, 0x01	; 1
    248a:	0e 94 64 09 	call	0x12c8	; 0x12c8 <Dio_write>
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	a0 e2       	ldi	r26, 0x20	; 32
    2494:	b1 e4       	ldi	r27, 0x41	; 65
    2496:	8b a3       	std	Y+35, r24	; 0x23
    2498:	9c a3       	std	Y+36, r25	; 0x24
    249a:	ad a3       	std	Y+37, r26	; 0x25
    249c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    249e:	6b a1       	ldd	r22, Y+35	; 0x23
    24a0:	7c a1       	ldd	r23, Y+36	; 0x24
    24a2:	8d a1       	ldd	r24, Y+37	; 0x25
    24a4:	9e a1       	ldd	r25, Y+38	; 0x26
    24a6:	2b ea       	ldi	r18, 0xAB	; 171
    24a8:	3a ea       	ldi	r19, 0xAA	; 170
    24aa:	4a ea       	ldi	r20, 0xAA	; 170
    24ac:	50 e4       	ldi	r21, 0x40	; 64
    24ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	8f 8f       	std	Y+31, r24	; 0x1f
    24b8:	98 a3       	std	Y+32, r25	; 0x20
    24ba:	a9 a3       	std	Y+33, r26	; 0x21
    24bc:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    24be:	6f 8d       	ldd	r22, Y+31	; 0x1f
    24c0:	78 a1       	ldd	r23, Y+32	; 0x20
    24c2:	89 a1       	ldd	r24, Y+33	; 0x21
    24c4:	9a a1       	ldd	r25, Y+34	; 0x22
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	40 e8       	ldi	r20, 0x80	; 128
    24cc:	5f e3       	ldi	r21, 0x3F	; 63
    24ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24d2:	88 23       	and	r24, r24
    24d4:	1c f4       	brge	.+6      	; 0x24dc <LCD_Command+0x49a>
		__ticks = 1;
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	8e 8f       	std	Y+30, r24	; 0x1e
    24da:	91 c0       	rjmp	.+290    	; 0x25fe <LCD_Command+0x5bc>
	else if (__tmp > 255)
    24dc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    24de:	78 a1       	ldd	r23, Y+32	; 0x20
    24e0:	89 a1       	ldd	r24, Y+33	; 0x21
    24e2:	9a a1       	ldd	r25, Y+34	; 0x22
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	4f e7       	ldi	r20, 0x7F	; 127
    24ea:	53 e4       	ldi	r21, 0x43	; 67
    24ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24f0:	18 16       	cp	r1, r24
    24f2:	0c f0       	brlt	.+2      	; 0x24f6 <LCD_Command+0x4b4>
    24f4:	7b c0       	rjmp	.+246    	; 0x25ec <LCD_Command+0x5aa>
	{
		_delay_ms(__us / 1000.0);
    24f6:	6b a1       	ldd	r22, Y+35	; 0x23
    24f8:	7c a1       	ldd	r23, Y+36	; 0x24
    24fa:	8d a1       	ldd	r24, Y+37	; 0x25
    24fc:	9e a1       	ldd	r25, Y+38	; 0x26
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	4a e7       	ldi	r20, 0x7A	; 122
    2504:	54 e4       	ldi	r21, 0x44	; 68
    2506:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	8a 8f       	std	Y+26, r24	; 0x1a
    2510:	9b 8f       	std	Y+27, r25	; 0x1b
    2512:	ac 8f       	std	Y+28, r26	; 0x1c
    2514:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2516:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2518:	7b 8d       	ldd	r23, Y+27	; 0x1b
    251a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    251c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	4a e7       	ldi	r20, 0x7A	; 122
    2524:	55 e4       	ldi	r21, 0x45	; 69
    2526:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	8e 8b       	std	Y+22, r24	; 0x16
    2530:	9f 8b       	std	Y+23, r25	; 0x17
    2532:	a8 8f       	std	Y+24, r26	; 0x18
    2534:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2536:	6e 89       	ldd	r22, Y+22	; 0x16
    2538:	7f 89       	ldd	r23, Y+23	; 0x17
    253a:	88 8d       	ldd	r24, Y+24	; 0x18
    253c:	99 8d       	ldd	r25, Y+25	; 0x19
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	40 e8       	ldi	r20, 0x80	; 128
    2544:	5f e3       	ldi	r21, 0x3F	; 63
    2546:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    254a:	88 23       	and	r24, r24
    254c:	2c f4       	brge	.+10     	; 0x2558 <LCD_Command+0x516>
		__ticks = 1;
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	9d 8b       	std	Y+21, r25	; 0x15
    2554:	8c 8b       	std	Y+20, r24	; 0x14
    2556:	3f c0       	rjmp	.+126    	; 0x25d6 <LCD_Command+0x594>
	else if (__tmp > 65535)
    2558:	6e 89       	ldd	r22, Y+22	; 0x16
    255a:	7f 89       	ldd	r23, Y+23	; 0x17
    255c:	88 8d       	ldd	r24, Y+24	; 0x18
    255e:	99 8d       	ldd	r25, Y+25	; 0x19
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	3f ef       	ldi	r19, 0xFF	; 255
    2564:	4f e7       	ldi	r20, 0x7F	; 127
    2566:	57 e4       	ldi	r21, 0x47	; 71
    2568:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    256c:	18 16       	cp	r1, r24
    256e:	4c f5       	brge	.+82     	; 0x25c2 <LCD_Command+0x580>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2570:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2572:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2574:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2576:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	40 e2       	ldi	r20, 0x20	; 32
    257e:	51 e4       	ldi	r21, 0x41	; 65
    2580:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	bc 01       	movw	r22, r24
    258a:	cd 01       	movw	r24, r26
    258c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	9d 8b       	std	Y+21, r25	; 0x15
    2596:	8c 8b       	std	Y+20, r24	; 0x14
    2598:	0f c0       	rjmp	.+30     	; 0x25b8 <LCD_Command+0x576>
    259a:	80 e9       	ldi	r24, 0x90	; 144
    259c:	91 e0       	ldi	r25, 0x01	; 1
    259e:	9b 8b       	std	Y+19, r25	; 0x13
    25a0:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25a2:	8a 89       	ldd	r24, Y+18	; 0x12
    25a4:	9b 89       	ldd	r25, Y+19	; 0x13
    25a6:	01 97       	sbiw	r24, 0x01	; 1
    25a8:	f1 f7       	brne	.-4      	; 0x25a6 <LCD_Command+0x564>
    25aa:	9b 8b       	std	Y+19, r25	; 0x13
    25ac:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ae:	8c 89       	ldd	r24, Y+20	; 0x14
    25b0:	9d 89       	ldd	r25, Y+21	; 0x15
    25b2:	01 97       	sbiw	r24, 0x01	; 1
    25b4:	9d 8b       	std	Y+21, r25	; 0x15
    25b6:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b8:	8c 89       	ldd	r24, Y+20	; 0x14
    25ba:	9d 89       	ldd	r25, Y+21	; 0x15
    25bc:	00 97       	sbiw	r24, 0x00	; 0
    25be:	69 f7       	brne	.-38     	; 0x259a <LCD_Command+0x558>
    25c0:	24 c0       	rjmp	.+72     	; 0x260a <LCD_Command+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c2:	6e 89       	ldd	r22, Y+22	; 0x16
    25c4:	7f 89       	ldd	r23, Y+23	; 0x17
    25c6:	88 8d       	ldd	r24, Y+24	; 0x18
    25c8:	99 8d       	ldd	r25, Y+25	; 0x19
    25ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	9d 8b       	std	Y+21, r25	; 0x15
    25d4:	8c 8b       	std	Y+20, r24	; 0x14
    25d6:	8c 89       	ldd	r24, Y+20	; 0x14
    25d8:	9d 89       	ldd	r25, Y+21	; 0x15
    25da:	99 8b       	std	Y+17, r25	; 0x11
    25dc:	88 8b       	std	Y+16, r24	; 0x10
    25de:	88 89       	ldd	r24, Y+16	; 0x10
    25e0:	99 89       	ldd	r25, Y+17	; 0x11
    25e2:	01 97       	sbiw	r24, 0x01	; 1
    25e4:	f1 f7       	brne	.-4      	; 0x25e2 <LCD_Command+0x5a0>
    25e6:	99 8b       	std	Y+17, r25	; 0x11
    25e8:	88 8b       	std	Y+16, r24	; 0x10
    25ea:	0f c0       	rjmp	.+30     	; 0x260a <LCD_Command+0x5c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25ec:	6f 8d       	ldd	r22, Y+31	; 0x1f
    25ee:	78 a1       	ldd	r23, Y+32	; 0x20
    25f0:	89 a1       	ldd	r24, Y+33	; 0x21
    25f2:	9a a1       	ldd	r25, Y+34	; 0x22
    25f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	8e 8f       	std	Y+30, r24	; 0x1e
    25fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2600:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2602:	8f 85       	ldd	r24, Y+15	; 0x0f
    2604:	8a 95       	dec	r24
    2606:	f1 f7       	brne	.-4      	; 0x2604 <LCD_Command+0x5c2>
    2608:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(10);
	Dio_write(E,Low);
    260a:	8b e0       	ldi	r24, 0x0B	; 11
    260c:	60 e0       	ldi	r22, 0x00	; 0
    260e:	0e 94 64 09 	call	0x12c8	; 0x12c8 <Dio_write>
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	a0 e2       	ldi	r26, 0x20	; 32
    2618:	b1 e4       	ldi	r27, 0x41	; 65
    261a:	8b 87       	std	Y+11, r24	; 0x0b
    261c:	9c 87       	std	Y+12, r25	; 0x0c
    261e:	ad 87       	std	Y+13, r26	; 0x0d
    2620:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2622:	6b 85       	ldd	r22, Y+11	; 0x0b
    2624:	7c 85       	ldd	r23, Y+12	; 0x0c
    2626:	8d 85       	ldd	r24, Y+13	; 0x0d
    2628:	9e 85       	ldd	r25, Y+14	; 0x0e
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	4a e7       	ldi	r20, 0x7A	; 122
    2630:	55 e4       	ldi	r21, 0x45	; 69
    2632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	8f 83       	std	Y+7, r24	; 0x07
    263c:	98 87       	std	Y+8, r25	; 0x08
    263e:	a9 87       	std	Y+9, r26	; 0x09
    2640:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2642:	6f 81       	ldd	r22, Y+7	; 0x07
    2644:	78 85       	ldd	r23, Y+8	; 0x08
    2646:	89 85       	ldd	r24, Y+9	; 0x09
    2648:	9a 85       	ldd	r25, Y+10	; 0x0a
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	40 e8       	ldi	r20, 0x80	; 128
    2650:	5f e3       	ldi	r21, 0x3F	; 63
    2652:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2656:	88 23       	and	r24, r24
    2658:	2c f4       	brge	.+10     	; 0x2664 <LCD_Command+0x622>
		__ticks = 1;
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	9e 83       	std	Y+6, r25	; 0x06
    2660:	8d 83       	std	Y+5, r24	; 0x05
    2662:	3f c0       	rjmp	.+126    	; 0x26e2 <LCD_Command+0x6a0>
	else if (__tmp > 65535)
    2664:	6f 81       	ldd	r22, Y+7	; 0x07
    2666:	78 85       	ldd	r23, Y+8	; 0x08
    2668:	89 85       	ldd	r24, Y+9	; 0x09
    266a:	9a 85       	ldd	r25, Y+10	; 0x0a
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	3f ef       	ldi	r19, 0xFF	; 255
    2670:	4f e7       	ldi	r20, 0x7F	; 127
    2672:	57 e4       	ldi	r21, 0x47	; 71
    2674:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2678:	18 16       	cp	r1, r24
    267a:	4c f5       	brge	.+82     	; 0x26ce <LCD_Command+0x68c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    267c:	6b 85       	ldd	r22, Y+11	; 0x0b
    267e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2680:	8d 85       	ldd	r24, Y+13	; 0x0d
    2682:	9e 85       	ldd	r25, Y+14	; 0x0e
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	40 e2       	ldi	r20, 0x20	; 32
    268a:	51 e4       	ldi	r21, 0x41	; 65
    268c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	bc 01       	movw	r22, r24
    2696:	cd 01       	movw	r24, r26
    2698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	9e 83       	std	Y+6, r25	; 0x06
    26a2:	8d 83       	std	Y+5, r24	; 0x05
    26a4:	0f c0       	rjmp	.+30     	; 0x26c4 <LCD_Command+0x682>
    26a6:	80 e9       	ldi	r24, 0x90	; 144
    26a8:	91 e0       	ldi	r25, 0x01	; 1
    26aa:	9c 83       	std	Y+4, r25	; 0x04
    26ac:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26ae:	8b 81       	ldd	r24, Y+3	; 0x03
    26b0:	9c 81       	ldd	r25, Y+4	; 0x04
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	f1 f7       	brne	.-4      	; 0x26b2 <LCD_Command+0x670>
    26b6:	9c 83       	std	Y+4, r25	; 0x04
    26b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ba:	8d 81       	ldd	r24, Y+5	; 0x05
    26bc:	9e 81       	ldd	r25, Y+6	; 0x06
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	9e 83       	std	Y+6, r25	; 0x06
    26c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c4:	8d 81       	ldd	r24, Y+5	; 0x05
    26c6:	9e 81       	ldd	r25, Y+6	; 0x06
    26c8:	00 97       	sbiw	r24, 0x00	; 0
    26ca:	69 f7       	brne	.-38     	; 0x26a6 <LCD_Command+0x664>
    26cc:	14 c0       	rjmp	.+40     	; 0x26f6 <LCD_Command+0x6b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ce:	6f 81       	ldd	r22, Y+7	; 0x07
    26d0:	78 85       	ldd	r23, Y+8	; 0x08
    26d2:	89 85       	ldd	r24, Y+9	; 0x09
    26d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	9e 83       	std	Y+6, r25	; 0x06
    26e0:	8d 83       	std	Y+5, r24	; 0x05
    26e2:	8d 81       	ldd	r24, Y+5	; 0x05
    26e4:	9e 81       	ldd	r25, Y+6	; 0x06
    26e6:	9a 83       	std	Y+2, r25	; 0x02
    26e8:	89 83       	std	Y+1, r24	; 0x01
    26ea:	89 81       	ldd	r24, Y+1	; 0x01
    26ec:	9a 81       	ldd	r25, Y+2	; 0x02
    26ee:	01 97       	sbiw	r24, 0x01	; 1
    26f0:	f1 f7       	brne	.-4      	; 0x26ee <LCD_Command+0x6ac>
    26f2:	9a 83       	std	Y+2, r25	; 0x02
    26f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    26f6:	c9 5a       	subi	r28, 0xA9	; 169
    26f8:	df 4f       	sbci	r29, 0xFF	; 255
    26fa:	0f b6       	in	r0, 0x3f	; 63
    26fc:	f8 94       	cli
    26fe:	de bf       	out	0x3e, r29	; 62
    2700:	0f be       	out	0x3f, r0	; 63
    2702:	cd bf       	out	0x3d, r28	; 61
    2704:	cf 91       	pop	r28
    2706:	df 91       	pop	r29
    2708:	1f 91       	pop	r17
    270a:	0f 91       	pop	r16
    270c:	08 95       	ret

0000270e <LCD_String>:

void LCD_String (char *str)
{
    270e:	df 93       	push	r29
    2710:	cf 93       	push	r28
    2712:	00 d0       	rcall	.+0      	; 0x2714 <LCD_String+0x6>
    2714:	00 d0       	rcall	.+0      	; 0x2716 <LCD_String+0x8>
    2716:	cd b7       	in	r28, 0x3d	; 61
    2718:	de b7       	in	r29, 0x3e	; 62
    271a:	9c 83       	std	Y+4, r25	; 0x04
    271c:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
    271e:	1a 82       	std	Y+2, r1	; 0x02
    2720:	19 82       	std	Y+1, r1	; 0x01
    2722:	0f c0       	rjmp	.+30     	; 0x2742 <LCD_String+0x34>
	{
		LCD_Char (str[i]);
    2724:	29 81       	ldd	r18, Y+1	; 0x01
    2726:	3a 81       	ldd	r19, Y+2	; 0x02
    2728:	8b 81       	ldd	r24, Y+3	; 0x03
    272a:	9c 81       	ldd	r25, Y+4	; 0x04
    272c:	fc 01       	movw	r30, r24
    272e:	e2 0f       	add	r30, r18
    2730:	f3 1f       	adc	r31, r19
    2732:	80 81       	ld	r24, Z
    2734:	0e 94 bb 0c 	call	0x1976	; 0x1976 <LCD_Char>
}

void LCD_String (char *str)
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
    2738:	89 81       	ldd	r24, Y+1	; 0x01
    273a:	9a 81       	ldd	r25, Y+2	; 0x02
    273c:	01 96       	adiw	r24, 0x01	; 1
    273e:	9a 83       	std	Y+2, r25	; 0x02
    2740:	89 83       	std	Y+1, r24	; 0x01
    2742:	29 81       	ldd	r18, Y+1	; 0x01
    2744:	3a 81       	ldd	r19, Y+2	; 0x02
    2746:	8b 81       	ldd	r24, Y+3	; 0x03
    2748:	9c 81       	ldd	r25, Y+4	; 0x04
    274a:	fc 01       	movw	r30, r24
    274c:	e2 0f       	add	r30, r18
    274e:	f3 1f       	adc	r31, r19
    2750:	80 81       	ld	r24, Z
    2752:	88 23       	and	r24, r24
    2754:	39 f7       	brne	.-50     	; 0x2724 <LCD_String+0x16>
	{
		LCD_Char (str[i]);
	}
}
    2756:	0f 90       	pop	r0
    2758:	0f 90       	pop	r0
    275a:	0f 90       	pop	r0
    275c:	0f 90       	pop	r0
    275e:	cf 91       	pop	r28
    2760:	df 91       	pop	r29
    2762:	08 95       	ret

00002764 <test>:
#include "MCAL/SPI/SPI.h"

volatile int ctr = 0;
volatile int ctr2 = 0;

void test(){
    2764:	df 93       	push	r29
    2766:	cf 93       	push	r28
    2768:	cd b7       	in	r28, 0x3d	; 61
    276a:	de b7       	in	r29, 0x3e	; 62
	Dio_write(Led0,High);
    276c:	82 e1       	ldi	r24, 0x12	; 18
    276e:	61 e0       	ldi	r22, 0x01	; 1
    2770:	0e 94 64 09 	call	0x12c8	; 0x12c8 <Dio_write>
	Dio_write(Led1,High);
    2774:	87 e1       	ldi	r24, 0x17	; 23
    2776:	61 e0       	ldi	r22, 0x01	; 1
    2778:	0e 94 64 09 	call	0x12c8	; 0x12c8 <Dio_write>
}
    277c:	cf 91       	pop	r28
    277e:	df 91       	pop	r29
    2780:	08 95       	ret

00002782 <test2>:

unsigned char T_total = 10, T_On, T_Off;

void test2(){
    2782:	df 93       	push	r29
    2784:	cf 93       	push	r28
    2786:	cd b7       	in	r28, 0x3d	; 61
    2788:	de b7       	in	r29, 0x3e	; 62
	ctr++;
    278a:	80 91 ca 00 	lds	r24, 0x00CA
    278e:	90 91 cb 00 	lds	r25, 0x00CB
    2792:	01 96       	adiw	r24, 0x01	; 1
    2794:	90 93 cb 00 	sts	0x00CB, r25
    2798:	80 93 ca 00 	sts	0x00CA, r24
//	ctr2++;
}
    279c:	cf 91       	pop	r28
    279e:	df 91       	pop	r29
    27a0:	08 95       	ret

000027a2 <SPI_MasterInit>:

#define One_sec 61
void SPI_MasterInit(void)
{
    27a2:	df 93       	push	r29
    27a4:	cf 93       	push	r28
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
/* Set MOSI and SCK output, all others input */
//DDRB = (1<<5)|(1<<7);
/* Enable SPI, Master, set clock rate fck/16 */
SPCR = (1<<SPE)|(1<<MSTR);
    27aa:	ed e2       	ldi	r30, 0x2D	; 45
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	80 e5       	ldi	r24, 0x50	; 80
    27b0:	80 83       	st	Z, r24
SPSR&=(1);
    27b2:	ae e2       	ldi	r26, 0x2E	; 46
    27b4:	b0 e0       	ldi	r27, 0x00	; 0
    27b6:	ee e2       	ldi	r30, 0x2E	; 46
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	80 81       	ld	r24, Z
    27bc:	81 70       	andi	r24, 0x01	; 1
    27be:	8c 93       	st	X, r24
}
    27c0:	cf 91       	pop	r28
    27c2:	df 91       	pop	r29
    27c4:	08 95       	ret

000027c6 <main>:
int main(){
    27c6:	df 93       	push	r29
    27c8:	cf 93       	push	r28
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
    27ce:	6d 97       	sbiw	r28, 0x1d	; 29
    27d0:	0f b6       	in	r0, 0x3f	; 63
    27d2:	f8 94       	cli
    27d4:	de bf       	out	0x3e, r29	; 62
    27d6:	0f be       	out	0x3f, r0	; 63
    27d8:	cd bf       	out	0x3d, r28	; 61
//	setCallBack_Timer0(test2);
//	sei();
//	LCD_Init();
//	USART_Init(9600);
	Dio_init();
    27da:	0e 94 4f 0a 	call	0x149e	; 0x149e <Dio_init>
//	SPI_Init();
	DDRA = 0xFF;
    27de:	ea e3       	ldi	r30, 0x3A	; 58
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	8f ef       	ldi	r24, 0xFF	; 255
    27e4:	80 83       	st	Z, r24
//	DDRB |= 0b10110000;
//	DDRB |=(1<<2)|(1<<3);
//	PORTB|=(1<<2)|(1<<3);
	SPI_Init();
    27e6:	0e 94 00 08 	call	0x1000	; 0x1000 <SPI_Init>
//	SET_BIT(SPCR,MSTR);
//	SET_BIT(SPCR,SPE);
//	SPCR |=(MSTR<<1);
//	SPCR |=(SPE<<1);
//	SPSR&=~(1);
    DDRB=0b10110000;
    27ea:	e7 e3       	ldi	r30, 0x37	; 55
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	80 eb       	ldi	r24, 0xB0	; 176
    27f0:	80 83       	st	Z, r24
	while(1){
		unsigned char y = SPI_Receive(0x0F);
    27f2:	8f e0       	ldi	r24, 0x0F	; 15
    27f4:	0e 94 61 08 	call	0x10c2	; 0x10c2 <SPI_Receive>
    27f8:	8d 8f       	std	Y+29, r24	; 0x1d
		PORTA = y;
    27fa:	eb e3       	ldi	r30, 0x3B	; 59
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2800:	80 83       	st	Z, r24
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	a8 e4       	ldi	r26, 0x48	; 72
    2808:	b3 e4       	ldi	r27, 0x43	; 67
    280a:	89 8f       	std	Y+25, r24	; 0x19
    280c:	9a 8f       	std	Y+26, r25	; 0x1a
    280e:	ab 8f       	std	Y+27, r26	; 0x1b
    2810:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2812:	69 8d       	ldd	r22, Y+25	; 0x19
    2814:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2816:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2818:	9c 8d       	ldd	r25, Y+28	; 0x1c
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	4a e7       	ldi	r20, 0x7A	; 122
    2820:	55 e4       	ldi	r21, 0x45	; 69
    2822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	8d 8b       	std	Y+21, r24	; 0x15
    282c:	9e 8b       	std	Y+22, r25	; 0x16
    282e:	af 8b       	std	Y+23, r26	; 0x17
    2830:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2832:	6d 89       	ldd	r22, Y+21	; 0x15
    2834:	7e 89       	ldd	r23, Y+22	; 0x16
    2836:	8f 89       	ldd	r24, Y+23	; 0x17
    2838:	98 8d       	ldd	r25, Y+24	; 0x18
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	40 e8       	ldi	r20, 0x80	; 128
    2840:	5f e3       	ldi	r21, 0x3F	; 63
    2842:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2846:	88 23       	and	r24, r24
    2848:	2c f4       	brge	.+10     	; 0x2854 <main+0x8e>
		__ticks = 1;
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	9c 8b       	std	Y+20, r25	; 0x14
    2850:	8b 8b       	std	Y+19, r24	; 0x13
    2852:	3f c0       	rjmp	.+126    	; 0x28d2 <main+0x10c>
	else if (__tmp > 65535)
    2854:	6d 89       	ldd	r22, Y+21	; 0x15
    2856:	7e 89       	ldd	r23, Y+22	; 0x16
    2858:	8f 89       	ldd	r24, Y+23	; 0x17
    285a:	98 8d       	ldd	r25, Y+24	; 0x18
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	3f ef       	ldi	r19, 0xFF	; 255
    2860:	4f e7       	ldi	r20, 0x7F	; 127
    2862:	57 e4       	ldi	r21, 0x47	; 71
    2864:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2868:	18 16       	cp	r1, r24
    286a:	4c f5       	brge	.+82     	; 0x28be <main+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286c:	69 8d       	ldd	r22, Y+25	; 0x19
    286e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2870:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2872:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	40 e2       	ldi	r20, 0x20	; 32
    287a:	51 e4       	ldi	r21, 0x41	; 65
    287c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	bc 01       	movw	r22, r24
    2886:	cd 01       	movw	r24, r26
    2888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288c:	dc 01       	movw	r26, r24
    288e:	cb 01       	movw	r24, r22
    2890:	9c 8b       	std	Y+20, r25	; 0x14
    2892:	8b 8b       	std	Y+19, r24	; 0x13
    2894:	0f c0       	rjmp	.+30     	; 0x28b4 <main+0xee>
    2896:	80 e9       	ldi	r24, 0x90	; 144
    2898:	91 e0       	ldi	r25, 0x01	; 1
    289a:	9a 8b       	std	Y+18, r25	; 0x12
    289c:	89 8b       	std	Y+17, r24	; 0x11
    289e:	89 89       	ldd	r24, Y+17	; 0x11
    28a0:	9a 89       	ldd	r25, Y+18	; 0x12
    28a2:	01 97       	sbiw	r24, 0x01	; 1
    28a4:	f1 f7       	brne	.-4      	; 0x28a2 <main+0xdc>
    28a6:	9a 8b       	std	Y+18, r25	; 0x12
    28a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28aa:	8b 89       	ldd	r24, Y+19	; 0x13
    28ac:	9c 89       	ldd	r25, Y+20	; 0x14
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	9c 8b       	std	Y+20, r25	; 0x14
    28b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b4:	8b 89       	ldd	r24, Y+19	; 0x13
    28b6:	9c 89       	ldd	r25, Y+20	; 0x14
    28b8:	00 97       	sbiw	r24, 0x00	; 0
    28ba:	69 f7       	brne	.-38     	; 0x2896 <main+0xd0>
    28bc:	14 c0       	rjmp	.+40     	; 0x28e6 <main+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28be:	6d 89       	ldd	r22, Y+21	; 0x15
    28c0:	7e 89       	ldd	r23, Y+22	; 0x16
    28c2:	8f 89       	ldd	r24, Y+23	; 0x17
    28c4:	98 8d       	ldd	r25, Y+24	; 0x18
    28c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	9c 8b       	std	Y+20, r25	; 0x14
    28d0:	8b 8b       	std	Y+19, r24	; 0x13
    28d2:	8b 89       	ldd	r24, Y+19	; 0x13
    28d4:	9c 89       	ldd	r25, Y+20	; 0x14
    28d6:	98 8b       	std	Y+16, r25	; 0x10
    28d8:	8f 87       	std	Y+15, r24	; 0x0f
    28da:	8f 85       	ldd	r24, Y+15	; 0x0f
    28dc:	98 89       	ldd	r25, Y+16	; 0x10
    28de:	01 97       	sbiw	r24, 0x01	; 1
    28e0:	f1 f7       	brne	.-4      	; 0x28de <main+0x118>
    28e2:	98 8b       	std	Y+16, r25	; 0x10
    28e4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);
		y = SPI_Receive(0x01);
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	0e 94 61 08 	call	0x10c2	; 0x10c2 <SPI_Receive>
    28ec:	8d 8f       	std	Y+29, r24	; 0x1d
		PORTA = y;
    28ee:	eb e3       	ldi	r30, 0x3B	; 59
    28f0:	f0 e0       	ldi	r31, 0x00	; 0
    28f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28f4:	80 83       	st	Z, r24
    28f6:	80 e0       	ldi	r24, 0x00	; 0
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	a8 e4       	ldi	r26, 0x48	; 72
    28fc:	b3 e4       	ldi	r27, 0x43	; 67
    28fe:	8b 87       	std	Y+11, r24	; 0x0b
    2900:	9c 87       	std	Y+12, r25	; 0x0c
    2902:	ad 87       	std	Y+13, r26	; 0x0d
    2904:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2906:	6b 85       	ldd	r22, Y+11	; 0x0b
    2908:	7c 85       	ldd	r23, Y+12	; 0x0c
    290a:	8d 85       	ldd	r24, Y+13	; 0x0d
    290c:	9e 85       	ldd	r25, Y+14	; 0x0e
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	4a e7       	ldi	r20, 0x7A	; 122
    2914:	55 e4       	ldi	r21, 0x45	; 69
    2916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	8f 83       	std	Y+7, r24	; 0x07
    2920:	98 87       	std	Y+8, r25	; 0x08
    2922:	a9 87       	std	Y+9, r26	; 0x09
    2924:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2926:	6f 81       	ldd	r22, Y+7	; 0x07
    2928:	78 85       	ldd	r23, Y+8	; 0x08
    292a:	89 85       	ldd	r24, Y+9	; 0x09
    292c:	9a 85       	ldd	r25, Y+10	; 0x0a
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	40 e8       	ldi	r20, 0x80	; 128
    2934:	5f e3       	ldi	r21, 0x3F	; 63
    2936:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    293a:	88 23       	and	r24, r24
    293c:	2c f4       	brge	.+10     	; 0x2948 <main+0x182>
		__ticks = 1;
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	9e 83       	std	Y+6, r25	; 0x06
    2944:	8d 83       	std	Y+5, r24	; 0x05
    2946:	3f c0       	rjmp	.+126    	; 0x29c6 <main+0x200>
	else if (__tmp > 65535)
    2948:	6f 81       	ldd	r22, Y+7	; 0x07
    294a:	78 85       	ldd	r23, Y+8	; 0x08
    294c:	89 85       	ldd	r24, Y+9	; 0x09
    294e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	3f ef       	ldi	r19, 0xFF	; 255
    2954:	4f e7       	ldi	r20, 0x7F	; 127
    2956:	57 e4       	ldi	r21, 0x47	; 71
    2958:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    295c:	18 16       	cp	r1, r24
    295e:	4c f5       	brge	.+82     	; 0x29b2 <main+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2960:	6b 85       	ldd	r22, Y+11	; 0x0b
    2962:	7c 85       	ldd	r23, Y+12	; 0x0c
    2964:	8d 85       	ldd	r24, Y+13	; 0x0d
    2966:	9e 85       	ldd	r25, Y+14	; 0x0e
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	40 e2       	ldi	r20, 0x20	; 32
    296e:	51 e4       	ldi	r21, 0x41	; 65
    2970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	bc 01       	movw	r22, r24
    297a:	cd 01       	movw	r24, r26
    297c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	9e 83       	std	Y+6, r25	; 0x06
    2986:	8d 83       	std	Y+5, r24	; 0x05
    2988:	0f c0       	rjmp	.+30     	; 0x29a8 <main+0x1e2>
    298a:	80 e9       	ldi	r24, 0x90	; 144
    298c:	91 e0       	ldi	r25, 0x01	; 1
    298e:	9c 83       	std	Y+4, r25	; 0x04
    2990:	8b 83       	std	Y+3, r24	; 0x03
    2992:	8b 81       	ldd	r24, Y+3	; 0x03
    2994:	9c 81       	ldd	r25, Y+4	; 0x04
    2996:	01 97       	sbiw	r24, 0x01	; 1
    2998:	f1 f7       	brne	.-4      	; 0x2996 <main+0x1d0>
    299a:	9c 83       	std	Y+4, r25	; 0x04
    299c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    299e:	8d 81       	ldd	r24, Y+5	; 0x05
    29a0:	9e 81       	ldd	r25, Y+6	; 0x06
    29a2:	01 97       	sbiw	r24, 0x01	; 1
    29a4:	9e 83       	std	Y+6, r25	; 0x06
    29a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a8:	8d 81       	ldd	r24, Y+5	; 0x05
    29aa:	9e 81       	ldd	r25, Y+6	; 0x06
    29ac:	00 97       	sbiw	r24, 0x00	; 0
    29ae:	69 f7       	brne	.-38     	; 0x298a <main+0x1c4>
    29b0:	20 cf       	rjmp	.-448    	; 0x27f2 <main+0x2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b2:	6f 81       	ldd	r22, Y+7	; 0x07
    29b4:	78 85       	ldd	r23, Y+8	; 0x08
    29b6:	89 85       	ldd	r24, Y+9	; 0x09
    29b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	9e 83       	std	Y+6, r25	; 0x06
    29c4:	8d 83       	std	Y+5, r24	; 0x05
    29c6:	8d 81       	ldd	r24, Y+5	; 0x05
    29c8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ca:	9a 83       	std	Y+2, r25	; 0x02
    29cc:	89 83       	std	Y+1, r24	; 0x01
    29ce:	89 81       	ldd	r24, Y+1	; 0x01
    29d0:	9a 81       	ldd	r25, Y+2	; 0x02
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	f1 f7       	brne	.-4      	; 0x29d2 <main+0x20c>
    29d6:	9a 83       	std	Y+2, r25	; 0x02
    29d8:	89 83       	std	Y+1, r24	; 0x01
    29da:	0b cf       	rjmp	.-490    	; 0x27f2 <main+0x2c>

000029dc <__udivmodsi4>:
    29dc:	a1 e2       	ldi	r26, 0x21	; 33
    29de:	1a 2e       	mov	r1, r26
    29e0:	aa 1b       	sub	r26, r26
    29e2:	bb 1b       	sub	r27, r27
    29e4:	fd 01       	movw	r30, r26
    29e6:	0d c0       	rjmp	.+26     	; 0x2a02 <__udivmodsi4_ep>

000029e8 <__udivmodsi4_loop>:
    29e8:	aa 1f       	adc	r26, r26
    29ea:	bb 1f       	adc	r27, r27
    29ec:	ee 1f       	adc	r30, r30
    29ee:	ff 1f       	adc	r31, r31
    29f0:	a2 17       	cp	r26, r18
    29f2:	b3 07       	cpc	r27, r19
    29f4:	e4 07       	cpc	r30, r20
    29f6:	f5 07       	cpc	r31, r21
    29f8:	20 f0       	brcs	.+8      	; 0x2a02 <__udivmodsi4_ep>
    29fa:	a2 1b       	sub	r26, r18
    29fc:	b3 0b       	sbc	r27, r19
    29fe:	e4 0b       	sbc	r30, r20
    2a00:	f5 0b       	sbc	r31, r21

00002a02 <__udivmodsi4_ep>:
    2a02:	66 1f       	adc	r22, r22
    2a04:	77 1f       	adc	r23, r23
    2a06:	88 1f       	adc	r24, r24
    2a08:	99 1f       	adc	r25, r25
    2a0a:	1a 94       	dec	r1
    2a0c:	69 f7       	brne	.-38     	; 0x29e8 <__udivmodsi4_loop>
    2a0e:	60 95       	com	r22
    2a10:	70 95       	com	r23
    2a12:	80 95       	com	r24
    2a14:	90 95       	com	r25
    2a16:	9b 01       	movw	r18, r22
    2a18:	ac 01       	movw	r20, r24
    2a1a:	bd 01       	movw	r22, r26
    2a1c:	cf 01       	movw	r24, r30
    2a1e:	08 95       	ret

00002a20 <__prologue_saves__>:
    2a20:	2f 92       	push	r2
    2a22:	3f 92       	push	r3
    2a24:	4f 92       	push	r4
    2a26:	5f 92       	push	r5
    2a28:	6f 92       	push	r6
    2a2a:	7f 92       	push	r7
    2a2c:	8f 92       	push	r8
    2a2e:	9f 92       	push	r9
    2a30:	af 92       	push	r10
    2a32:	bf 92       	push	r11
    2a34:	cf 92       	push	r12
    2a36:	df 92       	push	r13
    2a38:	ef 92       	push	r14
    2a3a:	ff 92       	push	r15
    2a3c:	0f 93       	push	r16
    2a3e:	1f 93       	push	r17
    2a40:	cf 93       	push	r28
    2a42:	df 93       	push	r29
    2a44:	cd b7       	in	r28, 0x3d	; 61
    2a46:	de b7       	in	r29, 0x3e	; 62
    2a48:	ca 1b       	sub	r28, r26
    2a4a:	db 0b       	sbc	r29, r27
    2a4c:	0f b6       	in	r0, 0x3f	; 63
    2a4e:	f8 94       	cli
    2a50:	de bf       	out	0x3e, r29	; 62
    2a52:	0f be       	out	0x3f, r0	; 63
    2a54:	cd bf       	out	0x3d, r28	; 61
    2a56:	09 94       	ijmp

00002a58 <__epilogue_restores__>:
    2a58:	2a 88       	ldd	r2, Y+18	; 0x12
    2a5a:	39 88       	ldd	r3, Y+17	; 0x11
    2a5c:	48 88       	ldd	r4, Y+16	; 0x10
    2a5e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a60:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a62:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a64:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a66:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a68:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a6a:	b9 84       	ldd	r11, Y+9	; 0x09
    2a6c:	c8 84       	ldd	r12, Y+8	; 0x08
    2a6e:	df 80       	ldd	r13, Y+7	; 0x07
    2a70:	ee 80       	ldd	r14, Y+6	; 0x06
    2a72:	fd 80       	ldd	r15, Y+5	; 0x05
    2a74:	0c 81       	ldd	r16, Y+4	; 0x04
    2a76:	1b 81       	ldd	r17, Y+3	; 0x03
    2a78:	aa 81       	ldd	r26, Y+2	; 0x02
    2a7a:	b9 81       	ldd	r27, Y+1	; 0x01
    2a7c:	ce 0f       	add	r28, r30
    2a7e:	d1 1d       	adc	r29, r1
    2a80:	0f b6       	in	r0, 0x3f	; 63
    2a82:	f8 94       	cli
    2a84:	de bf       	out	0x3e, r29	; 62
    2a86:	0f be       	out	0x3f, r0	; 63
    2a88:	cd bf       	out	0x3d, r28	; 61
    2a8a:	ed 01       	movw	r28, r26
    2a8c:	08 95       	ret

00002a8e <_exit>:
    2a8e:	f8 94       	cli

00002a90 <__stop_program>:
    2a90:	ff cf       	rjmp	.-2      	; 0x2a90 <__stop_program>
